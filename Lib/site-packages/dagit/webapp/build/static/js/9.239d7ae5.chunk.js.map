{"version":3,"sources":["../../core/src/execute/ExecutionSessionContainerError.tsx","../../core/src/execute/ExecutionSessionContainerLoading.tsx","../../core/src/execute/PipelineExecutionRoot.tsx","../../core/src/execute/PipelineExecutionSetupRoot.tsx","../../core/src/ui/ListComponents.tsx","../../core/src/partitions/PartitionGraph.tsx","../../core/src/partitions/PartitionGraphUtils.tsx","../../core/src/partitions/PartitionGraphSet.tsx","../../core/src/partitions/PartitionPageSizeSelector.tsx","../../core/src/partitions/PartitionProgress.tsx","../../core/src/partitions/PartitionRunListForStep.tsx","../../core/src/partitions/RunTagsTokenizingField.tsx","../../core/src/partitions/SliceSlider.tsx","../../core/src/partitions/useMatrixData.tsx","../../core/src/partitions/PartitionRunMatrix.tsx","../../core/src/partitions/PartitionSetSelector.tsx","../../core/src/partitions/PartitionsBackfill.tsx","../../core/src/partitions/useChunkedPartitionsQuery.tsx","../../core/src/partitions/PartitionView.tsx","../../core/src/partitions/PipelinePartitionsRoot.tsx","../../core/src/pipelines/SidebarPipelineOrJobOverview.tsx","../../core/src/pipelines/PipelineOverviewRoot.tsx","../../core/src/pipelines/PipelineRoot.tsx","../../core/src/instigation/LiveTickTimeline.tsx","../../core/src/instigation/TickHistory.tsx","../../core/src/workspace/PreviousRunsSection.tsx","../../core/src/schedules/ScheduleDetails.tsx","../../core/src/schedules/ScheduleRoot.tsx","../../core/src/sensors/SensorPreviousRuns.tsx","../../core/src/sensors/SensorRoot.tsx","../../core/src/workspace/AssetGraphRoot.tsx","../../core/src/workspace/GraphRoot.tsx","../../core/src/workspace/useReloadWorkspace.tsx","../../core/src/workspace/ReloadAllButton.tsx","../../core/src/workspace/RepositoryLocationsList.tsx","../../core/src/workspace/WorkspaceOverviewRoot.tsx","../../core/src/workspace/WorkspacePipelineRoot.tsx","../../core/src/schedules/SchedulesRoot.tsx","../../core/src/sensors/SensorsRoot.tsx","../../core/src/solids/SolidCard.tsx","../../core/src/solids/SolidDetailsRoot.tsx","../../core/src/solids/SolidsRoot.tsx","../../core/src/workspace/RepositoryAssetsList.tsx","../../core/src/workspace/RepositoryGraphsList.tsx","../../core/src/pipelines/PipelineTable.tsx","../../core/src/workspace/RepositoryPipelinesList.tsx","../../core/src/workspace/WorkspaceRepoRoot.tsx","../../core/src/workspace/WorkspaceRoot.tsx","../../core/src/execute/SessionSettingsBar.tsx","../../core/src/execute/ConfigEditorConfigPicker.tsx","../../core/src/execute/LoadingOverlay.tsx","../../core/src/execute/TagEditor.tsx"],"names":["ExecutionSessionContainerError","props","SplitPanelContainer","axis","identifier","firstInitialPercent","firstMinSize","first","SessionSettingsBar","Spinner","purpose","second","ExecutionSessionContainerLoading","LoadingOverlay","isLoading","message","ExecutionSessionContainer","React","PipelineExecutionRoot","pipelinePath","repoAddress","explorerPath","explorerPathFromString","pipelineName","pipelineMode","flagPipelineModeTuples","useFeatureFlags","useJobTitle","useStripSnapshotFromPath","repositoryName","name","repositoryLocationName","location","result","useQuery","PIPELINE_EXECUTION_ROOT_QUERY","variables","fetchPolicy","partialRefetch","pipelineOrError","data","partitionSetsOrError","__typename","icon","IconNames","FLOW_BRANCH","title","description","Error","ERROR","fallback","pipeline","undefined","partitionSets","EXECUTION_SESSION_CONTAINER_PIPELINE_FRAGMENT","gql","CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT","EXECUTION_SESSION_CONTAINER_PARTITION_SETS_FRAGMENT","CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT","PipelineExecutionSetupRoot","useStorage","onSave","qs","querystring","window","search","config","mode","solidSelection","newSession","runConfigYaml","Array","solidSelectionQuery","applyCreateSession","to","pathname","workspacePathFromAddress","RowContainer","styled","div","Colors","DARK_GRAY5","LIGHT_GRAY1","ScrollContainer","PartitionGraph","ref","runsByPartitionName","getPipelineDataForRun","getStepDataForRun","yLabel","hiddenPartitions","setHiddenPartitions","chart","getChartInstance","current","chartInstance","onGraphClick","event","instance","xAxis","scales","offsetX","offsetY","type","chartArea","right","left","bottom","top","shiftKey","labelIndex","getValueForPixel","partitionName","labels","defaultOptions","display","text","y","id","x","plugins","legend","onClick","_e","_legendItem","pipelineData","stepData","partitionNames","Object","keys","forEach","run","runs","length","toSort","slice","sort","_reverseSortRunCompare","selectRun","hidden","push","stepDataforRun","stepKey","_fillPartitions","buildDatasetData","graphData","datasets","label","borderColor","GRAY2","backgroundColor","map","colorHash","style","margin","height","options","points","pointData","point","a","b","stats","startTime","PARTITION_GRAPH_FRAGMENT","getPipelineDurationForRun","endTime","getStepDurationsForRun","stepStats","perStepDuration","stepStat","getPipelineMaterializationCountForRun","materializations","getStepMaterializationCountForRun","perStepCounts","getPipelineExpectationSuccessForRun","stepCounts","getStepExpectationSuccessForRun","_arraySum","values","expectationResults","filter","success","getPipelineExpectationFailureForRun","getStepExpectationFailureForRun","getPipelineExpectationRateForRun","stepSuccesses","stepFailures","pipelineSuccesses","pipelineTotal","getStepExpectationRateForRun","results","arr","sum","StepSelector","all","onChangeHidden","jobLabel","onStepClick","evt","includes","s","allButClicked","isEqual","NavSectionHeader","flex","fontSize","opacity","NavSection","Item","shown","color","marginRight","borderRadius","width","GRAY5","PartitionGraphSet","partitions","allStepKeys","hiddenStepKeys","setHiddenStepKeys","durationGraph","materializationGraph","successGraph","failureGraph","rateGraph","graphs","partition","PartitionContentContainer","minWidth","NavContainer","hiddenKeys","graph","dataset","idx","getDatasetMeta","PARTITION_GRAPH_SET_RUN_FRAGMENT","PartitionPageSizeSelector","value","onChange","PartitionPageSizeButtonGroup","size","active","className","ButtonGroup","PartitionProgress","backfillId","shouldPoll","setShouldPoll","isTerminating","setIsTerminating","queryResult","PARTITION_PROGRESS_QUERY","pollInterval","POLL_INTERVAL","notifyOnNetworkStatusChange","limit","refetch","partitionBackfillOrError","counts","byPartitionRuns","tags","tag","key","DagsterTag","Partition","runPartitionName","latestPartitionRuns","reduce","accum","status","numQueued","queuedStatuses","has","numInProgress","inProgressStatuses","numSucceeded","successStatuses","numFailed","failedStatuses","numPartitionRuns","numTotalRuns","numFinished","unscheduled","numTotal","numRequested","skipped","table","TooltipTable","runStatus","PipelineRunStatus","QUEUED","humanText","count","STARTED","SUCCESS","FAILURE","unfinishedMap","doneStatuses","canTerminate","Box","alignItems","grow","justifyContent","Group","direction","spacing","content","fontVariantNumeric","stringify","q","stringFromValue","token","minimal","intent","TerminationDialog","isOpen","onClose","onComplete","selectedRuns","QueryCountdown","TooltipTableRow","PYTHON_ERROR_FRAGMENT","PartitionRunListForStep","PARTITION_RUN_LIST_FOR_STEP_QUERY","loading","pipelineRunsOrError","RunTable","onSetFilter","additionalColumnHeaders","maxWidth","additionalColumnsForRow","stepStatsByRunId","runId","linkToLogs","selection","stepName","logs","StepStatsColumn","borderRight","StatSummaryLine","background","STEP_STATUS_COLORS","StatBox","e","component","Button","small","rightIcon","LIGHT_GRAY2","RUN_TABLE_RUN_FRAGMENT","RunTagsSupportedTokens","RunTagsTokenizingField","tokens","suggestions","runTagValues","r","t","uniq","tokenizedValuesFromString","TokenizingField","placeholder","suggestionProviders","SliceSlider","minUnix","maxUnix","disabled","delta","timeout","useRef","stopPropagation","SliderWithHandleLabelOnly","min","max","stepSize","labelRenderer","whiteSpace","moment","unix","format","clearTimeout","setTimeout","Handle","intentAfter","Intent","PRIMARY","MultiSlider","StatusSquareFinalColor","getStartTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","RegExp","match","useMatrixData","inputs","cachedMatrixData","solidHandles","shallowCompareKeys","nodes","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","stepQuery","layout","p","partitionColumns","steps","boxes","node","datapoints","runIdx","find","reverse","prev","dp","partitionsWithARun","stepRows","box","totalFailures","finalFailures","endsWith","totalFailurePercent","Math","round","finalFailurePercent","showFailuresAndGapsOnly","ii","splice","every","step","buildMatrixData","buildLayout","GanttChartMode","FLAT","TITLE_TOTAL_FAILURES","TITLE_FINAL_FAILURES","SORT_FINAL_ASC","SORT_FINAL_DESC","SORT_TOTAL_ASC","SORT_TOTAL_DESC","_backfillIdFromTags","runTags","_","startsWith","split","PartitionRunSelectionQueryConfig","encode","val","decode","DisplayOptionsQueryConfig","showPrevious","colorizeByAge","defaults","PartitionRunMatrix","basePath","AppContext","useViewport","viewport","containerProps","colorizeSliceUnix","setColorizeSliceUnix","hovered","setHovered","useQueryPersistedState","focused","setFocused","queryKey","stepSort","setStepSort","setOptions","repositorySelector","repoAddressToSelector","pipelineSelector","PARTITION_RUN_MATRIX_PIPELINE_QUERY","pipelineSnapshotOrError","sortPartitionSteps","stepsByName","stepRow","visibleRangeStart","floor","visibleCount","ceil","OVERSCROLL","visibleColumns","Date","now","PartitionRunMatrixContainer","WHITE","padding","marginBottom","assign","Classes","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","autoFocus","vertical","setRunTags","position","Icon","ColorsWIP","Gray700","Gray200","shouldDismissPopover","tagName","border","borderLeft","floating","flexShrink","overflow","GraphQueryInput","items","setStepQuery","paddingLeft","data-tooltip","Divider","cursor","redness","zIndex","dimSuccesses","interactionKind","placement","href","toLowerCase","onMouseEnter","onMouseLeave","textAlign","PARTITION_RUN_MATRIX_RUN_FRAGMENT","PIPELINE_EXPLORER_SOLID_HANDLE_FRAGMENT","PartitionSetSelector","selected","onSelect","open","setOpen","onInteraction","wrapperTagName","partitionSet","DEFAULT_RUN_LAUNCHER_NAME","PartitionsBackfillPartitionSelector","partitionSetName","onLaunch","onSubmit","currentSelectionRange","setCurrentSelectionRange","setSelected","tagEditorOpen","setTagEditorOpen","setTags","query","setQuery","reexecute","fromFailure","initialOffset","el","scrollWidth","clientWidth","resetSelectionRange","addEventListener","removeEventListener","mounted","PARTITIONS_BACKFILL_SELECTOR_QUERY","useLazyQuery","PARTITION_STATUS_QUERY","queryStatuses","statusesLoading","statusesData","partitionSetOrError","PythonErrorInfo","error","pipelineSnapshot","solids","runPartitions","partitionsOrError","names","statuses","partitionStatusesOrError","partitionsWithLastRunSuccess","partitionsWithLastRunFailure","CANCELED","CANCELING","selectablePartitions","usingDefaultRunLauncher","runLauncher","currentRangeSelection","start","end","startIdx","indexOf","endIdx","getRangeSelection","selectedString","remaining","str","shift","endIdxInSelected","replace","partitionsToText","DIALOG_BODY","marginLeft","checked","fill","defaultValue","onBlur","terms","trim","term","rangeMatch","exec","allStartIdx","allEndIdx","prefix","suffix","textToPartitions","target","err","preventDefault","showCustomAlert","body","marginTop","Gray500","paddingTop","borderTop","LIGHT_GRAY3","GRAY3","userSelect","multiselectFocused","onMouseDown","onMouseUp","newSelected","Set","add","from","onPartitionMouseUp","onMouseOver","onPartitionMouseOver","daemonHealth","daemonStatus","healthy","Alert","rel","runQueuingSupported","TagEditor","tagsFromSession","onRequestClose","borderBottom","fromSession","onRequestEdit","ButtonLink","reexecutionSteps","onSuccess","SharedToaster","show","FilteredRunsLink","onError","launchPartitionBackfill","errors","invalidStepKey","invalidOutputName","underline","DANGER","LaunchBackfillButton","useMutation","LAUNCH_PARTITION_BACKFILL_MUTATION","launchBackfill","backfillParams","selector","reexecutionCount","buttonTitle","join","LaunchButton","runCount","PaginationStateQueryConfig","state","cursorStack","pageSize","Number","InitialDataState","loadingPercent","fetchRunsForFilter","client","PARTITION_SET_LOADER_QUERY","assemblePartitions","some","PARTITION_SET_LOADER_RUN_FRAGMENT","PARTITION_SET_NAMES_QUERY","PartitionView","onChangePartitionSet","useQueryPersistedRunFilters","showBackfillSetup","setShowBackfillSetup","blockDialog","setBlockDialog","runsFilter","useApolloClient","version","dataState","setDataState","setPaginationState","v","namesResult","parallelQueries","sliceStartIdx","sliceNames","Promise","PartitionSet","fetched","concat","timer","setInterval","clearInterval","recent","pending","relevant","updated","o","setPageSize","paginationProps","hasPrevCursor","hasNextCursor","popCursor","advanceCursor","reset","useChunkedPartitionsQuery","canLaunchPartitionBackfill","usePermissions","stat","partitionSetsForMode","canEscapeKeyClose","canOutsideClickClose","PartitionPagerContainer","ADD","DISABLED_MESSAGE","horizontal","textOverflow","PipelinePartitionsRoot","PIPELINE_PARTITIONS_ROOT_QUERY","Loading","Wrapper","SidebarPipelineOrJobOverview","usePipelineSelector","JOB_OVERVIEW_SIDEBAR_QUERY","NonIdealPipelineQueryResult","modes","m","Description","SidebarModeSection","SIDEBAR_MODE_INFO_FRAGMENT","PipelineOverviewRoot","history","useHistory","useLocation","params","explorerPathToString","PipelineExplorerJobContext","Provider","sidebarTab","onChangeExplorerPath","path","action","PipelineRoot","canLaunchPipelineExecution","useEnforceModeInPipelinePath","flexDirection","PipelineNav","render","repoPath","PipelineRunsRoot","COLOR_MAP","InstigationTickStatus","BLUE3","RED3","SKIPPED","GOLD3","LiveTickTimeline","ticks","nextTick","onHoverTick","onSelectTick","setNow","graphNow","setGraphNow","isPaused","setPaused","interval","timestamp","nextTickRadius","sin","PI","tickData","tick","tickColors","tickRadii","LIGHT_GRAY4","borderWidth","pointBorderWidth","pointBorderColor","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBorderWidth","pointHoverBorderColor","animation","duration","grid","bounds","time","minUnit","tooltip","displayColors","callbacks","tooltipItem","datasetIndex","dataIndex","skipReason","runIds","originRunIds","_event","activeElements","item","index","onHover","elements","HTMLElement","element","Chart","register","zoomPlugin","MIN_ZOOM_RANGE","DEFAULT_SHOWN_STATUS_STATE","STATUS_TEXT_MAP","TABS","range","TickHistory","onHighlightRunIds","showRecent","selectedTab","setSelectedTab","shownStates","setShownStates","pollingPaused","pausePolling","selectedTick","setSelectedTick","selectedRange","JOB_TICK_HISTORY_QUERY","instigationSelector","dayRange","tabs","selectedTabId","tab","instigationStateOrError","instigationType","displayedTicks","InstigationType","SCHEDULE","StatusFilter","onTickClick","onTickHover","maxBounds","TimestampDisplay","TickHistoryGraph","setBounds","hoveredTick","setHoveredTick","showLine","getMaxBounds","dataMin","dataMax","buffer","calculateBounds","dateFormat","snippet","snipped","indexAxis","drawBorder","source","hour","day","factor","calculateUnit","zoom","limits","wheel","enabled","pinch","onZoom","offset","pan","onPan","TICK_TAG_FRAGMENT","PreviousRunsSection","highlightedIds","side","PREVIOUS_RUNS_FRAGMENT","TIME_FORMAT","showSeconds","showTimezone","ScheduleDetails","schedule","countdownDuration","countdownStatus","onRefresh","cronSchedule","executionTimezone","futureTicks","copyToClipboard","useCopyToClipboard","copyText","setCopyText","timeRemaining","useCountdown","scheduleState","latestTick","running","InstigationStatus","RUNNING","countdownRefreshing","seconds","PageHeader","ScheduleSwitch","timezone","timeFormat","RepositoryLink","RefreshableCountdown","refreshing","link","hover","GRAY1","MetadataTable","rows","PipelineReference","pipelineHrefContext","SchedulePartitionStatus","humanCronString","Boolean","INTERVAL","ScheduleRoot","scheduleName","runTab","useDocumentTitle","selectedRunIds","setSelectedRunIds","scheduleSelector","SCHEDULE_ROOT_QUERY","networkStatus","stopPolling","startPolling","NetworkStatus","ready","allowStaleData","scheduleOrError","scheduler","Page","SchedulerInfo","schedulerOrError","errorsOnly","SchedulePreviousRuns","PREVIOUS_RUNS_FOR_SCHEDULE_QUERY","ScheduleName","SCHEDULER_FRAGMENT","SCHEDULE_FRAGMENT","INSTANCE_HEALTH_FRAGMENT","SensorPreviousRuns","sensor","PREVIOUS_RUNS_FOR_SENSOR_QUERY","targets","SensorName","NoTargetSensorPreviousRuns","SensorRoot","sensorName","sensorSelector","SENSOR_ROOT_QUERY","sensorOrError","SensorInfo","SensorDetails","SENSOR_FRAGMENT","getNodeDimensions","def","assetMaterializations","runForDisplay","assetKey","getBlankDimensions","JSON","parse","buildSVGPath","pathVerticalDiagonal","AssetGraphRoot","ASSETS_GRAPH_QUERY","useState","nodeSelection","setSelectedNode","useRouteMatch","useEffect","repositoryOrError","assetNodes","definition","repository","downstream","upstream","assetKeyJson","dependencies","dependency","upstreamAssetKeyJson","upstreamAsset","inputName","jobName","buildGraphData","stack","delete","nextStack","nextNode","hasCycles","next","graphHasCycles","g","dagre","Graph","setGraph","rankdir","marginx","marginy","setDefaultEdgeLabel","setNode","foreignNodes","upstreamId","downstreamId","setEdge","w","weight","dagreNodesById","maxHeight","dagreNode","edges","edge","dashed","layoutGraph","computeStatuses","timestamps","materializationEvent","asset","findComputeStatusForId","buildGraphComputeStatuses","nodeSelectionPipeline","samePipelineNodes","n","SVGViewport","interactor","Interactors","PanAndZoom","graphWidth","graphHeight","onKeyDown","onDoubleClick","maxZoom","maxAutocenterZoom","scale","SVGContainer","viewBox","refX","refY","markerUnits","markerWidth","markerHeight","orient","d","StyledPath","markerEnd","layoutNode","graphNode","encodeURIComponent","assetKeyPath","secondaryHighlight","computeStatus","AssetPanel","overflowY","fontWeight","workspacePath","JobMetadata","AssetDetails","asOf","asSidebarSection","AssetMaterializations","runOrError","METADATA_ENTRY_FRAGMENT","svg","ForeignNode","inset","fontFamily","FontFamily","monospace","AssetNode","LAUNCH_PIPELINE_EXECUTION_MUTATION","launchPipelineExecution","useContext","executionParams","stepKeys","opName","handleLaunchResult","showLaunchError","outline","BLUE4","old","good","none","lineHeight","data-tooltip-style","RunLinkTooltipStyle","paddingRight","titleForRun","TimeElapsed","startUnix","endUnix","ts","upstreamIds","uid","BLUE2","GraphRoot","pathSolids","minHeight","RELOAD_WORKSPACE_MUTATION","UNAUTHORIZED_ERROR_FRAGMENT","ReloadAllButton","apollo","reloading","setReloading","reload","invalidateConfigs","useInvalidateConfigsForRepo","reloadWorkspace","locationEntries","reposToInvalidate","locationEntry","locationOrLoadError","repositories","resetStore","useReloadWorkspace","canReloadWorkspace","LocationStatus","locationOrError","showDialog","setShowDialog","useRepositoryLocationReload","tryReload","loadStatus","onDismiss","onTryReload","ReloadButton","canReloadRepositoryLocation","ReloadRepositoryLocationButton","RepositoryLocationsList","WorkspaceContext","Table","colSpan","displayMetadata","metadata","wordBreak","Timestamp","updatedTimestamp","WorkspaceOverviewRoot","useRepositoryOptions","flagAssetGraph","repositoryLocation","repoString","buildRepoPath","WorkspacePipelineRoot","entireMatch","toAppend","reposWithMatch","findRepoContainingPipeline","optionToRepoAddress","SchedulesRoot","SCHEDULES_ROOT_QUERY","unloadableInstigationStatesOrError","schedulesSection","schedules","SchedulesTable","SchedulesNextTicks","repos","TIME","Unloadable","scheduleStates","SensorsRoot","SENSORS_ROOT_QUERY","SENSOR","sensorsOrError","SensorsTable","sensors","sensorStates","AUTOMATIC_UPDATES","INSTIGATION_STATE_FRAGMENT","SolidCard","inputDefinitions","outputDefinitions","layoutSolid","dependsOn","outputs","dependedBy","SolidCardContainer","boundingBox","SolidNode","invocation","minified","onEnterComposite","onHighlightEdges","highlightedEdges","dim","SOLID_CARD_SOLID_DEFINITION_FRAGMENT","SOLID_NODE_DEFINITION_FRAGMENT","UsedSolidDetails","onClickInvocation","USED_SOLID_DETAILS_QUERY","usedSolid","SidebarSolidDefinition","showingSubsolids","getInvocations","invocations","i","handleID","solidHandle","SIDEBAR_SOLID_DEFINITION_FRAGMENT","SolidDetailScrollContainer","flatUniq","arrs","localeCompare","SolidsRoot","SOLIDS_ROOT_QUERY","usedSolids","SolidsRootWithData","typeExplorer","displayName","filtered","filterSolidsWithSearch","onSearch","onClickSolid","defName","SolidListColumnContainer","nonce","__webpack_nonce__","SolidList","cache","CellMeasurerCache","defaultHeight","fixedWidth","lastWidth","clearAll","selectedIndex","findIndex","rowCount","rowHeight","scrollToIndex","rowRenderer","parent","SolidListItem","SolidName","SolidTypeSignature","overscanRowCount","SOLID_TYPE_SIGNATURE_FRAGMENT","DARK_GRAY3","REPOSITORY_ASSETS_LIST_QUERY","RepositoryAssetsList","repo","console","log","assetsForTable","repoAddressAsString","REPOSITORY_GRAPHS_LIST_QUERY","RepositoryGraphsList","graphsForTable","pipelines","PipelineTable","showRepo","PIPELINE_TABLE_FRAGMENT","REPOSITORY_PIPELINES_LIST_QUERY","RepositoryPipelinesList","pipelinesForTable","WorkspaceRepoRoot","large","activeTab","flexGrow","url","exact","RepoRouteContainer","workspaceState","addressForPath","repoAddressFromPath","allRepos","decodeURIComponent","WorkspaceRoot","MainContent","ConfigEditorConfigPicker","base","onSaveSession","onSelectPreset","onSelectPartition","presets","configGenerators","PickerContainer","ConfigEditorConfigGeneratorPicker","presetName","partitionsSetName","ConfigEditorPartitionPicker","CONFIG_PARTITIONS_QUERY","sortOrder","setSortOrder","retrieved","onClickSort","order","rightElement","Gray400","inputProps","NONE","itemRenderer","noResults","inputValueRenderer","selectedItem","defaultSelectedItem","itemPredicate","modifiers","handleClick","onItemSelect","select","itemLabel","shortcutLabel","shortcutFilter","keyCode","altKey","onShortcut","btnEl","ReactDOM","querySelector","click","activateSelect","configGenerator","itemListRenderer","itemsParentRef","renderItem","filteredItems","renderedPresetItems","renderedPartitionSetItems","bothTypesPresent","ulRef","data-test-id","CONFIG_PARTITION_SELECTION_QUERY","LoadingOverlayContainer","tagsFromDefinition","editState","setEditState","toSave","toError","onTagEdit","usePortal","TagList","editable","Input","RemoveButton","onRemove","TagContainer","fromDefinition","Container","sessionTag","TagEditorLink","onRequestOpen","children","Link","button","input"],"mappings":"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","file":"static/js/9.239d7ae5.chunk.js","sourcesContent":["import {NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport {Spinner} from '../ui/Spinner';\nimport {SplitPanelContainer} from '../ui/SplitPanelContainer';\n\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nexport const ExecutionSessionContainerError: React.FC<NonIdealState['props']> = (props) => (\n  <SplitPanelContainer\n    axis={'vertical'}\n    identifier={'execution'}\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <SessionSettingsBar>\n          <Spinner purpose=\"section\" />\n        </SessionSettingsBar>\n        <NonIdealState {...props} />\n      </>\n    }\n    second={<div />}\n  />\n);\n","import * as React from 'react';\n\nimport {SplitPanelContainer} from '../ui/SplitPanelContainer';\n\nimport {LoadingOverlay} from './LoadingOverlay';\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nconst LOADING_PIPELINE = `Loading pipeline and partition sets...`;\n\nexport const ExecutionSessionContainerLoading = () => (\n  <SplitPanelContainer\n    axis={'vertical'}\n    identifier={'execution'}\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <LoadingOverlay isLoading message={LOADING_PIPELINE} />\n        <SessionSettingsBar />\n      </>\n    }\n    second={<LoadingOverlay isLoading message={'Loading pipeline and partition sets...'} />}\n  />\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {IconNames} from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT,\n  CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT,\n} from './ConfigEditorConfigPicker';\nimport {ExecutionSessionContainerError} from './ExecutionSessionContainerError';\nimport {ExecutionSessionContainerLoading} from './ExecutionSessionContainerLoading';\nimport {PipelineExecutionRootQuery} from './types/PipelineExecutionRootQuery';\n\nconst ExecutionSessionContainer = React.lazy(() => import('./ExecutionSessionContainer'));\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineExecutionRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, pipelineMode} = explorerPath;\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  useJobTitle(explorerPath);\n  useStripSnapshotFromPath(props);\n\n  const {name: repositoryName, location: repositoryLocationName} = repoAddress;\n\n  const result = useQuery<PipelineExecutionRootQuery>(PIPELINE_EXECUTION_ROOT_QUERY, {\n    variables: {repositoryName, repositoryLocationName, pipelineName},\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n  });\n\n  const pipelineOrError = result?.data?.pipelineOrError;\n  const partitionSetsOrError = result?.data?.partitionSetsOrError;\n\n  if (!pipelineOrError || !partitionSetsOrError) {\n    return <ExecutionSessionContainerLoading />;\n  }\n\n  if (\n    partitionSetsOrError.__typename === 'PipelineNotFoundError' ||\n    pipelineOrError.__typename === 'PipelineNotFoundError'\n  ) {\n    const message =\n      pipelineOrError.__typename === 'PipelineNotFoundError'\n        ? pipelineOrError.message\n        : 'No data returned from GraphQL';\n\n    return pipelineName !== '' ? (\n      <ExecutionSessionContainerError\n        icon={IconNames.FLOW_BRANCH}\n        title={flagPipelineModeTuples ? 'Job not found' : 'Pipeline not found'}\n        description={message}\n      />\n    ) : (\n      <ExecutionSessionContainerError\n        icon={IconNames.FLOW_BRANCH}\n        title={flagPipelineModeTuples ? 'Select a job' : 'Select a pipeline'}\n      />\n    );\n  }\n\n  if (pipelineOrError && pipelineOrError.__typename === 'InvalidSubsetError') {\n    throw new Error(`Should never happen because we do not request a subset`);\n  }\n\n  if (pipelineOrError && pipelineOrError.__typename === 'PythonError') {\n    return (\n      <ExecutionSessionContainerError\n        icon={IconNames.ERROR}\n        title=\"Python Error\"\n        description={pipelineOrError.message}\n      />\n    );\n  }\n  if (partitionSetsOrError && partitionSetsOrError.__typename === 'PythonError') {\n    return (\n      <ExecutionSessionContainerError\n        icon={IconNames.ERROR}\n        title=\"Python Error\"\n        description={partitionSetsOrError.message}\n      />\n    );\n  }\n\n  return (\n    <React.Suspense fallback={<div />}>\n      <ExecutionSessionContainer\n        pipeline={pipelineOrError}\n        pipelineMode={flagPipelineModeTuples ? pipelineMode : undefined}\n        partitionSets={partitionSetsOrError}\n        repoAddress={repoAddress}\n      />\n    </React.Suspense>\n  );\n};\n\nconst EXECUTION_SESSION_CONTAINER_PIPELINE_FRAGMENT = gql`\n  fragment ExecutionSessionContainerPipelineFragment on Pipeline {\n    id\n    ...ConfigEditorGeneratorPipelineFragment\n    modes {\n      id\n      name\n      description\n    }\n  }\n  ${CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT}\n`;\n\nconst EXECUTION_SESSION_CONTAINER_PARTITION_SETS_FRAGMENT = gql`\n  fragment ExecutionSessionContainerPartitionSetsFragment on PartitionSets {\n    ...ConfigEditorGeneratorPartitionSetsFragment\n  }\n  ${CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT}\n`;\n\nconst PIPELINE_EXECUTION_ROOT_QUERY = gql`\n  query PipelineExecutionRootQuery(\n    $pipelineName: String!\n    $repositoryName: String!\n    $repositoryLocationName: String!\n  ) {\n    pipelineOrError(\n      params: {\n        pipelineName: $pipelineName\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PythonError {\n        message\n      }\n      ... on Pipeline {\n        id\n        ...ExecutionSessionContainerPipelineFragment\n      }\n    }\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      __typename\n      ...ExecutionSessionContainerPartitionSetsFragment\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PythonError {\n        message\n      }\n    }\n  }\n\n  ${EXECUTION_SESSION_CONTAINER_PIPELINE_FRAGMENT}\n  ${EXECUTION_SESSION_CONTAINER_PARTITION_SETS_FRAGMENT}\n`;\n","import * as querystring from 'query-string';\nimport * as React from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {IExecutionSession, applyCreateSession, useStorage} from '../app/LocalStorage';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineExecutionSetupRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  useJobTitle(explorerPath);\n\n  const {pipelineName} = explorerPath;\n  const [data, onSave] = useStorage(repoAddress.name, pipelineName);\n  const qs = querystring.parse(window.location.search);\n\n  React.useEffect(() => {\n    if (qs.config || qs.mode || qs.solidSelection) {\n      const newSession: Partial<IExecutionSession> = {};\n      if (typeof qs.config === 'string') {\n        newSession.runConfigYaml = qs.config;\n      }\n      if (typeof qs.mode === 'string') {\n        newSession.mode = qs.mode;\n      }\n      if (qs.solidSelection instanceof Array) {\n        newSession.solidSelection = qs.solidSelection;\n      } else if (typeof qs.solidSelection === 'string') {\n        newSession.solidSelection = [qs.solidSelection];\n      }\n      if (typeof qs.solidSelectionQuery === 'string') {\n        newSession.solidSelectionQuery = qs.solidSelectionQuery;\n      }\n\n      onSave(applyCreateSession(data, newSession));\n    }\n  });\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(repoAddress, `/pipelines/${pipelineName}/playground`),\n      }}\n    />\n  );\n};\n","import {Colors} from '@blueprintjs/core';\nimport styled from 'styled-components/macro';\n\nexport const RowContainer = styled.div`\n  display: flex;\n  color: ${Colors.DARK_GRAY5};\n  margin-bottom: 9px;\n  border: 1px solid ${Colors.LIGHT_GRAY1};\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n  padding: 2px 10px;\n  text-decoration: none;\n`;\n\nexport const ScrollContainer = styled.div`\n  overflow: auto;\n  width: 100%;\n`;\n","import {Colors} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {colorHash} from '../app/Util';\nimport {RowContainer} from '../ui/ListComponents';\n\nimport {PartitionGraphFragment} from './types/PartitionGraphFragment';\n\ntype PointValue = number | null | undefined;\ntype Point = {x: string; y: PointValue};\n\ninterface PartitionGraphProps {\n  runsByPartitionName: {[name: string]: PartitionGraphFragment[]};\n  getPipelineDataForRun: (run: PartitionGraphFragment) => PointValue;\n  getStepDataForRun: (run: PartitionGraphFragment) => {[key: string]: PointValue[]};\n  title?: string;\n  yLabel?: string;\n}\n\nexport const PartitionGraph = React.forwardRef((props: PartitionGraphProps, ref) => {\n  const {runsByPartitionName, getPipelineDataForRun, getStepDataForRun, title, yLabel} = props;\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  const [hiddenPartitions, setHiddenPartitions] = React.useState<{[name: string]: boolean}>(\n    () => ({}),\n  );\n  const chart = React.useRef<any>(null);\n\n  React.useImperativeHandle(ref, () => ({\n    getChartInstance: () => chart.current?.chartInstance,\n  }));\n\n  const onGraphClick = React.useCallback((event: MouseEvent) => {\n    const instance = chart.current?.chartInstance;\n    if (!instance) {\n      return;\n    }\n    const xAxis = instance.scales['x-axis-0'];\n    if (!xAxis) {\n      return;\n    }\n    const {offsetX, offsetY} = event;\n\n    const isChartClick =\n      event.type === 'click' &&\n      offsetX <= instance.chartArea.right &&\n      offsetX >= instance.chartArea.left &&\n      offsetY <= instance.chartArea.bottom &&\n      offsetY >= instance.chartArea.top;\n\n    if (!isChartClick || !event.shiftKey) {\n      return;\n    }\n\n    // category scale returns index here for some reason\n    const labelIndex = xAxis.getValueForPixel(offsetX);\n    const partitionName = instance.data.labels[labelIndex];\n    setHiddenPartitions((current) => ({\n      ...current,\n      [partitionName]: !current[partitionName],\n    }));\n  }, []);\n\n  const defaultOptions = React.useMemo(() => {\n    const titleOptions = title ? {display: true, text: title} : undefined;\n    const scales = yLabel\n      ? {\n          y: {\n            id: 'y',\n            title: {display: true, text: yLabel},\n          },\n          x: {\n            id: 'x',\n            title: {display: true, text: 'Partition'},\n          },\n        }\n      : undefined;\n    return {\n      title: titleOptions,\n      scales,\n      plugins: {\n        legend: {\n          display: false,\n          onClick: (_e: MouseEvent, _legendItem: any) => {},\n        },\n      },\n      onClick: onGraphClick,\n    };\n  }, [onGraphClick, title, yLabel]);\n\n  const selectRun = (runs?: PartitionGraphFragment[]) => {\n    if (!runs || !runs.length) {\n      return null;\n    }\n\n    // get most recent run\n    const toSort = runs.slice();\n    toSort.sort(_reverseSortRunCompare);\n    return toSort[0];\n  };\n\n  const buildDatasetData = () => {\n    const pipelineData: Point[] = [];\n    const stepData = {};\n\n    const partitionNames = Object.keys(runsByPartitionName);\n    partitionNames.forEach((partitionName) => {\n      const run = selectRun(runsByPartitionName[partitionName]);\n      const hidden = !!hiddenPartitions[partitionName];\n      pipelineData.push({\n        x: partitionName,\n        y: run && !hidden ? getPipelineDataForRun(run) : undefined,\n      });\n\n      if (!run) {\n        return;\n      }\n\n      const stepDataforRun = getStepDataForRun(run);\n      Object.keys(stepDataforRun).forEach((stepKey) => {\n        stepData[stepKey] = [\n          ...(stepData[stepKey] || []),\n          {x: partitionName, y: !hidden ? stepDataforRun[stepKey] : undefined},\n        ];\n      });\n    });\n\n    // stepData may have holes due to missing runs or missing steps.  For these to\n    // render properly, fill in the holes with `undefined` values.\n    Object.keys(stepData).forEach((stepKey) => {\n      stepData[stepKey] = _fillPartitions(partitionNames, stepData[stepKey]);\n    });\n\n    return {pipelineData, stepData};\n  };\n\n  const {pipelineData, stepData} = buildDatasetData();\n  const graphData = {\n    labels: Object.keys(runsByPartitionName),\n    datasets: [\n      {\n        label: flagPipelineModeTuples ? 'Total job' : 'Total pipeline',\n        data: pipelineData,\n        borderColor: Colors.GRAY2,\n        backgroundColor: 'rgba(0,0,0,0)',\n      },\n      ...Object.keys(stepData).map((stepKey) => ({\n        label: stepKey,\n        data: stepData[stepKey],\n        borderColor: colorHash(stepKey),\n        backgroundColor: 'rgba(0,0,0,0)',\n      })),\n    ],\n  };\n\n  return (\n    <RowContainer style={{margin: '20px 0'}}>\n      <Line type=\"line\" data={graphData} height={100} options={defaultOptions} ref={chart} />\n    </RowContainer>\n  );\n});\n\nconst _fillPartitions = (partitionNames: string[], points: Point[]) => {\n  const pointData = {};\n  points.forEach((point) => {\n    pointData[point.x] = point.y;\n  });\n\n  return partitionNames.map((partitionName) => ({\n    x: partitionName,\n    y: pointData[partitionName],\n  }));\n};\n\nconst _reverseSortRunCompare = (a: PartitionGraphFragment, b: PartitionGraphFragment) => {\n  if (!a.stats || a.stats.__typename !== 'PipelineRunStatsSnapshot' || !a.stats.startTime) {\n    return 1;\n  }\n  if (!b.stats || b.stats.__typename !== 'PipelineRunStatsSnapshot' || !b.stats.startTime) {\n    return -1;\n  }\n  return b.stats.startTime - a.stats.startTime;\n};\n","import {gql} from '@apollo/client';\nimport {Colors} from '@blueprintjs/core';\nimport {isEqual} from 'lodash';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {colorHash} from '../app/Util';\n\nimport {PartitionGraphFragment} from './types/PartitionGraphFragment';\n\nexport const PARTITION_GRAPH_FRAGMENT = gql`\n  fragment PartitionGraphFragment on PipelineRun {\n    id\n    runId\n    stats {\n      ... on PipelineRunStatsSnapshot {\n        id\n        startTime\n        endTime\n        materializations\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n    stepStats {\n      __typename\n      stepKey\n      startTime\n      endTime\n      status\n      materializations {\n        __typename\n      }\n      expectationResults {\n        success\n      }\n    }\n  }\n`;\n\nexport const getPipelineDurationForRun = (run: PartitionGraphFragment) => {\n  const {stats} = run;\n  if (\n    stats &&\n    stats.__typename === 'PipelineRunStatsSnapshot' &&\n    stats.endTime &&\n    stats.startTime\n  ) {\n    return stats.endTime - stats.startTime;\n  }\n\n  return undefined;\n};\n\nexport const getStepDurationsForRun = (run: PartitionGraphFragment) => {\n  const {stepStats} = run;\n\n  const perStepDuration = {};\n  stepStats.forEach((stepStat: any) => {\n    if (stepStat.endTime && stepStat.startTime) {\n      perStepDuration[stepStat.stepKey] = stepStat.endTime - stepStat.startTime;\n    }\n  });\n\n  return perStepDuration;\n};\n\nexport const getPipelineMaterializationCountForRun = (run: PartitionGraphFragment) => {\n  const {stats} = run;\n  if (stats && stats.__typename === 'PipelineRunStatsSnapshot') {\n    return stats.materializations;\n  }\n  return undefined;\n};\n\nexport const getStepMaterializationCountForRun = (run: PartitionGraphFragment) => {\n  const {stepStats} = run;\n  const perStepCounts = {};\n  stepStats.forEach((stepStat) => {\n    perStepCounts[stepStat.stepKey] = stepStat.materializations?.length || 0;\n  });\n  return perStepCounts;\n};\n\nexport const getPipelineExpectationSuccessForRun = (run: PartitionGraphFragment) => {\n  const stepCounts: {[key: string]: number} = getStepExpectationSuccessForRun(run);\n  return _arraySum(Object.values(stepCounts));\n};\n\nexport const getStepExpectationSuccessForRun = (run: PartitionGraphFragment) => {\n  const {stepStats} = run;\n  const perStepCounts = {};\n  stepStats.forEach((stepStat) => {\n    perStepCounts[stepStat.stepKey] =\n      stepStat.expectationResults?.filter((x) => x.success).length || 0;\n  });\n  return perStepCounts;\n};\n\nexport const getPipelineExpectationFailureForRun = (run: PartitionGraphFragment) => {\n  const stepCounts: {[key: string]: number} = getStepExpectationFailureForRun(run);\n  return _arraySum(Object.values(stepCounts));\n};\n\nexport const getStepExpectationFailureForRun = (run: PartitionGraphFragment) => {\n  const {stepStats} = run;\n  const perStepCounts = {};\n  stepStats.forEach((stepStat) => {\n    perStepCounts[stepStat.stepKey] =\n      stepStat.expectationResults?.filter((x) => !x.success).length || 0;\n  });\n  return perStepCounts;\n};\n\nexport const getPipelineExpectationRateForRun = (run: PartitionGraphFragment) => {\n  const stepSuccesses: {\n    [key: string]: number;\n  } = getStepExpectationSuccessForRun(run);\n  const stepFailures: {\n    [key: string]: number;\n  } = getStepExpectationFailureForRun(run);\n\n  const pipelineSuccesses = _arraySum(Object.values(stepSuccesses));\n  const pipelineFailures = _arraySum(Object.values(stepFailures));\n  const pipelineTotal = pipelineSuccesses + pipelineFailures;\n\n  return pipelineTotal ? pipelineSuccesses / pipelineTotal : 0;\n};\n\nexport const getStepExpectationRateForRun = (run: PartitionGraphFragment) => {\n  const {stepStats} = run;\n  const perStepCounts = {};\n  stepStats.forEach((stepStat) => {\n    const results = stepStat.expectationResults || [];\n    perStepCounts[stepStat.stepKey] = results.length\n      ? results.filter((x) => x.success).length / results.length\n      : 0;\n  });\n  return perStepCounts;\n};\n\nconst _arraySum = (arr: number[]) => {\n  let sum = 0;\n  arr.forEach((x) => (sum += x));\n  return sum;\n};\n\nexport const StepSelector: React.FC<{\n  all: string[];\n  hidden: string[];\n  onChangeHidden: (hidden: string[]) => void;\n}> = ({all, hidden, onChangeHidden}) => {\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  const jobLabel = flagPipelineModeTuples ? 'Total job' : 'Total pipeline';\n\n  const onStepClick = (stepKey: string) => {\n    return (evt: React.MouseEvent) => {\n      if (evt.shiftKey) {\n        // toggle on shift+click\n        onChangeHidden(\n          hidden.includes(stepKey) ? hidden.filter((s) => s !== stepKey) : [...hidden, stepKey],\n        );\n      } else {\n        // regular click\n        const allButClicked = all.filter((s) => s !== stepKey);\n\n        if (isEqual(allButClicked, hidden)) {\n          onChangeHidden([]);\n        } else {\n          onChangeHidden(allButClicked);\n        }\n      }\n    };\n  };\n\n  return (\n    <>\n      <NavSectionHeader>\n        Run steps\n        <div style={{flex: 1}} />\n        <span style={{fontSize: 13, opacity: 0.5}}>Tip: Shift-click to multi-select</span>\n      </NavSectionHeader>\n      <NavSection>\n        {[jobLabel, ...all].map((stepKey) => (\n          <Item\n            key={stepKey}\n            shown={!hidden.includes(stepKey)}\n            onClick={onStepClick(stepKey)}\n            color={stepKey === jobLabel ? Colors.GRAY2 : colorHash(stepKey)}\n          >\n            <div\n              style={{\n                display: 'inline-block',\n                marginRight: 5,\n                borderRadius: 5,\n                height: 10,\n                width: 10,\n                backgroundColor: !hidden.includes(stepKey)\n                  ? stepKey === jobLabel\n                    ? Colors.GRAY2\n                    : colorHash(stepKey)\n                  : '#aaaaaa',\n              }}\n            />\n            {stepKey}\n          </Item>\n        ))}\n      </NavSection>\n    </>\n  );\n};\n\nconst NavSectionHeader = styled.div`\n  border-bottom: 1px solid ${Colors.GRAY5};\n  margin-bottom: 10px;\n  padding-bottom: 5px;\n  display: flex;\n`;\n\nconst NavSection = styled.div`\n  margin-bottom: 30px;\n`;\n\nconst Item = styled.div`\n  list-style-type: none;\n  padding: 5px 2px;\n  cursor: pointer;\n  text-decoration: ${({shown}: {shown: boolean}) => (shown ? 'none' : 'line-through')};\n  user-select: none;\n  font-size: 12px;\n  color: ${(props) => (props.shown ? props.color : '#aaaaaa')};\n  white-space: nowrap;\n`;\n","import {gql} from '@apollo/client';\nimport {Colors} from '@blueprintjs/core';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {PartitionGraph} from './PartitionGraph';\nimport {\n  PARTITION_GRAPH_FRAGMENT,\n  StepSelector,\n  getPipelineDurationForRun,\n  getStepDurationsForRun,\n  getPipelineExpectationFailureForRun,\n  getPipelineExpectationSuccessForRun,\n  getPipelineExpectationRateForRun,\n  getPipelineMaterializationCountForRun,\n  getStepExpectationFailureForRun,\n  getStepExpectationRateForRun,\n  getStepExpectationSuccessForRun,\n  getStepMaterializationCountForRun,\n} from './PartitionGraphUtils';\nimport {PartitionGraphSetRunFragment} from './types/PartitionGraphSetRunFragment';\n\nexport const PartitionGraphSet: React.FunctionComponent<{\n  partitions: {name: string; runs: PartitionGraphSetRunFragment[]}[];\n  allStepKeys: string[];\n}> = ({partitions, allStepKeys}) => {\n  const [hiddenStepKeys, setHiddenStepKeys] = React.useState<string[]>([]);\n  const durationGraph = React.useRef<any>(undefined);\n  const materializationGraph = React.useRef<any>(undefined);\n  const successGraph = React.useRef<any>(undefined);\n  const failureGraph = React.useRef<any>(undefined);\n  const rateGraph = React.useRef<any>(undefined);\n  const graphs = [durationGraph, materializationGraph, successGraph, failureGraph, rateGraph];\n\n  const onChangeHiddenStepKeys = (hiddenKeys: string[]) => {\n    setHiddenStepKeys(hiddenKeys);\n\n    graphs.forEach((graph) => {\n      const chart = graph?.current?.getChartInstance();\n      const datasets = chart?.data?.datasets || [];\n      datasets.forEach((dataset: any, idx: number) => {\n        const meta = chart.getDatasetMeta(idx);\n        meta.hidden = hiddenKeys.includes(dataset.label);\n      });\n    });\n  };\n\n  const runsByPartitionName = {};\n  partitions.forEach((partition) => {\n    runsByPartitionName[partition.name] = partition.runs;\n  });\n\n  return (\n    <PartitionContentContainer>\n      <div style={{flex: 1, minWidth: 450}}>\n        <PartitionGraph\n          title=\"Execution Time by Partition\"\n          yLabel=\"Execution time (secs)\"\n          runsByPartitionName={runsByPartitionName}\n          getPipelineDataForRun={getPipelineDurationForRun}\n          getStepDataForRun={getStepDurationsForRun}\n          ref={durationGraph}\n        />\n        <PartitionGraph\n          title=\"Materialization Count by Partition\"\n          yLabel=\"Number of materializations\"\n          runsByPartitionName={runsByPartitionName}\n          getPipelineDataForRun={getPipelineMaterializationCountForRun}\n          getStepDataForRun={getStepMaterializationCountForRun}\n          ref={materializationGraph}\n        />\n        <PartitionGraph\n          title=\"Expectation Successes by Partition\"\n          yLabel=\"Number of successes\"\n          runsByPartitionName={runsByPartitionName}\n          getPipelineDataForRun={getPipelineExpectationSuccessForRun}\n          getStepDataForRun={getStepExpectationSuccessForRun}\n          ref={successGraph}\n        />\n        <PartitionGraph\n          title=\"Expectation Failures by Partition\"\n          yLabel=\"Number of failures\"\n          runsByPartitionName={runsByPartitionName}\n          getPipelineDataForRun={getPipelineExpectationFailureForRun}\n          getStepDataForRun={getStepExpectationFailureForRun}\n          ref={failureGraph}\n        />\n        <PartitionGraph\n          title=\"Expectation Rate by Partition\"\n          yLabel=\"Rate of success\"\n          runsByPartitionName={runsByPartitionName}\n          getPipelineDataForRun={getPipelineExpectationRateForRun}\n          getStepDataForRun={getStepExpectationRateForRun}\n          ref={rateGraph}\n        />\n      </div>\n      <div style={{width: 450}}>\n        <NavContainer>\n          <StepSelector\n            all={allStepKeys}\n            hidden={hiddenStepKeys}\n            onChangeHidden={onChangeHiddenStepKeys}\n          />\n        </NavContainer>\n      </div>\n    </PartitionContentContainer>\n  );\n};\n\nexport const PARTITION_GRAPH_SET_RUN_FRAGMENT = gql`\n  fragment PartitionGraphSetRunFragment on PipelineRun {\n    id\n    status\n    tags {\n      key\n      value\n    }\n    ...PartitionGraphFragment\n  }\n  ${PARTITION_GRAPH_FRAGMENT}\n`;\n\nconst NavContainer = styled.div`\n  margin: 20px 0 0 10px;\n  padding: 10px;\n  background-color: #fff;\n  border: 1px solid ${Colors.GRAY5};\n  overflow: auto;\n`;\n\nconst PartitionContentContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  margin: 0 auto;\n`;\n","import {ButtonGroup, Button} from '@blueprintjs/core';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const PartitionPageSizeSelector: React.FunctionComponent<{\n  value: number | 'all' | undefined;\n  onChange: (value: number | 'all') => void;\n}> = ({value, onChange}) => {\n  return (\n    <PartitionPageSizeButtonGroup>\n      {[7, 30, 120].map((size) => (\n        <Button\n          key={size}\n          active={size === value}\n          onClick={() => {\n            onChange(size);\n          }}\n        >\n          <span className={size > 7 ? 'hideable-button-text' : ''}>Last </span>\n          {size}\n        </Button>\n      ))}\n      <Button\n        active={value === 'all'}\n        onClick={() => {\n          onChange('all');\n        }}\n      >\n        All\n      </Button>\n    </PartitionPageSizeButtonGroup>\n  );\n};\n\nconst PartitionPageSizeButtonGroup = styled(ButtonGroup)`\n  text-align: center;\n  white-space: nowrap;\n\n  @media (max-width: 1000px) {\n    & .hideable-button-text {\n      display: none;\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Button} from '@blueprintjs/core';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {QueryCountdown} from '../app/QueryCountdown';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {\n  doneStatuses,\n  failedStatuses,\n  inProgressStatuses,\n  queuedStatuses,\n  successStatuses,\n} from '../runs/RunStatuses';\nimport {DagsterTag} from '../runs/RunTag';\nimport {TerminationDialog} from '../runs/TerminationDialog';\nimport {POLL_INTERVAL} from '../runs/useCursorPaginatedQuery';\nimport {PipelineRunStatus} from '../types/globalTypes';\nimport {Box} from '../ui/Box';\nimport {Group} from '../ui/Group';\nimport {stringFromValue} from '../ui/TokenizingField';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {\n  PartitionProgressQuery,\n  PartitionProgressQuery_partitionBackfillOrError_PartitionBackfill,\n  PartitionProgressQuery_partitionBackfillOrError_PartitionBackfill_runs,\n} from './types/PartitionProgressQuery';\ninterface Props {\n  pipelineName: string;\n  repoAddress: RepoAddress;\n  backfillId: string;\n}\n\ntype BackfillRun = PartitionProgressQuery_partitionBackfillOrError_PartitionBackfill_runs;\n\nexport const PartitionProgress = (props: Props) => {\n  const {pipelineName, repoAddress, backfillId} = props;\n  const [shouldPoll, setShouldPoll] = React.useState(true);\n  const [isTerminating, setIsTerminating] = React.useState(false);\n\n  const queryResult = useQuery<PartitionProgressQuery>(PARTITION_PROGRESS_QUERY, {\n    fetchPolicy: 'network-only',\n    pollInterval: shouldPoll ? POLL_INTERVAL : undefined,\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      backfillId,\n      limit: 100000,\n    },\n  });\n\n  const {data, refetch} = queryResult;\n\n  const results: PartitionProgressQuery_partitionBackfillOrError_PartitionBackfill | null = React.useMemo(() => {\n    if (!data || !data?.partitionBackfillOrError) {\n      return null;\n    }\n\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return null;\n    }\n\n    return data.partitionBackfillOrError;\n  }, [data]);\n\n  const counts = React.useMemo(() => {\n    if (!results) {\n      return null;\n    }\n    const byPartitionRuns: {[key: string]: BackfillRun} = {};\n    results.runs.forEach((run) => {\n      const [runPartitionName] = run.tags\n        .filter((tag) => tag.key === DagsterTag.Partition)\n        .map((tag) => tag.value);\n\n      if (runPartitionName && !byPartitionRuns[runPartitionName]) {\n        byPartitionRuns[runPartitionName] = run;\n      }\n    });\n\n    const latestPartitionRuns = Object.values(byPartitionRuns);\n\n    const {numQueued, numInProgress, numSucceeded, numFailed} = latestPartitionRuns.reduce(\n      (accum, {status}) => {\n        return {\n          numQueued: accum.numQueued + (queuedStatuses.has(status) ? 1 : 0),\n          numInProgress: accum.numInProgress + (inProgressStatuses.has(status) ? 1 : 0),\n          numSucceeded: accum.numSucceeded + (successStatuses.has(status) ? 1 : 0),\n          numFailed: accum.numFailed + (failedStatuses.has(status) ? 1 : 0),\n        };\n      },\n      {numQueued: 0, numInProgress: 0, numSucceeded: 0, numFailed: 0},\n    );\n    return {\n      numQueued,\n      numInProgress,\n      numSucceeded,\n      numFailed,\n      numPartitionRuns: latestPartitionRuns.length,\n      numTotalRuns: results.runs.length,\n    };\n  }, [results]);\n\n  React.useEffect(() => {\n    if (counts) {\n      const {numPartitionRuns, numSucceeded, numFailed} = counts;\n      setShouldPoll(numPartitionRuns !== numSucceeded + numFailed);\n    }\n  }, [counts]);\n\n  if (!counts || !results) {\n    return <div />;\n  }\n\n  const {\n    numQueued,\n    numInProgress,\n    numSucceeded,\n    numFailed,\n    numPartitionRuns,\n    numTotalRuns,\n  } = counts;\n  const numFinished = numSucceeded + numFailed;\n  const unscheduled = results.numTotal - results.numRequested;\n\n  const skipped = results.numRequested - numPartitionRuns;\n  const numTotal = results.numTotal;\n\n  const table = (\n    <TooltipTable>\n      <tbody>\n        <TooltipTableRow\n          runStatus={PipelineRunStatus.QUEUED}\n          humanText=\"Queued\"\n          count={numQueued}\n          numTotal={numTotal}\n        />\n        <TooltipTableRow\n          runStatus={PipelineRunStatus.STARTED}\n          humanText=\"In progress\"\n          count={numInProgress}\n          numTotal={numTotal}\n        />\n        <TooltipTableRow\n          runStatus={PipelineRunStatus.SUCCESS}\n          humanText=\"Succeeded\"\n          count={numSucceeded}\n          numTotal={numTotal}\n        />\n        <TooltipTableRow\n          runStatus={PipelineRunStatus.FAILURE}\n          humanText=\"Failed\"\n          count={numFailed}\n          numTotal={numTotal}\n        />\n        {skipped > 0 ? (\n          <TooltipTableRow humanText=\"Skipped\" count={skipped} numTotal={numTotal} />\n        ) : null}\n        <TooltipTableRow humanText=\"To be scheduled\" count={unscheduled} numTotal={numTotal} />\n      </tbody>\n    </TooltipTable>\n  );\n\n  const unfinishedMap: {[id: string]: boolean} = results.runs\n    .filter((run) => !doneStatuses.has(run?.status))\n    .reduce((accum, run) => ({...accum, [run.id]: run.canTerminate}), {});\n\n  return (\n    <Box flex={{alignItems: 'center', grow: 1, justifyContent: 'space-between'}}>\n      <Group direction=\"row\" spacing={8} alignItems=\"center\">\n        <Tooltip content={table}>\n          <Group direction=\"row\" spacing={8} alignItems=\"center\">\n            {numTotalRuns ? (\n              <div style={{fontVariantNumeric: 'tabular-nums'}}>\n                <Link to=\"/instance/backfills\">\n                  {numFinished} / {numTotal}\n                </Link>\n                <span> partitions completed</span>\n                {numTotalRuns ? (\n                  <span>\n                    {' '}\n                    (\n                    <Link\n                      to={workspacePathFromAddress(\n                        repoAddress,\n                        `/pipelines/${pipelineName}/runs?${qs.stringify({\n                          q: stringFromValue([\n                            {token: 'tag', value: `dagster/backfill=${backfillId}`},\n                          ]),\n                        })}`,\n                      )}\n                    >\n                      {numTotalRuns} runs\n                    </Link>\n                    )\n                  </span>\n                ) : null}\n                {unscheduled ? <span>, </span> : null}\n              </div>\n            ) : null}\n            {unscheduled ? (\n              <Link to=\"/instance/backfills\">\n                <div style={{fontVariantNumeric: 'tabular-nums'}}>\n                  {unscheduled} to be scheduled\n                </div>\n              </Link>\n            ) : null}\n          </Group>\n        </Tooltip>\n        {Object.keys(unfinishedMap).length ? (\n          <>\n            <Button minimal icon=\"stop\" intent=\"danger\" onClick={() => setIsTerminating(true)}>\n              Terminate\n            </Button>\n            <TerminationDialog\n              isOpen={isTerminating}\n              onClose={() => setIsTerminating(false)}\n              onComplete={() => refetch()}\n              selectedRuns={unfinishedMap}\n            />\n          </>\n        ) : null}\n      </Group>\n      {shouldPoll && !isTerminating ? (\n        <QueryCountdown pollInterval={POLL_INTERVAL} queryResult={queryResult} />\n      ) : null}\n    </Box>\n  );\n};\n\nconst TooltipTableRow: React.FC<{\n  runStatus?: PipelineRunStatus;\n  humanText: string;\n  count: number;\n  numTotal: number;\n}> = ({runStatus, humanText, count, numTotal}) => {\n  if (!count || count < 0) {\n    return null;\n  }\n\n  return (\n    <tr>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {runStatus ? <RunStatusDot status={runStatus} size={10} /> : null}\n          <div>{humanText}</div>\n        </Group>\n      </td>\n      <td>\n        {count}/{numTotal}\n      </td>\n    </tr>\n  );\n};\n\nconst TooltipTable = styled.table`\n  border-spacing: 0;\n  td {\n    font-variant-numeric: tabular-nums;\n  }\n  td:first-child {\n    width: 120px;\n  }\n  td:last-child {\n    text-align: right;\n  }\n`;\n\nconst PARTITION_PROGRESS_QUERY = gql`\n  query PartitionProgressQuery($backfillId: String!, $limit: Int) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        backfillId\n        status\n        numRequested\n        numTotal\n        runs(limit: $limit) {\n          id\n          canTerminate\n          status\n          tags {\n            key\n            value\n          }\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Button, Colors} from '@blueprintjs/core';\nimport {IconNames} from '@blueprintjs/icons';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport qs from 'query-string';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {StepEventStatus} from '../types/globalTypes';\nimport {Spinner} from '../ui/Spinner';\n\nimport {STEP_STATUS_COLORS} from './RunMatrixUtils';\nimport {\n  PartitionRunListForStepQuery,\n  PartitionRunListForStepQueryVariables,\n} from './types/PartitionRunListForStepQuery';\n\ninterface StepStats {\n  startTime: number | null;\n  endTime: number | null;\n  status: StepEventStatus | null;\n  materializations: Record<string, unknown>[];\n  expectationResults: {success: boolean}[];\n}\n\ninterface PartitionRunListForStepProps {\n  pipelineName: string;\n  partitionName: string;\n  stepName: string;\n  stepStatsByRunId: {\n    [runId: string]: StepStats;\n  };\n}\n\nexport const PartitionRunListForStep: React.FunctionComponent<PartitionRunListForStepProps> = (\n  props,\n) => {\n  const {data, loading} = useQuery<\n    PartitionRunListForStepQuery,\n    PartitionRunListForStepQueryVariables\n  >(PARTITION_RUN_LIST_FOR_STEP_QUERY, {\n    variables: {\n      filter: {\n        pipelineName: props.pipelineName,\n        tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n      },\n    },\n  });\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'PipelineRuns') {\n    return (\n      <NonIdealState\n        icon={IconNames.ERROR}\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable\n        runs={data.pipelineRunsOrError.results}\n        onSetFilter={() => {}}\n        additionalColumnHeaders={[\n          <th key=\"context\" style={{maxWidth: 150}}>\n            Step Info\n          </th>,\n        ]}\n        additionalColumnsForRow={(run) => [\n          <StepStatsColumn\n            key=\"context\"\n            stats={props.stepStatsByRunId[run.runId] || null}\n            linkToLogs={`/instance/runs/${run.runId}?${qs.stringify({\n              selection: props.stepName,\n              logs: `step:${props.stepName}`,\n            })}`}\n          />,\n        ]}\n      />\n    </div>\n  );\n};\n\nconst StepStatsColumn: React.FunctionComponent<{\n  stats: StepStats | null;\n  linkToLogs: string;\n}> = ({stats, linkToLogs}) => {\n  return (\n    <td key=\"context\" style={{maxWidth: 150, borderRight: 0}}>\n      {stats ? (\n        <div>\n          <StatSummaryLine>\n            <div\n              style={{\n                width: 17,\n                height: 17,\n                background: stats.status ? STEP_STATUS_COLORS[stats.status] : '#eee',\n              }}\n            />\n            <Tooltip content=\"Expectation Results\">\n              <StatBox>\n                {`${stats.expectationResults.filter((e) => e.success).length} /\n      ${stats.expectationResults.length}`}\n              </StatBox>\n            </Tooltip>\n            <Tooltip content=\"Materializations\">\n              <StatBox>{`${stats.materializations.length}`}</StatBox>\n            </Tooltip>\n          </StatSummaryLine>\n          <Link to={linkToLogs} component={Button} {...{small: true, rightIcon: 'share'}}>\n            Step Logs\n          </Link>\n        </div>\n      ) : (\n        <div>No step data.</div>\n      )}\n    </td>\n  );\n};\n\nconst StatSummaryLine = styled.div`\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 4px;\n`;\n\nconst StatBox = styled.div`\n  border: 1px solid ${Colors.LIGHT_GRAY2};\n  margin-left: 4px;\n  padding: 1px 5px;\n  font-size: 11px;\n`;\n\nconst PARTITION_RUN_LIST_FOR_STEP_QUERY = gql`\n  query PartitionRunListForStepQuery($filter: PipelineRunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {RunFilterTokenType} from '../runs/RunsFilter';\nimport {\n  TokenizingField,\n  TokenizingFieldValue,\n  stringFromValue,\n  tokenizedValuesFromString,\n} from '../ui/TokenizingField';\n\ninterface RunTagsTokenizingFieldProps {\n  runs: {tags: {key: string; value: string}[]}[];\n  tokens: TokenizingFieldValue[];\n  onChange: (tokens: TokenizingFieldValue[]) => void;\n}\n\n// BG TODO: This should most likely be folded into RunsFilter, but that component loads autocompletions\n// from all runs in the repo and doesn't support being scoped to a particular pipeline.\n\nexport const RunTagsSupportedTokens: RunFilterTokenType[] = ['tag'];\n\nexport const RunTagsTokenizingField: React.FC<RunTagsTokenizingFieldProps> = ({\n  runs,\n  tokens,\n  onChange,\n}) => {\n  const suggestions = [\n    {\n      token: 'tag',\n      values: () => {\n        const runTags = runs.map((r) => r.tags).reduce((a, b) => [...a, ...b], []);\n        const runTagValues = runTags.map((t) => `${t.key}=${t.value}`);\n        return uniq(runTagValues).sort();\n      },\n    },\n  ];\n  const search = tokenizedValuesFromString(stringFromValue(tokens), suggestions);\n  return (\n    <TokenizingField\n      small\n      values={search}\n      onChange={onChange}\n      placeholder=\"Filter partition runs...\"\n      suggestionProviders={suggestions}\n      loading={false}\n    />\n  );\n};\n","import {Intent, MultiSlider} from '@blueprintjs/core';\nimport moment from 'moment-timezone';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const SliceSlider: React.FunctionComponent<{\n  maxUnix: number;\n  minUnix: number;\n  value: number;\n  disabled: boolean;\n  onChange: (val: number) => void;\n}> = ({minUnix, maxUnix, value, disabled, onChange}) => {\n  const delta = maxUnix - minUnix;\n  const timeout = React.useRef<NodeJS.Timeout>();\n\n  return (\n    <div style={{width: 160}} onClick={(e) => e.stopPropagation()}>\n      <SliderWithHandleLabelOnly\n        min={0}\n        max={1}\n        disabled={disabled}\n        stepSize={0.01}\n        labelRenderer={(value: number) => (\n          <span style={{whiteSpace: 'nowrap'}}>\n            Run Start &gt; {moment.unix(delta * value + minUnix).format('YYYY-MM-DD')}\n          </span>\n        )}\n        onChange={(values: number[]) => {\n          if (timeout.current) {\n            clearTimeout(timeout.current);\n          }\n          timeout.current = setTimeout(() => onChange(delta * values[0] + minUnix), 10);\n        }}\n      >\n        <MultiSlider.Handle\n          value={(value - minUnix) / delta}\n          type=\"full\"\n          intentAfter={Intent.PRIMARY}\n        />\n      </SliderWithHandleLabelOnly>\n    </div>\n  );\n};\n\nconst SliderWithHandleLabelOnly = styled(MultiSlider)`\n  &.bp3-slider {\n    height: 19px;\n  }\n  .bp3-slider-axis > .bp3-slider-label {\n    display: none;\n  }\n  .bp3-slider-handle > .bp3-slider-label {\n    display: none;\n  }\n  .bp3-slider-handle.bp3-active > .bp3-slider-label {\n    display: initial;\n  }\n`;\n","import {shallowCompareKeys} from '@blueprintjs/core/lib/cjs/common/utils';\nimport React from 'react';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {StepEventStatus} from '../types/globalTypes';\n\nimport {PartitionRunMatrixPipelineQuery_pipelineSnapshotOrError_PipelineSnapshot_solidHandles} from './types/PartitionRunMatrixPipelineQuery';\nimport {PartitionRunMatrixRunFragment} from './types/PartitionRunMatrixRunFragment';\n\ntype SolidHandle = PartitionRunMatrixPipelineQuery_pipelineSnapshotOrError_PipelineSnapshot_solidHandles;\ntype StatusSquareColor =\n  | 'SUCCESS'\n  | 'FAILURE'\n  | 'SKIPPED'\n  | 'MISSING'\n  | 'FAILURE-SUCCESS'\n  | 'FAILURE-SKIPPED'\n  | 'SUCCESS-FAILURE'\n  | 'SUCCESS-SKIPPED'\n  | 'SKIPPED-SUCCESS'\n  | 'SKIPPED-FAILURE';\n\nexport const StatusSquareFinalColor: {[key: string]: StatusSquareColor} = {\n  'FAILURE-SUCCESS': 'SUCCESS',\n  'SKIPPED-SUCCESS': 'SUCCESS',\n  'SUCCESS-FAILURE': 'FAILURE',\n  'SKIPPED-FAILURE': 'FAILURE',\n  'FAILURE-SKIPPED': 'SKIPPED',\n  'SUCCESS-SKIPPED': 'SKIPPED',\n};\n\nexport interface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nfunction getStartTime(a: PartitionRunMatrixRunFragment) {\n  return ('startTime' in a.stats && a.stats.startTime) || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionRunMatrixRunFragment, b: PartitionRunMatrixRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagit 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nexport function isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitions: {name: string; runs: PartitionRunMatrixRunFragment[]}[],\n  options: DisplayOptions,\n) {\n  // Note this is sorting partition runs in place, I don't think it matters and\n  // seems better than cloning all the arrays.\n  partitions.forEach((p) => p.runs.sort(byStartTimeAsc));\n\n  const partitionColumns = partitions.map((p) => ({\n    name: p.name,\n    runs: p.runs,\n    steps: layout.boxes.map(({node}) => {\n      const datapoints = p.runs\n        .map((r, idx) => ({\n          runIdx: idx,\n          status: r.stepStats.find((stats) => isStepKeyForNode(node.name, stats.stepKey))?.status,\n        }))\n        .filter((s): s is {runIdx: number; status: StepEventStatus} => !!s.status)\n        .reverse();\n\n      if (datapoints.length === 0) {\n        return {\n          name: node.name,\n          color: 'MISSING' as StatusSquareColor,\n          unix: 0,\n        };\n      }\n\n      // Calculate the box color for this step. CSS classes are in the \"previous-final\" format, and we'll\n      // strip the \"previous\" half later if the user has that display option disabled.\n      //\n      // Rules:\n      // - The `final` status is the status of the step the last time it was run\n      // - The `previous` status is the status of the step before that run, if it was different.\n      const prev = datapoints.slice(1).find((dp) => dp.status !== datapoints[0].status);\n      const color = prev\n        ? (`${prev.status}-${datapoints[0].status}` as StatusSquareColor)\n        : datapoints[0].status;\n\n      return {\n        name: node.name,\n        unix: getStartTime(p.runs[datapoints[0].runIdx]),\n        color,\n      };\n    }),\n  }));\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx].color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx].color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii].finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii].runs.length === 0 ||\n        partitionColumns[ii].steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitions, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: SolidHandle[] | false;\n  partitions: {name: string; runs: PartitionRunMatrixRunFragment[]}[];\n  stepQuery: string;\n  options: DisplayOptions;\n}\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = (inputs: MatrixDataInputs) => {\n  const cachedMatrixData = React.useRef<{\n    result: ReturnType<typeof buildMatrixData>;\n    inputs: MatrixDataInputs;\n  }>();\n  if (!inputs.solidHandles) {\n    return null;\n  }\n  if (cachedMatrixData.current && shallowCompareKeys(inputs, cachedMatrixData.current.inputs)) {\n    return cachedMatrixData.current.result;\n  }\n\n  const nodes = explodeCompositesInHandleGraph(inputs.solidHandles).map((h) => h.solid);\n\n  // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n  const solidsFiltered = filterByQuery(nodes, inputs.stepQuery);\n\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n\n  // Build the matrix of step + partition squares - presorted to match the gantt layout\n  const result = buildMatrixData(layout, inputs.partitions, inputs.options);\n  cachedMatrixData.current = {result, inputs};\n  return result;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, Dialog, Button, Classes, MenuItem, Menu, Popover} from '@blueprintjs/core';\nimport {Popover2} from '@blueprintjs/popover2';\nimport qs from 'query-string';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {useViewport} from '../gantt/useViewport';\nimport {QueryPersistedStateConfig, useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {PIPELINE_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/PipelineExplorer';\nimport {Box} from '../ui/Box';\nimport {ColorsWIP} from '../ui/Colors';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {Group} from '../ui/Group';\nimport {IconWIP} from '../ui/Icon';\nimport {TokenizingFieldValue} from '../ui/TokenizingField';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionProgress} from './PartitionProgress';\nimport {PartitionRunListForStep} from './PartitionRunListForStep';\nimport {\n  GridColumn,\n  GridFloatingContainer,\n  GridScrollContainer,\n  LeftLabel,\n  TopLabel,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {RunTagsTokenizingField} from './RunTagsTokenizingField';\nimport {SliceSlider} from './SliceSlider';\nimport {\n  PartitionRunMatrixPipelineQuery,\n  PartitionRunMatrixPipelineQueryVariables,\n} from './types/PartitionRunMatrixPipelineQuery';\nimport {PartitionRunMatrixRunFragment} from './types/PartitionRunMatrixRunFragment';\nimport {\n  useMatrixData,\n  MatrixStep,\n  DisplayOptions,\n  StatusSquareFinalColor,\n  isStepKeyForNode,\n} from './useMatrixData';\n\nconst TITLE_TOTAL_FAILURES = 'This step failed at least once for this percent of partitions.';\n\nconst TITLE_FINAL_FAILURES = 'This step failed to run successfully for this percent of partitions.';\n\nconst BOX_COL_WIDTH = 23;\n\nconst OVERSCROLL = 150;\n\nconst SORT_FINAL_ASC = 'FINAL_ASC';\nconst SORT_FINAL_DESC = 'FINAL_DESC';\nconst SORT_TOTAL_ASC = 'TOTAL_ASC';\nconst SORT_TOTAL_DESC = 'TOTAL_DESC';\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName: string;\n}\n\ninterface PartitionRunMatrixProps {\n  pipelineName: string;\n  partitions: {name: string; runs: PartitionRunMatrixRunFragment[]}[];\n  repoAddress: RepoAddress;\n  runTags: TokenizingFieldValue[];\n  setRunTags: (val: TokenizingFieldValue[]) => void;\n  stepQuery: string;\n  setStepQuery: (val: string) => void;\n}\n\nconst _backfillIdFromTags = (runTags: TokenizingFieldValue[]) => {\n  const [backfillId] = runTags\n    .filter((_) => _.token === 'tag' && _.value.startsWith('dagster/backfill='))\n    .map((_) => _.value.split('=')[1]);\n  return backfillId;\n};\n\nconst PartitionRunSelectionQueryConfig: QueryPersistedStateConfig<PartitionRunSelection | null> = {\n  encode: (val) => ({partitionName: val?.partitionName, stepName: val?.stepName}),\n  decode: (qs) =>\n    qs.partitionName && qs.stepName\n      ? {partitionName: qs.partitionName, stepName: qs.stepName}\n      : null,\n};\n\nconst DisplayOptionsQueryConfig: QueryPersistedStateConfig<DisplayOptions> = {\n  decode: (qs) => ({\n    showPrevious: qs.showPrevious === 'true',\n    colorizeByAge: qs.colorizeByAge === 'true',\n    showFailuresAndGapsOnly: qs.showFailuresAndGapsOnly === 'true',\n  }),\n  defaults: {\n    showPrevious: false,\n    colorizeByAge: false,\n    showFailuresAndGapsOnly: false,\n  },\n};\n\nexport const PartitionRunMatrix: React.FC<PartitionRunMatrixProps> = (props) => {\n  const {basePath} = React.useContext(AppContext);\n  const {viewport, containerProps} = useViewport();\n  const [colorizeSliceUnix, setColorizeSliceUnix] = React.useState(0);\n  const [hovered, setHovered] = React.useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = useQueryPersistedState(PartitionRunSelectionQueryConfig);\n  const [stepSort = '', setStepSort] = useQueryPersistedState<string>({queryKey: 'stepSort'});\n  const [options, setOptions] = useQueryPersistedState(DisplayOptionsQueryConfig);\n\n  // Retrieve the pipeline's structure\n  const repositorySelector = repoAddressToSelector(props.repoAddress);\n  const pipelineSelector = {...repositorySelector, pipelineName: props.pipelineName};\n  const pipeline = useQuery<\n    PartitionRunMatrixPipelineQuery,\n    PartitionRunMatrixPipelineQueryVariables\n  >(PARTITION_RUN_MATRIX_PIPELINE_QUERY, {\n    variables: {pipelineSelector},\n  });\n\n  const solidHandles =\n    pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n    pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n  const data = useMatrixData({\n    partitions: props.partitions,\n    stepQuery: props.stepQuery,\n    solidHandles,\n    options,\n  });\n\n  if (!data || !solidHandles) {\n    return <span />;\n  }\n\n  const {stepRows, partitionColumns, partitions} = data;\n  if (stepSort === SORT_FINAL_ASC) {\n    stepRows.sort((a, b) => a.finalFailurePercent - b.finalFailurePercent);\n  } else if (stepSort === SORT_FINAL_DESC) {\n    stepRows.sort((a, b) => b.finalFailurePercent - a.finalFailurePercent);\n  } else if (stepSort === SORT_TOTAL_ASC) {\n    stepRows.sort((a, b) => a.totalFailurePercent - b.totalFailurePercent);\n  } else if (stepSort === SORT_TOTAL_DESC) {\n    stepRows.sort((a, b) => b.totalFailurePercent - a.totalFailurePercent);\n  }\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => (stepsByName[step.name] = step));\n    return stepRows.map((stepRow) => stepsByName[stepRow.name]);\n  };\n\n  const visibleRangeStart = Math.max(0, Math.floor((viewport.left - OVERSCROLL) / BOX_COL_WIDTH));\n  const visibleCount = Math.ceil((viewport.width + OVERSCROLL * 2) / BOX_COL_WIDTH);\n  const visibleColumns = partitionColumns.slice(\n    visibleRangeStart,\n    visibleRangeStart + visibleCount,\n  );\n\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs (${focused.stepName})` : ''}\n      >\n        <div style={{background: Colors.WHITE, padding: 15, marginBottom: 15}}>\n          {focused && (\n            <PartitionRunListForStep\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n              stepName={focused.stepName}\n              stepStatsByRunId={Object.assign(\n                {},\n                ...(props.partitions.find((p) => p.name === focused.partitionName)?.runs || []).map(\n                  (run) => ({\n                    [run.runId]: run.stepStats.find((s) =>\n                      isStepKeyForNode(focused.stepName, s.stepKey),\n                    ),\n                  }),\n                ),\n              )}\n            />\n          )}\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n              OK\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n      <Box\n        flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n        padding={{vertical: 4}}\n      >\n        <Group direction=\"row\" alignItems=\"center\" spacing={12}>\n          <strong>Run Matrix</strong>\n          <RunTagsTokenizingField\n            runs={partitions.reduce(\n              (a, b) => [...a, ...b.runs],\n              [] as {tags: {key: string; value: string}[]}[],\n            )}\n            onChange={props.setRunTags}\n            tokens={props.runTags}\n          />\n        </Group>\n        {props.runTags.length && _backfillIdFromTags(props.runTags) ? (\n          <Box flex={{grow: 1}} margin={{left: 12, right: 8}}>\n            <PartitionProgress\n              pipelineName={props.pipelineName}\n              repoAddress={props.repoAddress}\n              backfillId={_backfillIdFromTags(props.runTags)}\n            />\n          </Box>\n        ) : null}\n        <Popover\n          position=\"bottom-left\"\n          content={\n            <Menu>\n              <MenuItem\n                text=\"Show previous status\"\n                icon={\n                  <IconWIP\n                    name=\"done\"\n                    color={options.showPrevious ? ColorsWIP.Gray700 : ColorsWIP.Gray200}\n                  />\n                }\n                onClick={() => setOptions({...options, showPrevious: !options.showPrevious})}\n                shouldDismissPopover={false}\n              />\n              <MenuItem\n                text=\"Only show failures and gaps\"\n                icon={\n                  <IconWIP\n                    name=\"done\"\n                    color={options.showFailuresAndGapsOnly ? ColorsWIP.Gray700 : ColorsWIP.Gray200}\n                  />\n                }\n                onClick={() =>\n                  setOptions({\n                    ...options,\n                    showFailuresAndGapsOnly: !options.showFailuresAndGapsOnly,\n                  })\n                }\n                shouldDismissPopover={false}\n              />\n              <MenuItem\n                tagName=\"div\"\n                text={\n                  <Group direction=\"column\" spacing={8}>\n                    <div>Colorize by age</div>\n                    {options.colorizeByAge ? (\n                      <SliceSlider\n                        disabled={false}\n                        value={Math.max(minUnix, colorizeSliceUnix)}\n                        onChange={setColorizeSliceUnix}\n                        maxUnix={maxUnix}\n                        minUnix={minUnix}\n                      />\n                    ) : null}\n                  </Group>\n                }\n                icon={\n                  <IconWIP\n                    name=\"done\"\n                    color={options.colorizeByAge ? ColorsWIP.Gray700 : ColorsWIP.Gray200}\n                  />\n                }\n                onClick={() => setOptions({...options, colorizeByAge: !options.colorizeByAge})}\n                shouldDismissPopover={false}\n              />\n            </Menu>\n          }\n        >\n          <Button icon=\"settings\" minimal text=\"Settings\" />\n        </Popover>\n      </Box>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n          border: `1px solid ${Colors.GRAY5}`,\n          borderLeft: 0,\n        }}\n      >\n        <GridFloatingContainer floating={viewport.left > 0}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel>\n              <GraphQueryInput\n                small\n                width={260}\n                items={solidHandles.map((h) => h.solid)}\n                value={props.stepQuery}\n                placeholder=\"Type a Step Subset\"\n                onChange={props.setStepQuery}\n              />\n            </TopLabel>\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: step.x}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                {step.name}\n              </LeftLabel>\n            ))}\n            <Divider />\n            <LeftLabel style={{paddingLeft: 5}}>Runs</LeftLabel>\n          </GridColumn>\n          {options.showPrevious && (\n            <GridColumn disabled>\n              <TopLabel>\n                <div\n                  style={{cursor: 'pointer'}}\n                  className=\"square failure-blank\"\n                  title={TITLE_TOTAL_FAILURES}\n                  onClick={() =>\n                    setStepSort(stepSort === SORT_TOTAL_DESC ? SORT_TOTAL_ASC : SORT_TOTAL_DESC)\n                  }\n                />\n              </TopLabel>\n              {stepRows.map(({totalFailurePercent, name}, idx) => (\n                <LeftLabel\n                  key={idx}\n                  title={TITLE_TOTAL_FAILURES}\n                  hovered={name === hovered?.stepName}\n                  redness={totalFailurePercent / 100}\n                >\n                  {`${totalFailurePercent}%`}\n                </LeftLabel>\n              ))}\n              <Divider />\n            </GridColumn>\n          )}\n          <GridColumn disabled>\n            <TopLabel>\n              <div\n                style={{cursor: 'pointer'}}\n                className=\"square failure\"\n                title={TITLE_FINAL_FAILURES}\n                onClick={() =>\n                  setStepSort(stepSort === SORT_FINAL_DESC ? SORT_FINAL_ASC : SORT_FINAL_DESC)\n                }\n              />\n            </TopLabel>\n            {stepRows.map(({finalFailurePercent, name}, idx) => (\n              <LeftLabel\n                key={idx}\n                title={TITLE_FINAL_FAILURES}\n                hovered={name === hovered?.stepName}\n                redness={finalFailurePercent / 100}\n              >\n                {`${finalFailurePercent}%`}\n              </LeftLabel>\n            ))}\n            <Divider />\n          </GridColumn>\n        </GridFloatingContainer>\n        <GridScrollContainer {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_COL_WIDTH,\n              position: 'relative',\n              height: '100%',\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_COL_WIDTH,\n                  position: 'absolute',\n                  left: (idx + visibleRangeStart) * BOX_COL_WIDTH,\n                }}\n                dimSuccesses={!options.colorizeByAge}\n              >\n                <TopLabelTilted label={p.name} />\n                {sortPartitionSteps(p.steps).map(({name, color, unix}) => (\n                  <Popover2\n                    key={name}\n                    minimal\n                    disabled={p.runs.length === 0}\n                    interactionKind=\"click\"\n                    placement=\"bottom-start\"\n                    content={\n                      p.runs.length ? (\n                        <Menu>\n                          <MenuItem\n                            icon=\"share\"\n                            text=\"Show Logs From Last Run\"\n                            href={`${basePath}/instance/runs/${\n                              p.runs[p.runs.length - 1].runId\n                            }?${qs.stringify({\n                              selection: name,\n                              logs: `step:${name}`,\n                            })}`}\n                          />\n                          <MenuItem\n                            icon=\"list\"\n                            text={`View Runs (${p.runs.length})`}\n                            onClick={() =>\n                              p.runs.length > 0 &&\n                              setFocused({stepName: name, partitionName: p.name})\n                            }\n                          />\n                        </Menu>\n                      ) : (\n                        <span />\n                      )\n                    }\n                  >\n                    <div\n                      className={`\n                      square\n                      ${p.runs.length === 0 && 'empty'}\n                      ${(options.showPrevious\n                        ? color\n                        : StatusSquareFinalColor[color] || color\n                      ).toLowerCase()}\n                    `}\n                      onMouseEnter={() => setHovered({stepName: name, partitionName: p.name})}\n                      onMouseLeave={() => setHovered(null)}\n                      style={\n                        options.colorizeByAge\n                          ? {\n                              opacity:\n                                unix >= colorizeSliceUnix\n                                  ? 0.3 + 0.7 * ((unix - minUnix) / (maxUnix - minUnix))\n                                  : 0.08,\n                            }\n                          : {}\n                      }\n                    />\n                  </Popover2>\n                ))}\n                <Divider />\n                <LeftLabel style={{textAlign: 'center'}}>{p.runs.length}</LeftLabel>\n              </GridColumn>\n            ))}\n          </div>\n        </GridScrollContainer>\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n};\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.GRAY5};\n`;\n\nexport const PARTITION_RUN_MATRIX_RUN_FRAGMENT = gql`\n  fragment PartitionRunMatrixRunFragment on PipelineRun {\n    id\n    runId\n    tags {\n      key\n      value\n    }\n    stats {\n      __typename\n      ... on PipelineRunStatsSnapshot {\n        id\n        startTime\n      }\n    }\n    stepStats {\n      __typename\n      stepKey\n      status\n      materializations {\n        __typename\n      }\n      expectationResults {\n        success\n      }\n    }\n  }\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_RUN_MATRIX_PIPELINE_QUERY = gql`\n  query PartitionRunMatrixPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n          ...PipelineExplorerSolidHandleFragment\n        }\n      }\n    }\n  }\n  ${PIPELINE_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {Button, Menu, MenuItem, Popover} from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport {PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results} from './types/PipelinePartitionsRootQuery';\n\ntype PartitionSet = PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results;\n\nexport const PartitionSetSelector: React.FunctionComponent<{\n  selected: PartitionSet;\n  partitionSets: PartitionSet[];\n  onSelect: (partitionSet: PartitionSet) => void;\n}> = ({partitionSets, selected, onSelect}) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Popover\n      isOpen={open}\n      onInteraction={setOpen}\n      minimal\n      wrapperTagName=\"span\"\n      position={'bottom-left'}\n      content={\n        <Menu style={{minWidth: 280}}>\n          {partitionSets.map((partitionSet, idx) => (\n            <MenuItem\n              key={idx}\n              onClick={() => onSelect(partitionSet)}\n              active={selected.name === partitionSet.name}\n              icon={'git-repo'}\n              text={<div>{partitionSet.name}</div>}\n            />\n          ))}\n        </Menu>\n      }\n    >\n      <Button text={`Partition Set: ${selected.name}`} rightIcon=\"caret-down\" />\n    </Popover>\n  );\n};\n","import {gql, useLazyQuery, useMutation, useQuery} from '@apollo/client';\nimport {Checkbox, Intent, NonIdealState, Classes, Colors, InputGroup} from '@blueprintjs/core';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PipelineRunTag} from '../app/LocalStorage';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {LaunchButton} from '../execute/LaunchButton';\nimport {TagContainer, TagEditor} from '../execute/TagEditor';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {useViewport} from '../gantt/useViewport';\nimport {PipelineRunStatus} from '../types/globalTypes';\nimport {Alert} from '../ui/Alert';\nimport {Box} from '../ui/Box';\nimport {ButtonLink} from '../ui/ButtonLink';\nimport {ColorsWIP} from '../ui/Colors';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {Group} from '../ui/Group';\nimport {IconWIP} from '../ui/Icon';\nimport {Spinner} from '../ui/Spinner';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  GridColumn,\n  GridFloatingContainer,\n  GridScrollContainer,\n  LeftLabel,\n  TopLabel,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {LaunchPartitionBackfill} from './types/LaunchPartitionBackfill';\nimport {PartitionStatusQuery} from './types/PartitionStatusQuery';\nimport {PartitionsBackfillSelectorQuery} from './types/PartitionsBackfillSelectorQuery';\n\nconst DEFAULT_RUN_LAUNCHER_NAME = 'DefaultRunLauncher';\n\ninterface BackfillOptions {\n  reexecute: boolean;\n  fromFailure: boolean;\n}\n\ntype SelectionRange = {\n  start: string;\n  end: string;\n};\n\nfunction placeholderForPartitions(names: string[]) {\n  if (names.length < 4) {\n    return `ex: ${names[0]}, ${names[1]}`;\n  }\n  return `ex: ${names[0]}, ${names[1]}, [${names[2]}...${names[names.length - 1]}]`;\n}\n\nfunction partitionsToText(selected: string[], all: string[]) {\n  const remaining = [...selected].sort((a, b) => all.indexOf(a) - all.indexOf(b));\n\n  let str = '';\n  while (remaining.length) {\n    const start = remaining.shift()!;\n    const startIdx = all.indexOf(start);\n    let endIdx = startIdx;\n    let endIdxInSelected = -1;\n    while (\n      endIdx < all.length - 1 &&\n      (endIdxInSelected = remaining.indexOf(all[endIdx + 1])) !== -1\n    ) {\n      endIdx++;\n      remaining.splice(endIdxInSelected, 1);\n    }\n    if (endIdx !== startIdx) {\n      str += `[${start}...${all[endIdx]}], `;\n    } else {\n      str += `${start}, `;\n    }\n  }\n  return str.replace(/, $/, '');\n}\n\nfunction textToPartitions(selected: string, all: string[]) {\n  const terms = selected.split(',').map((s) => s.trim());\n  const result = [];\n  for (const term of terms) {\n    if (term.length === 0) {\n      continue;\n    }\n    const rangeMatch = /^\\[(.*)\\.\\.\\.(.*)\\]$/g.exec(term);\n    if (rangeMatch) {\n      const [, start, end] = rangeMatch;\n      const allStartIdx = all.indexOf(start);\n      const allEndIdx = all.indexOf(end);\n      if (allStartIdx === -1 || allEndIdx === -1) {\n        throw new Error(`Could not find partitions for provided range: ${start}...${end}`);\n      }\n      result.push(...all.slice(allStartIdx, allEndIdx + 1));\n    } else if (term.includes('*')) {\n      const [prefix, suffix] = term.split('*');\n      result.push(...all.filter((p) => p.startsWith(prefix) && p.endsWith(suffix)));\n    } else {\n      const idx = all.indexOf(term);\n      if (idx === -1) {\n        throw new Error(`Could not find partition: ${term}`);\n      }\n      result.push(term);\n    }\n  }\n  return result.sort((a, b) => all.indexOf(a) - all.indexOf(b));\n}\n\nexport const PartitionsBackfillPartitionSelector: React.FC<{\n  partitionSetName: string;\n  pipelineName: string;\n  onLaunch?: (backfillId: string, stepQuery: string) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, pipelineName, onLaunch, onSubmit, repoAddress}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const [currentSelectionRange, setCurrentSelectionRange] = React.useState<\n    SelectionRange | undefined\n  >();\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n  const [query, setQuery] = React.useState<string>('');\n  const [options, setOptions] = React.useState<BackfillOptions>({\n    reexecute: false,\n    fromFailure: false,\n  });\n  const {flagPipelineModeTuples} = useFeatureFlags();\n\n  const {containerProps} = useViewport({\n    initialOffset: React.useCallback((el) => ({left: el.scrollWidth - el.clientWidth, top: 0}), []),\n  });\n\n  React.useEffect(() => {\n    const resetSelectionRange = () => setCurrentSelectionRange(undefined);\n    window.addEventListener('mouseup', resetSelectionRange);\n    return () => window.removeEventListener('mouseup', resetSelectionRange);\n  });\n\n  const mounted = React.useRef(true);\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onLaunch]);\n\n  const {loading, data} = useQuery<PartitionsBackfillSelectorQuery>(\n    PARTITIONS_BACKFILL_SELECTOR_QUERY,\n    {\n      variables: {\n        repositorySelector,\n        partitionSetName,\n        pipelineSelector: {\n          ...repositorySelector,\n          pipelineName,\n        },\n      },\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  const [\n    queryStatuses,\n    {loading: statusesLoading, data: statusesData},\n  ] = useLazyQuery<PartitionStatusQuery>(PARTITION_STATUS_QUERY, {\n    variables: {\n      repositorySelector,\n      partitionSetName,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  if (!data || loading) {\n    return (\n      <Box margin={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.partitionSetOrError.__typename === 'PartitionSetNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Partition Set Not Found\"\n        description={data.partitionSetOrError.message}\n      />\n    );\n  }\n  if (data.pipelineSnapshotOrError.__typename === 'PipelineNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={flagPipelineModeTuples ? 'Job not found' : 'Pipeline not found'}\n        description={data.pipelineSnapshotOrError.message}\n      />\n    );\n  }\n  if (data.pipelineSnapshotOrError.__typename === 'PipelineSnapshotNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={flagPipelineModeTuples ? 'Job not found' : 'Pipeline not found'}\n        description={data.pipelineSnapshotOrError.message}\n      />\n    );\n  }\n\n  if (data.partitionSetOrError.__typename === 'PythonError') {\n    return (\n      <Box margin={20}>\n        <PythonErrorInfo error={data.partitionSetOrError} />\n      </Box>\n    );\n  }\n\n  if (data.pipelineSnapshotOrError.__typename === 'PythonError') {\n    return (\n      <Box margin={20}>\n        <PythonErrorInfo error={data.pipelineSnapshotOrError} />;\n      </Box>\n    );\n  }\n\n  if (statusesData?.partitionSetOrError.__typename === 'PythonError') {\n    return (\n      <Box margin={20}>\n        <PythonErrorInfo error={statusesData?.partitionSetOrError} />\n      </Box>\n    );\n  }\n\n  const onSuccess = (backfillId: string) => {\n    SharedToaster.show({\n      message: (\n        <div>\n          Created backfill job:{' '}\n          <FilteredRunsLink href=\"/instance/backfills\">{backfillId}</FilteredRunsLink>\n        </div>\n      ),\n      intent: Intent.SUCCESS,\n    });\n    onLaunch?.(backfillId, query);\n  };\n\n  const onError = (data: LaunchPartitionBackfill | null | undefined) => {\n    const result = data?.launchPartitionBackfill;\n    let errors = <></>;\n    if (\n      result?.__typename === 'PythonError' ||\n      result?.__typename === 'PartitionSetNotFoundError'\n    ) {\n      errors = <PythonErrorInfo error={result} />;\n    } else if (result?.__typename === 'InvalidStepError') {\n      errors = <div>{`Invalid step: ${result.invalidStepKey}`}</div>;\n    } else if (result?.__typename === 'InvalidOutputError') {\n      errors = <div>{`Invalid output: ${result.invalidOutputName} for ${result.stepKey}`}</div>;\n    } else if (result && 'errors' in result) {\n      errors = (\n        <>\n          {result['errors'].map((error, idx) => (\n            <PythonErrorInfo error={error} key={idx} />\n          ))}\n        </>\n      );\n    }\n\n    const message = (\n      <Group direction=\"column\" spacing={4}>\n        <div>An unexpected error occurred. This backfill was not launched.</div>\n        {errors ? (\n          <ButtonLink\n            color={Colors.WHITE}\n            underline=\"always\"\n            onClick={() => {\n              showCustomAlert({\n                body: errors,\n              });\n            }}\n          >\n            View error\n          </ButtonLink>\n        ) : null}\n      </Group>\n    );\n\n    SharedToaster.show({\n      message,\n      icon: 'error',\n      intent: Intent.DANGER,\n    });\n  };\n\n  const {\n    partitionSetOrError: partitionSet,\n    pipelineSnapshotOrError: pipelineSnapshot,\n    instance,\n  } = data;\n\n  const solids = pipelineSnapshot.solidHandles.map((h: any) => h.solid);\n  const runPartitions =\n    partitionSet.partitionsOrError.__typename === 'Partitions'\n      ? partitionSet.partitionsOrError.results\n      : null;\n\n  if (!solids || !runPartitions) {\n    return <span />;\n  }\n\n  const partitionStatuses = () => {\n    if (\n      statusesData?.partitionSetOrError.__typename === 'PartitionSet' &&\n      statusesData.partitionSetOrError.partitionStatusesOrError.__typename === 'PartitionStatuses'\n    ) {\n      return statusesData.partitionSetOrError.partitionStatusesOrError.results;\n    }\n    return [];\n  };\n\n  const partitionNames = runPartitions.map((x) => x.name);\n  const statuses = partitionStatuses();\n\n  const partitionsWithLastRunSuccess = statuses\n    .filter((x) => x.runStatus === PipelineRunStatus.SUCCESS)\n    .map((x) => x.partitionName);\n\n  const partitionsWithLastRunFailure = statuses\n    .filter(\n      (x) =>\n        x.runStatus === PipelineRunStatus.FAILURE ||\n        x.runStatus === PipelineRunStatus.CANCELED ||\n        x.runStatus === PipelineRunStatus.CANCELING,\n    )\n    .map((x) => x.partitionName);\n\n  const selectablePartitions = options.reexecute\n    ? options.fromFailure\n      ? partitionsWithLastRunFailure\n      : partitionsWithLastRunSuccess\n    : partitionNames;\n\n  const solidsFiltered = filterByQuery(solids, query);\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n  const stepRows = layout.boxes.map((box) => ({\n    x: box.x,\n    name: box.node.name,\n  }));\n\n  const usingDefaultRunLauncher = instance.runLauncher?.name === DEFAULT_RUN_LAUNCHER_NAME;\n\n  const getRangeSelection = (start: string, end: string) => {\n    const startIdx = selectablePartitions.indexOf(start);\n    const endIdx = selectablePartitions.indexOf(end);\n    return selectablePartitions.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  };\n\n  const currentRangeSelection = currentSelectionRange\n    ? getRangeSelection(currentSelectionRange.start, currentSelectionRange.end)\n    : [];\n\n  const onPartitionMouseDown = (name: string) => {\n    setCurrentSelectionRange({start: name, end: name});\n  };\n\n  const onPartitionMouseUp = (_: string) => {\n    if (!currentRangeSelection.length) {\n      return;\n    }\n\n    const allSelected = currentRangeSelection.every((name) => selected.includes(name));\n    if (allSelected) {\n      setSelected(selected.filter((x) => !currentRangeSelection.includes(x)));\n    } else {\n      const newSelected = new Set(selected);\n      currentRangeSelection.forEach((name) => newSelected.add(name));\n      setSelected(Array.from(newSelected));\n    }\n    setCurrentSelectionRange(undefined);\n  };\n\n  const onPartitionMouseOver = (name: string) => {\n    if (!currentSelectionRange) {\n      return;\n    }\n    const {start} = currentSelectionRange;\n    setCurrentSelectionRange({start, end: name});\n  };\n\n  const selectedString = partitionsToText(selected, partitionNames);\n\n  return (\n    <div>\n      <div className={Classes.DIALOG_BODY}>\n        <div style={{display: 'flex', alignItems: 'center', marginBottom: 4}}>\n          <strong style={{display: 'block'}}>Partitions</strong>\n          <Checkbox\n            label=\"Select all\"\n            disabled={!selectablePartitions.length}\n            style={{marginBottom: 0, marginLeft: 10}}\n            checked={selected.length === selectablePartitions.length}\n            onClick={() =>\n              setSelected(\n                selected.length === selectablePartitions.length ? [] : selectablePartitions,\n              )\n            }\n          />\n        </div>\n        <InputGroup\n          small\n          fill\n          placeholder={placeholderForPartitions(partitionNames)}\n          key={selectedString}\n          defaultValue={selectedString}\n          onBlur={(e) => {\n            try {\n              setSelected(textToPartitions(e.target.value, partitionNames));\n            } catch (err: any) {\n              e.preventDefault();\n              showCustomAlert({body: err.message});\n            }\n          }}\n        />\n        <div style={{display: 'flex', marginTop: 10}}>\n          <div>\n            <strong style={{display: 'block', marginBottom: 4}}>Step Subset</strong>\n            <GraphQueryInput\n              small\n              disabled={options.fromFailure}\n              width={260}\n              items={solids}\n              value={query}\n              placeholder=\"Type a Step Subset\"\n              onChange={setQuery}\n            />\n          </div>\n          <div style={{marginLeft: 20}}>\n            <strong style={{display: 'block', marginBottom: 6}}>Options</strong>\n            <div style={{display: 'flex'}}>\n              <Checkbox\n                checked={options.fromFailure}\n                onChange={() => {\n                  if (!statusesData) {\n                    queryStatuses();\n                  }\n                  setSelected([]);\n                  setQuery('');\n                  setOptions({\n                    ...options,\n                    reexecute: !options.reexecute,\n                    fromFailure: !options.fromFailure,\n                  });\n                }}\n              >\n                <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                  <Box margin={{right: 4}}>Re-execute from failures</Box>\n                  <Tooltip content=\"For each partition, if the most recent run failed, launch a re-execution starting from the steps that failed.\">\n                    <IconWIP name=\"info\" color={ColorsWIP.Gray500} />\n                  </Tooltip>\n                </Box>\n              </Checkbox>\n              {statusesLoading ? (\n                <div style={{marginLeft: '8px', marginTop: '3px'}}>\n                  <Spinner purpose=\"body-text\" />\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            marginTop: 20,\n            paddingTop: 20,\n            borderTop: `1px solid ${Colors.LIGHT_GRAY3}`,\n            justifyContent: 'space-between',\n          }}\n        >\n          <strong style={{display: 'block', marginBottom: 4}}>Preview</strong>\n          <div style={{color: Colors.GRAY3}}>Click or drag to edit selected partitions</div>\n        </div>\n        <div style={{display: 'flex', border: `1px solid ${Colors.LIGHT_GRAY1}`}}>\n          {query && (\n            <GridFloatingContainer floating={true}>\n              <GridColumn disabled>\n                <TopLabel></TopLabel>\n                {stepRows.map((step) => (\n                  <LeftLabel style={{paddingLeft: step.x}} key={step.name}>\n                    {step.name}\n                  </LeftLabel>\n                ))}\n              </GridColumn>\n            </GridFloatingContainer>\n          )}\n          <GridScrollContainer {...containerProps}>\n            <div style={{display: 'flex', paddingLeft: 10}}>\n              {partitionNames.map((partitionName, idx) => (\n                <GridColumn\n                  key={partitionName}\n                  style={{zIndex: partitionNames.length - idx, userSelect: 'none'}}\n                  disabled={statusesLoading || !selectablePartitions.includes(partitionName)}\n                  focused={selected.includes(partitionName)}\n                  multiselectFocused={currentRangeSelection.includes(partitionName)}\n                  onMouseDown={() => onPartitionMouseDown(partitionName)}\n                  onMouseUp={() => onPartitionMouseUp(partitionName)}\n                  onMouseOver={() => onPartitionMouseOver(partitionName)}\n                >\n                  <TopLabelTilted label={partitionName} />\n                  {!options.reexecute ? (\n                    <div\n                      className={`square ${\n                        selectablePartitions.includes(partitionName) ? 'missing' : 'disabled'\n                      }`}\n                    />\n                  ) : options.fromFailure ? (\n                    <div\n                      className={`square ${\n                        selectablePartitions.includes(partitionName) ? 'failure' : 'disabled'\n                      }`}\n                    />\n                  ) : (\n                    stepRows.map((step) => (\n                      <div\n                        key={`${partitionName}:${step.name}`}\n                        className={`square ${\n                          selectablePartitions.includes(partitionName) ? 'missing' : 'disabled'\n                        }`}\n                      />\n                    ))\n                  )}\n                </GridColumn>\n              ))}\n            </div>\n          </GridScrollContainer>\n        </div>\n\n        {!instance.daemonHealth.daemonStatus.healthy ? (\n          <div style={{marginTop: 10}}>\n            <Alert\n              intent=\"warning\"\n              title=\"The backfill daemon is not running.\"\n              description={\n                <div>\n                  See the{' '}\n                  <a\n                    href=\"https://docs.dagster.io/overview/daemon\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    dagster-daemon documentation\n                  </a>{' '}\n                  for more information on how to deploy the dagster-daemon process.\n                </div>\n              }\n            />\n          </div>\n        ) : null}\n        {usingDefaultRunLauncher && !instance.runQueuingSupported ? (\n          <div style={{marginTop: 10}}>\n            <Alert\n              intent=\"warning\"\n              title={\n                <div>\n                  Using the default run launcher <code>{DEFAULT_RUN_LAUNCHER_NAME}</code> for\n                  launching backfills without a queued run coordinator is not advised.\n                </div>\n              }\n              description={\n                <div>\n                  Check your instance configuration in <code>dagster.yaml</code> to either configure{' '}\n                  the{' '}\n                  <a\n                    href=\"https://docs.dagster.io/overview/pipeline-runs/run-coordinator\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    queued run coordinator\n                  </a>{' '}\n                  or to configure a run launcher more appropriate for launching a large number of\n                  jobs.\n                </div>\n              }\n            />\n          </div>\n        ) : null}\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <div style={{display: 'flex', alignItems: 'center', justifyContent: 'flex-end'}}>\n          <TagEditor\n            tagsFromSession={tags}\n            onChange={setTags}\n            open={tagEditorOpen}\n            onRequestClose={() => setTagEditorOpen(false)}\n          />\n          {tags.length ? (\n            <div style={{border: '1px solid #ececec', borderBottom: 'none'}}>\n              <TagContainer\n                tags={{fromSession: tags}}\n                onRequestEdit={() => setTagEditorOpen(true)}\n              />\n            </div>\n          ) : (\n            <ButtonLink\n              color=\"#106ba3\"\n              onClick={() => setTagEditorOpen(true)}\n              style={{margin: '9px  9px 0 9px'}}\n            >\n              + Add tags to backfill runs\n            </ButtonLink>\n          )}\n          <LaunchBackfillButton\n            partitionNames={selected}\n            partitionSetName={partitionSet.name}\n            reexecutionSteps={\n              !options.fromFailure && solidsFiltered.all.length < solids.length\n                ? stepRows.map((step) => step.name)\n                : undefined\n            }\n            fromFailure={options.fromFailure}\n            tags={tags}\n            onSubmit={onSubmit}\n            onSuccess={onSuccess}\n            onError={onError}\n            repoAddress={repoAddress}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst LaunchBackfillButton: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  reexecutionSteps?: string[];\n  fromFailure?: boolean;\n  tags?: PipelineRunTag[];\n  onSuccess?: (backfillId: string) => void;\n  onError: (data: LaunchPartitionBackfill | null | undefined) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  partitionNames,\n  reexecutionSteps,\n  fromFailure,\n  tags,\n  onSuccess,\n  onError,\n  onSubmit,\n  repoAddress,\n}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const mounted = React.useRef(true);\n  const [launchBackfill, {loading}] = useMutation<LaunchPartitionBackfill>(\n    LAUNCH_PARTITION_BACKFILL_MUTATION,\n  );\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onSuccess]);\n\n  const onLaunch = async () => {\n    onSubmit();\n    const {data} = await launchBackfill({\n      variables: {\n        backfillParams: {\n          selector: {\n            partitionSetName,\n            repositorySelector,\n          },\n          partitionNames,\n          reexecutionSteps,\n          fromFailure,\n          tags,\n        },\n      },\n    });\n\n    if (!mounted.current) {\n      return;\n    }\n\n    if (data && data.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      onSuccess?.(data.launchPartitionBackfill.backfillId);\n    } else {\n      onError?.(data);\n    }\n  };\n\n  const count = partitionNames.length;\n  const reexecutionCount = reexecutionSteps?.length;\n\n  const title = () => {\n    if (loading) {\n      return `Submitting ${count} ${count === 1 ? 'run' : 'runs'}…`;\n    }\n\n    if (count) {\n      return `Submit ${count} ${count === 1 ? 'run' : 'runs'}`;\n    }\n\n    return 'Select partitions to submit';\n  };\n\n  const subtitle = () => {\n    return !loading && reexecutionCount\n      ? `(${reexecutionCount} selected ${reexecutionCount === 1 ? 'step' : 'steps'})`\n      : '';\n  };\n\n  const buttonTitle = [title(), subtitle()].join(' ');\n\n  return (\n    <Box flex={{justifyContent: 'flex-end', alignItems: 'center'}} margin={{top: 12}}>\n      <LaunchButton\n        runCount={count}\n        config={{\n          title: buttonTitle,\n          icon: 'send-to',\n          disabled: !count || loading,\n          onClick: onLaunch,\n        }}\n      />\n    </Box>\n  );\n};\n\nconst FilteredRunsLink = styled.a`\n  text-decoration: underline;\n`;\n\nconst PARTITIONS_BACKFILL_SELECTOR_QUERY = gql`\n  query PartitionsBackfillSelectorQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $pipelineSelector: PipelineSelector!\n  ) {\n    partitionSetOrError(\n      partitionSetName: $partitionSetName\n      repositorySelector: $repositorySelector\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n      ... on PartitionSetNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      runLauncher {\n        name\n      }\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"BACKFILL\") {\n          id\n          healthy\n        }\n      }\n      runQueuingSupported\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst PARTITION_STATUS_QUERY = gql`\n  query PartitionStatusQuery($partitionSetName: String!, $repositorySelector: RepositorySelector!) {\n    partitionSetOrError(\n      partitionSetName: $partitionSetName\n      repositorySelector: $repositorySelector\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        partitionStatusesOrError {\n          ... on PartitionStatuses {\n            results {\n              id\n              partitionName\n              runStatus\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n      ... on PartitionSetNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCH_PARTITION_BACKFILL_MUTATION = gql`\n  mutation LaunchPartitionBackfill($backfillParams: LaunchBackfillParams!) {\n    launchPartitionBackfill(backfillParams: $backfillParams) {\n      __typename\n      ... on LaunchBackfillSuccess {\n        backfillId\n      }\n      ... on PartitionSetNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n      ... on InvalidStepError {\n        invalidStepKey\n      }\n      ... on InvalidOutputError {\n        stepKey\n        invalidOutputName\n      }\n      ... on UnauthorizedError {\n        message\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineRunConflict {\n        message\n      }\n      ... on ConflictingExecutionParamsError {\n        message\n      }\n      ... on PresetNotFoundError {\n        message\n      }\n      ... on PipelineConfigValidationInvalid {\n        pipelineName\n        errors {\n          __typename\n          message\n          path\n          reason\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useApolloClient, ApolloClient} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment';\nimport {QueryPersistedStateConfig, useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {DagsterTag} from '../runs/RunTag';\nimport {PipelineRunStatus} from '../types/globalTypes';\nimport {TokenizingFieldValue} from '../ui/TokenizingField';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PARTITION_GRAPH_SET_RUN_FRAGMENT} from './PartitionGraphSet';\nimport {PARTITION_RUN_MATRIX_RUN_FRAGMENT} from './PartitionRunMatrix';\nimport {\n  PartitionSetLoaderQuery,\n  PartitionSetLoaderQueryVariables,\n} from './types/PartitionSetLoaderQuery';\nimport {PartitionSetLoaderRunFragment} from './types/PartitionSetLoaderRunFragment';\nimport {\n  PartitionSetNamesQuery,\n  PartitionSetNamesQueryVariables,\n} from './types/PartitionSetNamesQuery';\n\ninterface PaginationState {\n  cursorStack: string[];\n  cursor: string | null;\n  pageSize: number | 'all';\n}\n\nconst PaginationStateQueryConfig: QueryPersistedStateConfig<PaginationState> = {\n  encode: (state) => ({\n    cursor: state.cursor || undefined,\n    cursorStack: state.cursorStack.length ? state.cursorStack.join(',') : undefined,\n    pageSize: state.pageSize,\n  }),\n  decode: (qs) => ({\n    cursor: qs.cursor || null,\n    cursorStack: qs.cursorStack ? qs.cursorStack.split(',') : [],\n    pageSize: qs.pageSize === 'all' ? 'all' : Number(qs.pageSize || 30),\n  }),\n};\n\ninterface DataState {\n  runs: PartitionSetLoaderRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingPercent: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingPercent: 0,\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function useChunkedPartitionsQuery(\n  partitionSetName: string,\n  runsFilter: TokenizingFieldValue[],\n  repoAddress: RepoAddress,\n) {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const client = useApolloClient();\n\n  const version = React.useRef(0);\n  const [dataState, setDataState] = React.useState<DataState>(InitialDataState);\n  const {loading, loadingPercent} = dataState;\n\n  const [{cursor, cursorStack, pageSize}, setPaginationState] = useQueryPersistedState(\n    PaginationStateQueryConfig,\n  );\n\n  React.useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    setDataState((dataState) => ({...dataState, runs: [], loading: true, loadingPercent: 0}));\n\n    const runTags = runsFilter.map((token) => {\n      const [key, value] = token.value.split('=');\n      return {key, value};\n    });\n\n    const run = async () => {\n      // Load the partition names in the current page range\n      const namesResult = await client.query<\n        PartitionSetNamesQuery,\n        PartitionSetNamesQueryVariables\n      >({\n        fetchPolicy: 'network-only',\n        query: PARTITION_SET_NAMES_QUERY,\n        variables: {\n          partitionSetName,\n          repositorySelector,\n          reverse: true,\n          cursor: cursor,\n          limit: pageSize === 'all' ? 100000 : pageSize,\n        },\n      });\n\n      if (version.current !== v) {\n        return;\n      }\n      const partitionNames =\n        (namesResult.data.partitionSetOrError.__typename === 'PartitionSet' &&\n          namesResult.data.partitionSetOrError.partitionsOrError.__typename === 'Partitions' &&\n          namesResult.data.partitionSetOrError.partitionsOrError.results.map((r) => r.name)) ||\n        [];\n\n      if (\n        namesResult.data.partitionSetOrError.__typename === 'PartitionSet' &&\n        namesResult.data.partitionSetOrError.partitionsOrError.__typename === 'PythonError'\n      ) {\n        const partitionSet = namesResult.data.partitionSetOrError;\n        const error =\n          partitionSet.partitionsOrError.__typename === 'PythonError'\n            ? partitionSet.partitionsOrError\n            : undefined;\n        setDataState((state) => ({...state, error, partitionNames: []}));\n      } else {\n        setDataState((state) => ({...state, partitionNames, loadingPercent: 0.05}));\n      }\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n      for (let ii = partitionNames.length; ii >= 0; ii -= parallelQueries) {\n        const sliceStartIdx = Math.max(ii - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(sliceStartIdx, ii);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) =>\n            fetchRunsForFilter(client, {\n              limit: 1000,\n              filter: {\n                tags: [\n                  ...runTags,\n                  {key: DagsterTag.PartitionSet, value: partitionSetName},\n                  {key: DagsterTag.Partition, value: partitionName},\n                ],\n              },\n            }),\n          ),\n        );\n        if (version.current !== v) {\n          return;\n        }\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: sliceStartIdx > 0,\n          loadingPercent:\n            0.05 + 0.95 * ((partitionNames.length - sliceStartIdx) / partitionNames.length),\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: NodeJS.Timeout = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true, loadingPercent: 0}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [PipelineRunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === DagsterTag.Partition && partitionNames.includes(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.runId === r.runId))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    run();\n\n    return () => {\n      version.current += 1;\n    };\n  }, [pageSize, cursor, client, partitionSetName, runsFilter, repositorySelector]);\n\n  // Note: cursor === null is page zero and cursors specify subsequent pages.\n\n  return {\n    loading,\n    loadingPercent,\n    partitions: assemblePartitions(dataState),\n    error: dataState.error,\n    pageSize,\n    setPageSize: (pageSize: number | 'all') => {\n      setPaginationState({cursor: null, cursorStack: [], pageSize});\n    },\n    paginationProps: {\n      hasPrevCursor: cursor !== null,\n      hasNextCursor: dataState.partitionNames.length >= pageSize,\n      popCursor: () => {\n        if (cursor === null) {\n          return;\n        }\n        setDataState({\n          loading: false,\n          loadingPercent: 0,\n          partitionNames: [],\n          runs: [],\n        });\n        setPaginationState({\n          pageSize: pageSize,\n          cursorStack: cursorStack.slice(0, cursorStack.length - 1),\n          cursor: cursorStack.length ? cursorStack[cursorStack.length - 1] : null,\n        });\n      },\n      advanceCursor: () => {\n        setDataState({\n          loading: false,\n          loadingPercent: 0,\n          partitionNames: [],\n          runs: [],\n        });\n        setPaginationState({\n          pageSize: pageSize,\n          cursorStack: cursor ? [...cursorStack, cursor] : cursorStack,\n          cursor: dataState.partitionNames[0],\n        });\n      },\n      reset: () => {\n        setDataState(InitialDataState);\n      },\n    },\n  };\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionSetLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionSetLoaderQuery, PartitionSetLoaderQueryVariables>({\n    fetchPolicy: 'network-only',\n    query: PARTITION_SET_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'PipelineRuns' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\nfunction assemblePartitions(data: {\n  partitionNames: string[];\n  runs: PartitionSetLoaderRunFragment[];\n}) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: {\n    __typename: 'Partition';\n    name: string;\n    runs: PartitionSetLoaderRunFragment[];\n  }[] = [];\n  for (const name of data.partitionNames) {\n    results.push({\n      __typename: 'Partition',\n      name,\n      runs: data.runs.filter((r) =>\n        r.tags.some((t) => t.key === DagsterTag.Partition && t.value === name),\n      ),\n    });\n  }\n  return results;\n}\n\nconst PARTITION_SET_LOADER_RUN_FRAGMENT = gql`\n  fragment PartitionSetLoaderRunFragment on PipelineRun {\n    id\n    ...PartitionGraphSetRunFragment\n    ...PartitionRunMatrixRunFragment\n  }\n  ${PARTITION_RUN_MATRIX_RUN_FRAGMENT}\n  ${PARTITION_GRAPH_SET_RUN_FRAGMENT}\n`;\n\nconst PARTITION_SET_LOADER_QUERY = gql`\n  query PartitionSetLoaderQuery($filter: PipelineRunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on PipelineRuns {\n        results {\n          id\n          ...PartitionSetLoaderRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n  ${PARTITION_SET_LOADER_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst PARTITION_SET_NAMES_QUERY = gql`\n  query PartitionSetNamesQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $limit: Int\n    $cursor: String\n    $reverse: Boolean\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        partitionsOrError(cursor: $cursor, limit: $limit, reverse: $reverse) {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n          ... on PythonError {\n            ...PythonErrorFragment\n          }\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Button, Dialog, Colors} from '@blueprintjs/core';\nimport {IconNames} from '@blueprintjs/icons';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useFeatureFlags} from '../app/Flags';\nimport {DISABLED_MESSAGE, usePermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useQueryPersistedRunFilters} from '../runs/RunsFilter';\nimport {Box} from '../ui/Box';\nimport {CursorHistoryControls} from '../ui/CursorControls';\nimport {Spinner} from '../ui/Spinner';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionGraphSet} from './PartitionGraphSet';\nimport {PartitionPageSizeSelector} from './PartitionPageSizeSelector';\nimport {PartitionRunMatrix} from './PartitionRunMatrix';\nimport {PartitionSetSelector} from './PartitionSetSelector';\nimport {PartitionsBackfillPartitionSelector} from './PartitionsBackfill';\nimport {RunTagsSupportedTokens} from './RunTagsTokenizingField';\nimport {PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results} from './types/PipelinePartitionsRootQuery';\nimport {useChunkedPartitionsQuery} from './useChunkedPartitionsQuery';\n\ntype PartitionSet = PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results;\n\ninterface PartitionViewProps {\n  pipelineName: string;\n  pipelineMode: string;\n  partitionSet: PartitionSet;\n  partitionSets: PartitionSet[];\n  onChangePartitionSet: (set: PartitionSet) => void;\n  repoAddress: RepoAddress;\n}\n\nexport const PartitionView: React.FC<PartitionViewProps> = ({\n  pipelineName,\n  pipelineMode,\n  partitionSet,\n  partitionSets,\n  onChangePartitionSet,\n  repoAddress,\n}) => {\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  const [runTags, setRunTags] = useQueryPersistedRunFilters(RunTagsSupportedTokens);\n  const [stepQuery = '', setStepQuery] = useQueryPersistedState<string>({queryKey: 'stepQuery'});\n  const [showBackfillSetup, setShowBackfillSetup] = React.useState(false);\n  const [blockDialog, setBlockDialog] = React.useState(false);\n  const {\n    loading,\n    error,\n    loadingPercent,\n    partitions,\n    paginationProps,\n    pageSize,\n    setPageSize,\n  } = useChunkedPartitionsQuery(partitionSet.name, runTags, repoAddress);\n  const {canLaunchPartitionBackfill} = usePermissions();\n  const onSubmit = React.useCallback(() => setBlockDialog(true), []);\n  React.useEffect(() => {\n    if (error) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={error} />,\n      });\n    }\n  }, [error]);\n\n  const allStepKeys = new Set<string>();\n  partitions.forEach((partition) => {\n    partition.runs.forEach((run) => {\n      run.stepStats.forEach((stat) => {\n        allStepKeys.add(stat.stepKey);\n      });\n    });\n  });\n\n  const partitionSetsForMode = partitionSets.filter((result) => result.mode === pipelineMode);\n\n  const launchButton = () => {\n    if (!canLaunchPartitionBackfill) {\n      return (\n        <Tooltip content={DISABLED_MESSAGE}>\n          <Button style={{flexShrink: 0}} icon={IconNames.ADD} disabled>\n            Launch backfill\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Button\n        style={{flexShrink: 0}}\n        onClick={() => setShowBackfillSetup(!showBackfillSetup)}\n        icon={IconNames.ADD}\n        active={showBackfillSetup}\n      >\n        Launch backfill\n      </Button>\n    );\n  };\n\n  return (\n    <div>\n      <Dialog\n        canEscapeKeyClose={!blockDialog}\n        canOutsideClickClose={!blockDialog}\n        onClose={() => setShowBackfillSetup(false)}\n        style={{width: 800, background: Colors.WHITE}}\n        title={`Launch ${partitionSet.name} backfill`}\n        isOpen={showBackfillSetup}\n      >\n        {showBackfillSetup && (\n          <PartitionsBackfillPartitionSelector\n            partitionSetName={partitionSet.name}\n            pipelineName={pipelineName}\n            onLaunch={(backfillId, stepQuery) => {\n              setStepQuery(stepQuery);\n              setRunTags([{token: 'tag', value: `dagster/backfill=${backfillId}`}]);\n              setShowBackfillSetup(false);\n            }}\n            onSubmit={onSubmit}\n            repoAddress={repoAddress}\n          />\n        )}\n      </Dialog>\n      <PartitionPagerContainer>\n        {flagPipelineModeTuples && partitionSetsForMode.length <= 1 ? null : (\n          <>\n            <PartitionSetSelector\n              selected={partitionSet}\n              partitionSets={partitionSets}\n              onSelect={onChangePartitionSet}\n            />\n            <div style={{width: 10, height: 10}} />\n          </>\n        )}\n        <Box flex={{justifyContent: 'space-between', alignItems: 'center'}} style={{flex: 1}}>\n          {launchButton()}\n          {loading && (\n            <Box\n              margin={{horizontal: 8}}\n              flex={{alignItems: 'center'}}\n              style={{overflow: 'hidden'}}\n            >\n              <Spinner purpose=\"body-text\" value={loadingPercent} />\n              <div style={{width: 5, flexShrink: 0}} />\n              <div style={{overflow: 'hidden', textOverflow: 'ellipsis'}}>\n                Loading&nbsp;partitions…\n              </div>\n            </Box>\n          )}\n          <div style={{flex: 1}} />\n          <PartitionPageSizeSelector\n            value={paginationProps.hasPrevCursor ? undefined : pageSize}\n            onChange={(value) => {\n              setPageSize(value);\n              paginationProps.reset();\n            }}\n          />\n          <div style={{width: 10}} />\n          <CursorHistoryControls {...paginationProps} />\n        </Box>\n      </PartitionPagerContainer>\n      <div style={{position: 'relative'}}>\n        <PartitionRunMatrix\n          partitions={partitions}\n          pipelineName={pipelineName}\n          repoAddress={repoAddress}\n          runTags={runTags}\n          setRunTags={setRunTags}\n          stepQuery={stepQuery}\n          setStepQuery={setStepQuery}\n        />\n        <PartitionGraphSet partitions={partitions} allStepKeys={Array.from(allStepKeys).sort()} />\n      </div>\n    </div>\n  );\n};\n\nconst PartitionPagerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  flex-direction: row;\n\n  @media (max-width: 1000px) {\n    flex-direction: column;\n    align-items: stretch;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {Box} from '../ui/Box';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionView} from './PartitionView';\nimport {\n  PipelinePartitionsRootQuery,\n  PipelinePartitionsRootQueryVariables,\n} from './types/PipelinePartitionsRootQuery';\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nexport const PipelinePartitionsRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineMode, pipelineName} = explorerPath;\n  useJobTitle(explorerPath);\n  useStripSnapshotFromPath(props);\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<PipelinePartitionsRootQuery, PipelinePartitionsRootQueryVariables>(\n    PIPELINE_PARTITIONS_ROOT_QUERY,\n    {\n      variables: {repositorySelector, pipelineName},\n      fetchPolicy: 'network-only',\n    },\n  );\n  const [selected = undefined, setSelected] = useQueryPersistedState<string>({\n    queryKey: 'partitionSet',\n  });\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetsOrError}) => {\n        if (partitionSetsOrError.__typename !== 'PartitionSets') {\n          return (\n            <Wrapper>\n              <NonIdealState\n                icon=\"multi-select\"\n                title=\"Partitions\"\n                description={partitionSetsOrError.message}\n              />\n            </Wrapper>\n          );\n        }\n\n        if (!partitionSetsOrError.results.length) {\n          return (\n            <Wrapper>\n              <NonIdealState\n                icon=\"multi-select\"\n                title=\"Partitions\"\n                description={\n                  <p>\n                    There are no partition sets defined for pipeline <code>{pipelineName}</code>.\n                  </p>\n                }\n              />\n            </Wrapper>\n          );\n        }\n\n        const selectionHasMatch =\n          selected && !!partitionSetsOrError.results.filter((x) => x.name === selected).length;\n        const partitionSet =\n          selectionHasMatch && selected\n            ? partitionSetsOrError.results.filter((x) => x.name === selected)[0]\n            : partitionSetsOrError.results[0];\n\n        return (\n          <Box padding={20}>\n            <PartitionView\n              partitionSet={partitionSet}\n              partitionSets={partitionSetsOrError.results}\n              onChangePartitionSet={(x) => setSelected(x.name)}\n              pipelineName={pipelineName}\n              pipelineMode={pipelineMode}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst PIPELINE_PARTITIONS_ROOT_QUERY = gql`\n  query PipelinePartitionsRootQuery(\n    $pipelineName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetsOrError(pipelineName: $pipelineName, repositorySelector: $repositorySelector) {\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PythonError {\n        message\n      }\n      ... on PartitionSets {\n        results {\n          id\n          mode\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  min-width: 0;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {Box} from '../ui/Box';\nimport {Loading} from '../ui/Loading';\nimport {usePipelineSelector} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {Description} from './Description';\nimport {NonIdealPipelineQueryResult} from './NonIdealPipelineQueryResult';\nimport {PipelineExplorerPath} from './PipelinePathUtils';\nimport {SidebarSection} from './SidebarComponents';\nimport {SidebarModeSection, SIDEBAR_MODE_INFO_FRAGMENT} from './SidebarModeSection';\nimport {\n  JobOverviewSidebarQuery,\n  JobOverviewSidebarQueryVariables,\n} from './types/JobOverviewSidebarQuery';\n\nexport const SidebarPipelineOrJobOverview: React.FC<{\n  repoAddress: RepoAddress;\n  explorerPath: PipelineExplorerPath;\n}> = (props) => {\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  const pipelineSelector = usePipelineSelector(props.repoAddress, props.explorerPath.pipelineName);\n\n  const queryResult = useQuery<JobOverviewSidebarQuery, JobOverviewSidebarQueryVariables>(\n    JOB_OVERVIEW_SIDEBAR_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      variables: {pipelineSelector: pipelineSelector},\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({pipelineSnapshotOrError}) => {\n        if (pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n          return <NonIdealPipelineQueryResult result={pipelineSnapshotOrError} />;\n        }\n\n        let modes = pipelineSnapshotOrError.modes;\n\n        if (flagPipelineModeTuples) {\n          modes = modes.filter((m) => m.name === props.explorerPath.pipelineMode);\n        }\n\n        return (\n          <div>\n            <SidebarSection title={'Description'}>\n              <Box padding={12}>\n                <Description\n                  description={pipelineSnapshotOrError.description || 'No description provided'}\n                />\n              </Box>\n            </SidebarSection>\n            <SidebarSection title={'Resources'}>\n              <Box padding={12}>\n                {modes.map((mode) => (\n                  <SidebarModeSection mode={mode} key={mode.name} />\n                ))}\n              </Box>\n            </SidebarSection>\n          </div>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst JOB_OVERVIEW_SIDEBAR_QUERY = gql`\n  query JobOverviewSidebarQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        description\n        modes {\n          id\n          ...SidebarModeInfoFragment\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ... on PythonError {\n        message\n      }\n    }\n  }\n  ${SIDEBAR_MODE_INFO_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {RouteComponentProps, useHistory, useLocation} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineExplorerJobContext} from './PipelineExplorerJobContext';\nimport {PipelineExplorerContainer} from './PipelineExplorerRoot';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  useStripSnapshotFromPath,\n} from './PipelinePathUtils';\nimport {SidebarPipelineOrJobOverview} from './SidebarPipelineOrJobOverview';\nimport {useJobTitle} from './useJobTitle';\n\ntype Props = RouteComponentProps<{0: string}> & {repoAddress: RepoAddress};\n\nexport const PipelineOverviewRoot: React.FC<Props> = (props) => {\n  const {match, repoAddress} = props;\n  const history = useHistory();\n  const location = useLocation();\n  const explorerPath = explorerPathFromString(match.params['0']);\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  useJobTitle(explorerPath);\n\n  useStripSnapshotFromPath({pipelinePath: explorerPathToString(explorerPath)});\n\n  return (\n    <PipelineExplorerJobContext.Provider\n      value={{\n        sidebarTab: (\n          <SidebarPipelineOrJobOverview repoAddress={repoAddress} explorerPath={explorerPath} />\n        ),\n      }}\n    >\n      <PipelineExplorerContainer\n        repoAddress={repoAddress}\n        explorerPath={explorerPath}\n        onChangeExplorerPath={(path, action) => {\n          history[action]({\n            search: location.search,\n            pathname: workspacePathFromAddress(\n              repoAddress,\n              `/${flagPipelineModeTuples ? 'jobs' : 'pipelines'}/${explorerPathToString(path)}`,\n            ),\n          });\n        }}\n      />\n    </PipelineExplorerJobContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\n\nimport {usePermissions} from '../app/Permissions';\nimport {PipelineExecutionRoot} from '../execute/PipelineExecutionRoot';\nimport {PipelineExecutionSetupRoot} from '../execute/PipelineExecutionSetupRoot';\nimport {PipelineNav} from '../nav/PipelineNav';\nimport {PipelinePartitionsRoot} from '../partitions/PipelinePartitionsRoot';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PipelineOverviewRoot} from './PipelineOverviewRoot';\nimport {useEnforceModeInPipelinePath} from './PipelinePathUtils';\nimport {PipelineRunsRoot} from './PipelineRunsRoot';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissions();\n\n  useEnforceModeInPipelinePath();\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <PipelineNav repoAddress={repoAddress} />\n      <Switch>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground/setup',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground/setup',\n          ]}\n          render={(props: RouteComponentProps<{pipelinePath: string; repoPath: string}>) => {\n            const {pipelinePath, repoPath} = props.match.params;\n            if (!canLaunchPipelineExecution) {\n              return <Redirect to={`/workspace/${repoPath}/pipelines/${pipelinePath}`} />;\n            }\n            return (\n              <PipelineExecutionSetupRoot pipelinePath={pipelinePath} repoAddress={repoAddress} />\n            );\n          }}\n        />\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground',\n          ]}\n          render={(props: RouteComponentProps<{pipelinePath: string; repoPath: string}>) => {\n            const {pipelinePath, repoPath} = props.match.params;\n            if (!canLaunchPipelineExecution) {\n              return <Redirect to={`/workspace/${repoPath}/pipelines/${pipelinePath}`} />;\n            }\n            return (\n              <PipelineExecutionRoot\n                pipelinePath={props.match.params.pipelinePath}\n                repoAddress={repoAddress}\n              />\n            );\n          }}\n        />\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/runs/:runId',\n            '/workspace/:repoPath/jobs/:pipelinePath/runs/:runId',\n          ]}\n          render={(props: RouteComponentProps<{runId: string}>) => (\n            <Redirect to={`/instance/runs/${props.match.params.runId}`} />\n          )}\n        />\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/runs',\n            '/workspace/:repoPath/jobs/:pipelinePath/runs',\n          ]}\n          render={(props: RouteComponentProps<{pipelinePath: string}>) => (\n            <PipelineRunsRoot pipelinePath={props.match.params.pipelinePath} />\n          )}\n        />\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/partitions',\n            '/workspace/:repoPath/jobs/:pipelinePath/partitions',\n          ]}\n          render={(props: RouteComponentProps<{pipelinePath: string}>) => (\n            <PipelinePartitionsRoot\n              pipelinePath={props.match.params.pipelinePath}\n              repoAddress={repoAddress}\n            />\n          )}\n        />\n\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/overview',\n            '/workspace/:repoPath/jobs/:pipelinePath/overview',\n          ]}\n          render={(props) => (\n            <Redirect\n              to={`/workspace/${props.match.params.repoPath}/jobs/${props.match.params.pipelinePath}`}\n            />\n          )}\n        />\n        <Route\n          path={['/workspace/:repoPath/pipelines/(/?.*)', '/workspace/:repoPath/jobs/(/?.*)']}\n          render={(props: any) => <PipelineOverviewRoot {...props} repoAddress={repoAddress} />}\n        />\n      </Switch>\n    </div>\n  );\n};\n","import {Colors} from '@blueprintjs/core';\nimport {ActiveElement, TimeUnit, TooltipItem} from 'chart.js';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {InstigationTickStatus} from '../types/globalTypes';\n\nimport {\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n  TickHistoryQuery_instigationStateOrError_InstigationState_nextTick,\n} from './types/TickHistoryQuery';\n\ntype FutureTick = TickHistoryQuery_instigationStateOrError_InstigationState_nextTick;\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.BLUE3,\n  [InstigationTickStatus.FAILURE]: Colors.RED3,\n  [InstigationTickStatus.STARTED]: Colors.GRAY3,\n  [InstigationTickStatus.SKIPPED]: Colors.GOLD3,\n};\n\nconst REFRESH_INTERVAL = 100;\n\nexport const LiveTickTimeline: React.FC<{\n  ticks: InstigationTick[];\n  nextTick: FutureTick | null;\n  onHoverTick: (InstigationTick?: any) => void;\n  onSelectTick: (InstigationTick?: any) => void;\n}> = ({ticks, nextTick, onHoverTick, onSelectTick}) => {\n  const [now, setNow] = React.useState<number>(Date.now());\n  const [graphNow, setGraphNow] = React.useState<number>(Date.now());\n  const [isPaused, setPaused] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      !isPaused && setNow(Date.now());\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  });\n\n  React.useEffect(() => {\n    if (!isPaused && (!nextTick || now < 1000 * nextTick.timestamp)) {\n      setGraphNow(now);\n    }\n  }, [isPaused, nextTick, now]);\n\n  const isAtFutureTick = nextTick && 1000 * nextTick.timestamp <= now;\n  const PULSE_DURATION = 2000;\n  const nextTickRadius = isAtFutureTick\n    ? 4 + Math.sin((2 * Math.PI * (now % PULSE_DURATION)) / PULSE_DURATION)\n    : 3;\n\n  const tickData = ticks.map((tick) => ({x: 1000 * tick.timestamp, y: 0}));\n  const tickColors = ticks.map((tick) => COLOR_MAP[tick.status]);\n  const tickRadii = Array(ticks.length).fill(3);\n\n  if (nextTick) {\n    tickData.push({x: 1000 * nextTick.timestamp, y: 0});\n    tickColors.push(Colors.GRAY5);\n    tickRadii.push(nextTickRadius);\n  }\n\n  const graphData = {\n    labels: ['ticks'],\n    datasets: [\n      {\n        label: 'now',\n        data: [\n          {x: graphNow - 60000 * 10, y: 0},\n          {x: graphNow, y: 0},\n        ],\n        borderColor: Colors.LIGHT_GRAY4,\n        borderWidth: 1,\n        pointBorderWidth: 2,\n        pointBorderColor: Colors.GRAY5,\n        pointRadius: 1,\n        pointHoverRadius: 1,\n      },\n      {\n        label: 'ticks',\n        data: tickData,\n        borderColor: Colors.LIGHT_GRAY4,\n        borderWidth: 0,\n        backgroundColor: 'rgba(0,0,0,0)',\n        pointBackgroundColor: 'rgba(0,0,0,0)',\n        pointBorderWidth: 2,\n        pointBorderColor: tickColors,\n        pointRadius: tickRadii,\n        pointHoverBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBorderColor: tickColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n\n    scales: {\n      y: {id: 'y', display: false, grid: {display: false}, title: {display: false}},\n      x: {\n        id: 'x',\n        type: 'time',\n        title: {\n          display: false,\n        },\n        grid: {display: true},\n        bounds: 'ticks',\n        min: graphNow - 60000 * 5, // 5 minutes ago\n        max: graphNow + 60000, // 1 minute from now\n        time: {\n          minUnit: 'minute' as TimeUnit,\n        },\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        displayColors: false,\n        callbacks: {\n          label: function (tooltipItem: TooltipItem<any>) {\n            if (!tooltipItem.datasetIndex) {\n              // this is the current time\n              return 'Current time';\n            }\n            if (tooltipItem.dataIndex === undefined) {\n              return '';\n            }\n            if (tooltipItem.dataIndex === ticks.length) {\n              // This is the future tick\n              return '';\n            }\n            const tick = ticks[tooltipItem.dataIndex];\n            if (tick.status === InstigationTickStatus.SKIPPED && tick.skipReason) {\n              return tick.skipReason;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.runIds.length) {\n              return tick.runIds;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.originRunIds) {\n              return tick.originRunIds;\n            }\n            if (tick.status === InstigationTickStatus.FAILURE && tick.error?.message) {\n              return tick.error.message;\n            }\n            return '';\n          },\n        },\n      },\n    },\n\n    onClick: (_event: MouseEvent, activeElements: any[]) => {\n      if (!activeElements.length) {\n        return;\n      }\n      const [item] = activeElements;\n      if (item.datasetIndex === undefined || item.index === undefined) {\n        return;\n      }\n      const tick = ticks[item.index];\n      onSelectTick(tick);\n    },\n\n    onHover: (event: MouseEvent, elements: ActiveElement[]) => {\n      if (event?.target instanceof HTMLElement) {\n        event.target.style.cursor = elements.length ? 'pointer' : 'default';\n      }\n      if (elements.length && !isPaused) {\n        setPaused(true);\n        const [element] = elements.filter(\n          (x) => x.datasetIndex === 1 && x.index !== undefined && x.index < ticks.length,\n        );\n        if (!element) {\n          return;\n        }\n        const tick = ticks[element.index];\n        onHoverTick(tick);\n      } else if (!elements.length && isPaused) {\n        setPaused(false);\n        onHoverTick(undefined);\n      }\n    },\n  };\n\n  return <Line type=\"line\" data={graphData} height={30} options={options} key=\"100%\" />;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Button,\n  Checkbox,\n  Classes,\n  Colors,\n  Dialog,\n  NonIdealState,\n  Tabs,\n  Tab,\n} from '@blueprintjs/core';\nimport {ActiveElement, Chart, TimeUnit} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport moment from 'moment-timezone';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationTickStatus, InstigationType} from '../types/globalTypes';\nimport {Box} from '../ui/Box';\nimport {ButtonLink} from '../ui/ButtonLink';\nimport {Group} from '../ui/Group';\nimport {Spinner} from '../ui/Spinner';\nimport {Subheading} from '../ui/Text';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {TICK_TAG_FRAGMENT, RunList, TickTag, FailedRunList} from './InstigationTick';\nimport {LiveTickTimeline} from './LiveTickTimeline';\nimport {\n  TickHistoryQuery,\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n} from './types/TickHistoryQuery';\n\nimport 'chartjs-adapter-date-fns';\n\nChart.register(zoomPlugin);\n\nconst MIN_ZOOM_RANGE = 30 * 60 * 1000; // 30 minutes\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.BLUE3,\n  [InstigationTickStatus.FAILURE]: Colors.RED3,\n  [InstigationTickStatus.STARTED]: Colors.GRAY3,\n  [InstigationTickStatus.SKIPPED]: Colors.GOLD3,\n};\n\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: true,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nconst TABS = [\n  {\n    id: 'recent',\n    label: 'Recent',\n    range: 1,\n  },\n  {\n    id: '1d',\n    label: '1 day',\n    range: 1,\n  },\n  {\n    id: '7d',\n    label: '7 days',\n    range: 7,\n  },\n  {\n    id: '14d',\n    label: '14 days',\n    range: 14,\n  },\n  {\n    id: '30d',\n    label: '30 days',\n    range: 30,\n  },\n  {id: 'all', label: 'All'},\n];\n\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\nconst MILLIS_PER_DAY = 86400 * 1000;\n\nexport const TickHistory = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n  showRecent,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds: (runIds: string[]) => void;\n  showRecent?: boolean;\n}) => {\n  const [selectedTab, setSelectedTab] = React.useState<string>('recent');\n  const [shownStates, setShownStates] = React.useState<ShownStatusState>(\n    DEFAULT_SHOWN_STATUS_STATE,\n  );\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n  const [selectedTick, setSelectedTick] = React.useState<\n    TickHistoryQuery_instigationStateOrError_InstigationState_ticks | undefined\n  >();\n  React.useEffect(() => {\n    if (!showRecent && selectedTab === 'recent') {\n      setSelectedTab('1d');\n    }\n  }, [selectedTab, showRecent]);\n  const selectedRange = TABS.find((x) => x.id === selectedTab)?.range;\n  const {data} = useQuery<TickHistoryQuery>(JOB_TICK_HISTORY_QUERY, {\n    variables: {\n      instigationSelector: {\n        ...repoAddressToSelector(repoAddress),\n        name,\n      },\n      dayRange: selectedRange,\n      limit: selectedTab === 'recent' ? 15 : undefined,\n    },\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    pollInterval: selectedTab === 'recent' && !pollingPaused ? 1000 : 0,\n  });\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab}>\n      {TABS.map((tab) =>\n        tab.id === 'recent' && !showRecent ? null : (\n          <Tab\n            id={tab.id}\n            key={tab.id}\n            title={\n              <ButtonLink underline={false} onClick={() => setSelectedTab(tab.id)}>\n                {tab.label}\n              </ButtonLink>\n            }\n          />\n        ),\n      )}\n    </Tabs>\n  );\n\n  if (!data) {\n    return (\n      <Group direction=\"column\" spacing={12}>\n        <Subheading>Tick History</Subheading>\n        {tabs}\n        <Spinner purpose=\"section\" />\n      </Group>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  const {ticks, nextTick, instigationType} = data.instigationStateOrError;\n  const displayedTicks = ticks.filter((tick) =>\n    tick.status === InstigationTickStatus.SKIPPED\n      ? instigationType === InstigationType.SCHEDULE && shownStates[tick.status]\n      : shownStates[tick.status],\n  );\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      disabled={!ticks.filter((tick) => tick.status === status).length}\n      onClick={() => setShownStates({...shownStates, [status]: !shownStates[status]})}\n    />\n  );\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTick(tick);\n    if (!tick) {\n      return;\n    }\n    if (tick.error && tick.status === InstigationTickStatus.FAILURE) {\n      showCustomAlert({\n        title: 'Python Error',\n        body: <PythonErrorInfo error={tick.error} />,\n      });\n    }\n  };\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n\n  const now = Date.now();\n  return (\n    <Group direction=\"column\" spacing={12}>\n      <Subheading>Tick History</Subheading>\n      {tabs}\n      {showRecent && selectedTab === 'recent' ? (\n        <LiveTickTimeline\n          ticks={ticks}\n          nextTick={nextTick}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n        />\n      ) : ticks.length ? (\n        <>\n          <Box flex={{justifyContent: 'flex-end'}}>\n            <Group direction=\"row\" spacing={16}>\n              <StatusFilter status={InstigationTickStatus.SUCCESS} />\n              <StatusFilter status={InstigationTickStatus.FAILURE} />\n              {instigationType === InstigationType.SCHEDULE ? (\n                <StatusFilter status={InstigationTickStatus.SKIPPED} />\n              ) : null}\n            </Group>\n          </Box>\n          <TickHistoryGraph\n            ticks={displayedTicks}\n            selectedTick={selectedTick}\n            onSelectTick={onTickClick}\n            onHoverTick={onTickHover}\n            selectedTab={selectedTab}\n            maxBounds={\n              selectedTab === 'all'\n                ? undefined\n                : {min: now - (selectedRange || 0) * MILLIS_PER_DAY, max: Date.now()}\n            }\n          />\n        </>\n      ) : (\n        <Box margin={{top: 16, bottom: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState description=\"No ticks to display\" />\n        </Box>\n      )}\n      <Dialog\n        isOpen={\n          selectedTick &&\n          (selectedTick.status === InstigationTickStatus.SUCCESS ||\n            selectedTick.status === InstigationTickStatus.SKIPPED)\n        }\n        onClose={() => setSelectedTick(undefined)}\n        style={{\n          width:\n            selectedTick && selectedTick.status === InstigationTickStatus.SUCCESS ? '90vw' : '50vw',\n        }}\n        title={selectedTick ? <TimestampDisplay timestamp={selectedTick.timestamp} /> : null}\n      >\n        {selectedTick ? (\n          <Box background={Colors.WHITE} padding={16} margin={{bottom: 16}}>\n            {selectedTick.status === InstigationTickStatus.SUCCESS ? (\n              selectedTick.runIds.length ? (\n                <RunList runIds={selectedTick.runIds} />\n              ) : (\n                <FailedRunList originRunIds={selectedTick.originRunIds} />\n              )\n            ) : null}\n            {selectedTick.status === InstigationTickStatus.SKIPPED ? (\n              <Group direction=\"row\" spacing={16}>\n                <TickTag tick={selectedTick} />\n                <span>{selectedTick.skipReason || 'No skip reason provided'}</span>\n              </Group>\n            ) : null}\n          </Box>\n        ) : null}\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button intent=\"primary\" onClick={() => setSelectedTick(undefined)}>\n              OK\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n    </Group>\n  );\n};\n\ninterface Bounds {\n  min: number;\n  max: number;\n}\n\nconst TickHistoryGraph: React.FC<{\n  ticks: InstigationTick[];\n  selectedTick?: InstigationTick;\n  onSelectTick: (tick: InstigationTick) => void;\n  onHoverTick: (tick?: InstigationTick) => void;\n  selectedTab: string;\n  maxBounds?: Bounds;\n}> = ({ticks, selectedTick, onSelectTick, onHoverTick, selectedTab, maxBounds}) => {\n  const [bounds, setBounds] = React.useState<Bounds | null>(null);\n  const [hoveredTick, setHoveredTick] = React.useState<InstigationTick | undefined>();\n  const [now] = React.useState(() => Date.now());\n\n  React.useEffect(() => {\n    setBounds(null);\n  }, [selectedTab]);\n\n  const tickData = ticks.map((tick) => ({x: 1000 * tick.timestamp, y: 0}));\n  const graphData = {\n    labels: ['ticks'],\n    datasets: [\n      {\n        label: 'ticks',\n        data: tickData,\n        borderColor: Colors.LIGHT_GRAY4,\n        borderWidth: 0,\n        backgroundColor: 'rgba(0,0,0,0)',\n        pointBackgroundColor: ticks.map((tick) => COLOR_MAP[tick.status]),\n        pointBorderWidth: 1,\n        pointBorderColor: ticks.map((tick) =>\n          selectedTick && selectedTick.id === tick.id ? Colors.DARK_GRAY5 : COLOR_MAP[tick.status],\n        ),\n        pointRadius: ticks.map((tick) => (selectedTick && selectedTick.id === tick.id ? 5 : 3)),\n        pointHoverBorderWidth: 1,\n        pointHoverRadius: 5,\n        showLine: true,\n      },\n    ],\n  };\n\n  const getMaxBounds = () => {\n    if (maxBounds) {\n      return maxBounds;\n    }\n    const dataMin = Math.min(...tickData.map((_) => _.x));\n    const dataMax = Math.max(...tickData.map((_) => _.x));\n    const buffer = (dataMax - dataMin) / 25;\n    return {\n      min: dataMax ? dataMin - buffer : now - MIN_ZOOM_RANGE,\n      max: dataMax ? dataMax + buffer : now,\n    };\n  };\n\n  const calculateBounds = () => {\n    if (bounds) {\n      return bounds;\n    }\n    return getMaxBounds();\n  };\n\n  const calculateUnit: () => TimeUnit = () => {\n    const {min, max} = calculateBounds();\n    const range = max - min;\n    const factor = 2;\n    const hour = 3600000;\n    const day = 24 * hour;\n    const month = 30 * day;\n    const year = 365 * day;\n\n    if (range < factor * hour) {\n      return 'minute';\n    }\n    if (range < factor * day) {\n      return 'hour';\n    }\n    if (range < factor * month) {\n      return 'day';\n    }\n    if (range < factor * year) {\n      return 'month';\n    }\n    return 'year';\n  };\n\n  const dateFormat = (x: number) => moment(x).format('MMM D');\n  const snippet = (x: string, length = 100, buffer = 20) => {\n    const snipped = x.slice(0, length);\n    return snipped.length < x.length - buffer ? `${snipped}...` : x;\n  };\n\n  const title = bounds\n    ? dateFormat(bounds.min) === dateFormat(bounds.max)\n      ? dateFormat(bounds.min)\n      : `${dateFormat(bounds.min)} - ${dateFormat(bounds.max)}`\n    : undefined;\n\n  const options = {\n    indexAxis: 'x',\n    scales: {\n      y: {id: 'y', display: false},\n      x: {\n        id: 'x',\n        type: 'time',\n        title: {\n          display: false,\n        },\n        bounds: 'ticks',\n        grid: {display: true, drawBorder: true},\n        ticks: {\n          source: 'auto',\n        },\n        ...calculateBounds(),\n        time: {\n          minUnit: calculateUnit(),\n        },\n      },\n    },\n\n    onHover: (event: MouseEvent, activeElements: ActiveElement[]) => {\n      if (event?.target instanceof HTMLElement) {\n        event.target.style.cursor = activeElements.length ? 'pointer' : 'default';\n      }\n\n      if (activeElements.length && activeElements[0] && activeElements[0].index < ticks.length) {\n        const tick = ticks[activeElements[0].index];\n        setHoveredTick(tick);\n        onHoverTick(tick);\n      } else {\n        onHoverTick(undefined);\n      }\n    },\n\n    onClick: (_event: MouseEvent, activeElements: ActiveElement[]) => {\n      if (!activeElements.length) {\n        return;\n      }\n      const [item] = activeElements;\n      if (item.datasetIndex === undefined || item.index === undefined) {\n        return;\n      }\n      const tick = ticks[item.index];\n      onSelectTick(tick);\n    },\n\n    plugins: {\n      title: {\n        display: !!title,\n        text: title,\n      },\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        displayColors: false,\n        callbacks: {\n          title: () => {\n            if (!hoveredTick) {\n              return '';\n            }\n            return moment(hoveredTick.timestamp * 1000).format('MMM D, YYYY h:mm:ss A z');\n          },\n          label: () => {\n            if (!hoveredTick) {\n              return '';\n            }\n            if (hoveredTick.status === InstigationTickStatus.SKIPPED && hoveredTick.skipReason) {\n              return snippet(hoveredTick.skipReason);\n            }\n            if (hoveredTick.status === InstigationTickStatus.SUCCESS && hoveredTick.runIds.length) {\n              return hoveredTick.runIds;\n            }\n            if (\n              hoveredTick.status === InstigationTickStatus.FAILURE &&\n              hoveredTick.error?.message\n            ) {\n              return snippet(hoveredTick.error.message);\n            }\n            return '';\n          },\n        },\n      },\n      zoom: {\n        limits: {\n          x: {\n            min: getMaxBounds().min,\n            max: getMaxBounds().max,\n          },\n        },\n        zoom: {\n          mode: 'x',\n          wheel: {\n            enabled: true,\n          },\n          pinch: {\n            enabled: true,\n          },\n          onZoom: ({chart}: {chart: Chart}) => {\n            const {min, max} = chart.scales.x;\n            if (min && max) {\n              const diff = max - min;\n              if (diff > MIN_ZOOM_RANGE) {\n                setBounds({min, max});\n              } else if (bounds) {\n                const offset = (bounds.max - bounds.min - MIN_ZOOM_RANGE) / 2;\n                setBounds({min: bounds.min + offset, max: bounds.max - offset});\n              } else {\n                const offset = (getMaxBounds().max - getMaxBounds().min - MIN_ZOOM_RANGE) / 2;\n                setBounds({min: getMaxBounds().min + offset, max: getMaxBounds().max - offset});\n              }\n            }\n          },\n        },\n        pan: {\n          enabled: true,\n          mode: 'x',\n          onPan: ({chart}: {chart: Chart}) => {\n            const {min, max} = chart.scales.x;\n            if (min && max) {\n              setBounds({min, max});\n            }\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <div>\n      <Line type=\"line\" data={graphData} options={options} height={30} />\n      <div style={{fontSize: 13, opacity: 0.5}}>\n        <Box flex={{justifyContent: 'center'}} margin={{top: 8}}>\n          Tip: Scroll / pinch to zoom, drag to pan, click to see tick details.\n          {bounds ? (\n            <Box margin={{left: 8}}>\n              <ButtonLink onClick={() => setBounds(null)}>Reset zoom</ButtonLink>\n            </Box>\n          ) : null}\n        </Box>\n      </div>\n    </div>\n  );\n};\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery($instigationSelector: InstigationSelector!, $dayRange: Int, $limit: Int) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        instigationType\n        nextTick {\n          timestamp\n        }\n        ticks(dayRange: $dayRange, limit: $limit) {\n          id\n          status\n          timestamp\n          skipReason\n          runIds\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors} from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {Box} from '../ui/Box';\nimport {Group} from '../ui/Group';\nimport {Subheading} from '../ui/Text';\n\nimport {PreviousRunsFragment} from './types/PreviousRunsFragment';\n\nexport const PreviousRunsSection: React.FC<{\n  loading: boolean;\n  data: PreviousRunsFragment | null | undefined;\n  highlightedIds?: string[];\n}> = ({loading, data, highlightedIds}) => {\n  const content = () => {\n    if (loading) {\n      return <Box margin={{top: 8}}>Loading...</Box>;\n    }\n    if (!data || data.__typename !== 'PipelineRuns') {\n      return <Box margin={{top: 8}}>Error!</Box>;\n    }\n    const runs = data?.results;\n    return <RunTable onSetFilter={() => {}} runs={runs} highlightedIds={highlightedIds} />;\n  };\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Box\n        padding={{bottom: 12}}\n        border={{side: 'bottom', width: 1, color: Colors.LIGHT_GRAY3}}\n        flex={{direction: 'row'}}\n      >\n        <Subheading>Latest runs</Subheading>\n      </Box>\n      <div style={{color: Colors.GRAY3}}>{content()}</div>\n    </Group>\n  );\n};\n\nexport const PREVIOUS_RUNS_FRAGMENT = gql`\n  fragment PreviousRunsFragment on PipelineRunsOrError {\n    __typename\n    ... on PipelineRuns {\n      results {\n        id\n        ... on PipelineRun {\n          ...RunTableRunFragment\n        }\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {Colors} from '@blueprintjs/core';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {useCopyToClipboard} from '../app/browser';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {Box} from '../ui/Box';\nimport {ButtonLink} from '../ui/ButtonLink';\nimport {CountdownStatus, useCountdown} from '../ui/Countdown';\nimport {Group} from '../ui/Group';\nimport {MetadataTable} from '../ui/MetadataTable';\nimport {PageHeader} from '../ui/PageHeader';\nimport {RefreshableCountdown} from '../ui/RefreshableCountdown';\nimport {Code, Heading, Mono} from '../ui/Text';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleFragment';\n\nconst TIME_FORMAT = {showSeconds: false, showTimezone: true};\n\nexport const ScheduleDetails: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n  countdownDuration: number;\n  countdownStatus: CountdownStatus;\n  onRefresh: () => void;\n}> = (props) => {\n  const {repoAddress, schedule, countdownDuration, countdownStatus, onRefresh} = props;\n  const {cronSchedule, executionTimezone, futureTicks, name, partitionSet, pipelineName} = schedule;\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  const copyToClipboard = useCopyToClipboard();\n\n  const [copyText, setCopyText] = React.useState('Click to copy');\n\n  const timeRemaining = useCountdown({\n    duration: countdownDuration,\n    status: countdownStatus,\n  });\n\n  // Restore the tooltip text after a delay.\n  React.useEffect(() => {\n    let token: any;\n    if (copyText === 'Copied!') {\n      token = setTimeout(() => {\n        setCopyText('Click to copy');\n      }, 2000);\n    }\n    return () => {\n      token && clearTimeout(token);\n    };\n  }, [copyText]);\n\n  const {scheduleState} = schedule;\n  const {status, id, ticks} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  const copyId = () => {\n    copyToClipboard(id);\n    setCopyText('Copied!');\n  };\n\n  const running = status === InstigationStatus.RUNNING;\n  const countdownRefreshing = countdownStatus === 'idle' || timeRemaining === 0;\n  const seconds = Math.floor(timeRemaining / 1000);\n\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <PageHeader\n        title={\n          <Group alignItems=\"center\" direction=\"row\" spacing={2}>\n            <Heading>{name}</Heading>\n            <Box margin={{horizontal: 12}}>\n              <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n            </Box>\n            {futureTicks.results.length && running ? (\n              <Group direction=\"row\" spacing={4}>\n                <div>Next tick:</div>\n                <TimestampDisplay\n                  timestamp={futureTicks.results[0].timestamp}\n                  timezone={executionTimezone}\n                  timeFormat={TIME_FORMAT}\n                />\n              </Group>\n            ) : null}\n          </Group>\n        }\n        icon=\"schedule\"\n        description={\n          <>\n            <Link to={workspacePathFromAddress(repoAddress, '/schedules')}>Schedule</Link> in{' '}\n            <RepositoryLink repoAddress={repoAddress} />\n          </>\n        }\n        right={\n          <Box margin={{top: 4}}>\n            <Group direction=\"column\" spacing={8} alignItems=\"flex-end\">\n              <RefreshableCountdown\n                refreshing={countdownRefreshing}\n                seconds={seconds}\n                onRefresh={onRefresh}\n              />\n              <Tooltip content={copyText}>\n                <ButtonLink color={{link: Colors.GRAY3, hover: Colors.GRAY1}} onClick={copyId}>\n                  <Mono>{`id: ${id.slice(0, 8)}`}</Mono>\n                </ButtonLink>\n              </Tooltip>\n            </Group>\n          </Box>\n        }\n      />\n      <MetadataTable\n        rows={[\n          schedule.description\n            ? {\n                key: 'Description',\n                value: schedule.description,\n              }\n            : null,\n          {\n            key: 'Latest tick',\n            value: latestTick ? (\n              <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                <TimestampDisplay\n                  timestamp={latestTick.timestamp}\n                  timezone={executionTimezone}\n                  timeFormat={TIME_FORMAT}\n                />\n                <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n              </Group>\n            ) : (\n              'Schedule has never run'\n            ),\n          },\n          {\n            key: flagPipelineModeTuples ? 'Job' : 'Pipeline',\n            value: (\n              <PipelineReference\n                pipelineName={pipelineName}\n                pipelineHrefContext={repoAddress}\n                mode={schedule.mode}\n              />\n            ),\n          },\n          {\n            key: 'Partition Set',\n            value: partitionSet ? (\n              <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n            ) : (\n              'None'\n            ),\n          },\n          {\n            key: 'Schedule',\n            value: cronSchedule ? (\n              <Group direction=\"row\" spacing={8}>\n                <span>{humanCronString(cronSchedule)}</span>\n                <Code>({cronSchedule})</Code>\n              </Group>\n            ) : (\n              <div>&mdash;</div>\n            ),\n          },\n          executionTimezone\n            ? {\n                key: 'Execution timezone',\n                value: executionTimezone,\n              }\n            : null,\n        ].filter(Boolean)}\n      />\n    </Group>\n  );\n};\n","import {gql, NetworkStatus, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistory} from '../instigation/TickHistory';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Group} from '../ui/Group';\nimport {ScrollContainer} from '../ui/ListComponents';\nimport {Loading} from '../ui/Loading';\nimport {Page} from '../ui/Page';\nimport {PreviousRunsSection, PREVIOUS_RUNS_FRAGMENT} from '../workspace/PreviousRunsSection';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ScheduleDetails} from './ScheduleDetails';\nimport {SCHEDULE_FRAGMENT} from './ScheduleUtils';\nimport {SCHEDULER_FRAGMENT, SchedulerInfo} from './SchedulerInfo';\nimport {PreviousRunsForScheduleQuery} from './types/PreviousRunsForScheduleQuery';\nimport {\n  ScheduleRootQuery,\n  ScheduleRootQuery_scheduleOrError_Schedule as Schedule,\n} from './types/ScheduleRootQuery';\n\ninterface Props {\n  scheduleName: string;\n  repoAddress: RepoAddress;\n  runTab?: string;\n}\n\nconst INTERVAL = 15 * 1000;\n\nexport const ScheduleRoot: React.FC<Props> = (props) => {\n  const {scheduleName, repoAddress, runTab} = props;\n  useDocumentTitle(`Schedule: ${scheduleName}`);\n\n  const [selectedRunIds, setSelectedRunIds] = React.useState<string[]>([]);\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName,\n  };\n\n  const queryResult = useQuery<ScheduleRootQuery>(SCHEDULE_ROOT_QUERY, {\n    variables: {\n      scheduleSelector,\n    },\n    fetchPolicy: 'cache-and-network',\n    pollInterval: INTERVAL,\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const {networkStatus, refetch, stopPolling, startPolling} = queryResult;\n\n  const onRefresh = async () => {\n    stopPolling();\n    await refetch();\n    startPolling(INTERVAL);\n  };\n\n  const countdownStatus = networkStatus === NetworkStatus.ready ? 'counting' : 'idle';\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({scheduleOrError, scheduler, instance}) => {\n        if (scheduleOrError.__typename !== 'Schedule') {\n          return null;\n        }\n\n        return (\n          <ScrollContainer>\n            <Page>\n              <Group direction=\"column\" spacing={20}>\n                <SchedulerInfo\n                  schedulerOrError={scheduler}\n                  daemonHealth={instance.daemonHealth}\n                  errorsOnly={true}\n                />\n                <ScheduleDetails\n                  repoAddress={repoAddress}\n                  schedule={scheduleOrError}\n                  countdownDuration={INTERVAL}\n                  countdownStatus={countdownStatus}\n                  onRefresh={() => onRefresh()}\n                />\n                <TickHistory\n                  repoAddress={repoAddress}\n                  name={scheduleOrError.name}\n                  onHighlightRunIds={(runIds: string[]) => setSelectedRunIds(runIds)}\n                />\n                <SchedulePreviousRuns\n                  repoAddress={repoAddress}\n                  schedule={scheduleOrError}\n                  highlightedIds={selectedRunIds}\n                  runTab={runTab}\n                />\n              </Group>\n            </Page>\n          </ScrollContainer>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst RUNS_LIMIT = 20;\n\ninterface SchedulePreviousRunsProps {\n  repoAddress: RepoAddress;\n  runTab?: string;\n  schedule: Schedule;\n  highlightedIds: string[];\n}\n\nconst SchedulePreviousRuns: React.FC<SchedulePreviousRunsProps> = (props) => {\n  const {schedule, highlightedIds} = props;\n  const {data, loading} = useQuery<PreviousRunsForScheduleQuery>(PREVIOUS_RUNS_FOR_SCHEDULE_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      limit: RUNS_LIMIT,\n      filter: {\n        pipelineName: schedule.pipelineName,\n        tags: [{key: DagsterTag.ScheduleName, value: schedule.name}],\n      },\n    },\n    partialRefetch: true,\n    pollInterval: 15 * 1000,\n  });\n\n  return (\n    <PreviousRunsSection\n      loading={loading}\n      data={data?.pipelineRunsOrError}\n      highlightedIds={highlightedIds}\n    />\n  );\n};\n\nconst SCHEDULE_ROOT_QUERY = gql`\n  query ScheduleRootQuery($scheduleSelector: ScheduleSelector!) {\n    scheduler {\n      ...SchedulerFragment\n    }\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...ScheduleFragment\n      }\n      ... on ScheduleNotFoundError {\n        message\n      }\n      ... on PythonError {\n        message\n        stack\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SCHEDULER_FRAGMENT}\n  ${SCHEDULE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst PREVIOUS_RUNS_FOR_SCHEDULE_QUERY = gql`\n  query PreviousRunsForScheduleQuery($filter: PipelineRunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ...PreviousRunsFragment\n    }\n  }\n  ${PREVIOUS_RUNS_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport {DagsterTag} from '../runs/RunTag';\nimport {Box} from '../ui/Box';\nimport {Group} from '../ui/Group';\nimport {Subheading} from '../ui/Text';\nimport {PreviousRunsSection, PREVIOUS_RUNS_FRAGMENT} from '../workspace/PreviousRunsSection';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PreviousRunsForSensorQuery} from './types/PreviousRunsForSensorQuery';\nimport {SensorFragment} from './types/SensorFragment';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  highlightedIds: string[];\n}> = ({sensor, highlightedIds}) => {\n  const {data, loading} = useQuery<PreviousRunsForSensorQuery>(PREVIOUS_RUNS_FOR_SENSOR_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      limit: RUNS_LIMIT,\n      filter: {\n        pipelineName: sensor.targets?.length === 1 ? sensor.targets[0].pipelineName : undefined,\n        tags: [{key: DagsterTag.SensorName, value: sensor.name}],\n      },\n    },\n  });\n\n  return (\n    <PreviousRunsSection\n      loading={loading}\n      data={data?.pipelineRunsOrError}\n      highlightedIds={highlightedIds}\n    />\n  );\n};\n\nexport const NoTargetSensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  highlightedIds: string[];\n}> = () => {\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Box\n        padding={{bottom: 12}}\n        border={{side: 'bottom', width: 1, color: Colors.LIGHT_GRAY3}}\n        flex={{direction: 'row'}}\n      >\n        <Subheading>Latest runs</Subheading>\n      </Box>\n      <div style={{color: Colors.GRAY3}}>\n        <Box margin={{vertical: 64}}>\n          <NonIdealState description=\"Sensor does not target a pipeline.\" />\n        </Box>\n      </div>\n    </Group>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: PipelineRunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ...PreviousRunsFragment\n    }\n  }\n  ${PREVIOUS_RUNS_FRAGMENT}\n`;\n","import {gql, NetworkStatus, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistory} from '../instigation/TickHistory';\nimport {Group} from '../ui/Group';\nimport {Loading} from '../ui/Loading';\nimport {Page} from '../ui/Page';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns, NoTargetSensorPreviousRuns} from './SensorPreviousRuns';\nimport {SensorRootQuery} from './types/SensorRootQuery';\n\nconst INTERVAL = 15 * 1000;\n\nexport const SensorRoot: React.FC<{\n  repoAddress: RepoAddress;\n  sensorName: string;\n}> = ({sensorName, repoAddress}) => {\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const [selectedRunIds, setSelectedRunIds] = React.useState<string[]>([]);\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const queryResult = useQuery<SensorRootQuery>(SENSOR_ROOT_QUERY, {\n    variables: {\n      sensorSelector,\n    },\n    fetchPolicy: 'cache-and-network',\n    pollInterval: INTERVAL,\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const {networkStatus, refetch, stopPolling, startPolling} = queryResult;\n\n  const onRefresh = async () => {\n    stopPolling();\n    await refetch();\n    startPolling(INTERVAL);\n  };\n\n  const countdownStatus = networkStatus === NetworkStatus.ready ? 'counting' : 'idle';\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({sensorOrError, instance}) => {\n        if (sensorOrError.__typename !== 'Sensor') {\n          return null;\n        }\n\n        return (\n          <Page>\n            <Group direction=\"column\" spacing={24}>\n              <SensorInfo daemonHealth={instance.daemonHealth} />\n              <SensorDetails\n                repoAddress={repoAddress}\n                sensor={sensorOrError}\n                daemonHealth={instance.daemonHealth.daemonStatus.healthy}\n                countdownDuration={INTERVAL}\n                countdownStatus={countdownStatus}\n                onRefresh={() => onRefresh()}\n              />\n              <TickHistory\n                repoAddress={repoAddress}\n                name={sensorOrError.name}\n                showRecent={true}\n                onHighlightRunIds={(runIds: string[]) => setSelectedRunIds(runIds)}\n              />\n              {sensorOrError.targets && sensorOrError.targets.length ? (\n                <SensorPreviousRuns\n                  repoAddress={repoAddress}\n                  sensor={sensorOrError}\n                  highlightedIds={selectedRunIds}\n                />\n              ) : (\n                <NoTargetSensorPreviousRuns\n                  repoAddress={repoAddress}\n                  sensor={sensorOrError}\n                  highlightedIds={selectedRunIds}\n                />\n              )}\n            </Group>\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      __typename\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n        }\n      }\n    }\n  }\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery, useMutation} from '@apollo/client';\nimport {Menu, MenuItem, Colors, NonIdealState} from '@blueprintjs/core';\nimport {IconNames} from '@blueprintjs/icons';\nimport {ContextMenu2 as ContextMenu} from '@blueprintjs/popover2';\nimport {pathVerticalDiagonal} from '@vx/shape';\nimport * as dagre from 'dagre';\nimport qs from 'query-string';\nimport React from 'react';\nimport {useHistory, useRouteMatch, Link, RouteComponentProps} from 'react-router-dom';\nimport styled, {CSSProperties} from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {AssetDetails} from '../assets/AssetDetails';\nimport {AssetMaterializations} from '../assets/AssetMaterializations';\nimport {showLaunchError} from '../execute/showLaunchError';\nimport {SVGViewport} from '../graph/SVGViewport';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {JobMetadata} from '../nav/JobMetadata';\nimport {Description} from '../pipelines/Description';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\nimport {METADATA_ENTRY_FRAGMENT} from '../runs/MetadataEntry';\nimport {\n  LAUNCH_PIPELINE_EXECUTION_MUTATION,\n  handleLaunchResult,\n  titleForRun,\n} from '../runs/RunUtils';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {LaunchPipelineExecution} from '../runs/types/LaunchPipelineExecution';\nimport {POLL_INTERVAL} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {Box} from '../ui/Box';\nimport {Loading} from '../ui/Loading';\nimport {SplitPanelContainer} from '../ui/SplitPanelContainer';\nimport {FontFamily} from '../ui/styles';\n\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  AssetGraphQuery_repositoryOrError_Repository,\n  AssetGraphQuery_repositoryOrError_Repository_assetNodes,\n  AssetGraphQuery_repositoryOrError_Repository_assetNodes_assetKey,\n} from './types/AssetGraphQuery';\nimport {workspacePath} from './workspacePath';\n\ntype Repository = AssetGraphQuery_repositoryOrError_Repository;\ntype AssetNode = AssetGraphQuery_repositoryOrError_Repository_assetNodes;\ntype AssetKey = AssetGraphQuery_repositoryOrError_Repository_assetNodes_assetKey;\n\ninterface Props extends RouteComponentProps {\n  repoAddress: RepoAddress;\n  selected: string | undefined;\n}\n\ninterface Node {\n  id: string;\n  assetKey: AssetKey;\n  definition: AssetNode;\n  hidden: boolean;\n}\ninterface LayoutNode {\n  id: string;\n  x: number;\n  y: number;\n}\ninterface GraphData {\n  nodes: {[id: string]: Node};\n  downstream: {[upstream: string]: {[downstream: string]: string}};\n  upstream: {[downstream: string]: {[upstream: string]: boolean}};\n}\ninterface IPoint {\n  x: number;\n  y: number;\n}\ntype IEdge = {\n  from: IPoint;\n  to: IPoint;\n  dashed: boolean;\n};\n\nconst getNodeDimensions = (def: AssetNode) => {\n  let height = 40;\n  if (def.description) {\n    height += 25;\n  }\n  if (def.assetMaterializations.length) {\n    height += 22;\n    if (runForDisplay(def)) {\n      height += 22;\n    }\n  }\n  return {width: Math.max(250, def.assetKey.path.join('>').length * 9.5) + 25, height};\n};\n\nconst getBlankDimensions = (id: string) => {\n  const path = JSON.parse(id);\n  return {width: Math.max(250, path.join('>').length * 1.2) + 25, height: 30};\n};\n\nconst buildGraphData = (repository: Repository, selected?: Node) => {\n  const nodes: {[id: string]: Node} = {};\n  const downstream: {[downstreamId: string]: {[upstreamId: string]: string}} = {};\n  const upstream: {[upstreamId: string]: {[downstreamId: string]: boolean}} = {};\n\n  repository.assetNodes.forEach((definition: AssetNode) => {\n    const assetKeyJson = JSON.stringify(definition.assetKey.path);\n    definition.dependencies.forEach((dependency) => {\n      const upstreamAssetKeyJson = JSON.stringify(dependency.upstreamAsset.assetKey.path);\n      downstream[upstreamAssetKeyJson] = {\n        ...(downstream[upstreamAssetKeyJson] || {}),\n        [assetKeyJson]: dependency.inputName,\n      };\n      upstream[assetKeyJson] = {\n        ...(upstream[assetKeyJson] || {}),\n        [upstreamAssetKeyJson]: true,\n      };\n    });\n    nodes[assetKeyJson] = {\n      id: assetKeyJson,\n      assetKey: definition.assetKey,\n      definition,\n      hidden: !!selected && definition.jobName !== selected.definition.jobName,\n    };\n  });\n\n  return {nodes, downstream, upstream};\n};\n\nconst graphHasCycles = (graphData: GraphData) => {\n  const nodes = new Set(Object.keys(graphData.nodes));\n  const search = (stack: string[], node: string): boolean => {\n    if (stack.indexOf(node) !== -1) {\n      return true;\n    }\n    if (nodes.delete(node) === true) {\n      const nextStack = stack.concat(node);\n      return Object.keys(graphData.downstream[node] || {}).some((nextNode) =>\n        search(nextStack, nextNode),\n      );\n    }\n    return false;\n  };\n  let hasCycles = false;\n  while (nodes.size !== 0) {\n    hasCycles = hasCycles || search([], nodes.values().next().value);\n  }\n  return hasCycles;\n};\n\nconst layoutGraph = (graphData: GraphData) => {\n  const g = new dagre.graphlib.Graph();\n  const marginBase = 100;\n  const marginy = marginBase;\n  const marginx = marginBase;\n  g.setGraph({rankdir: 'TB', marginx, marginy});\n  g.setDefaultEdgeLabel(() => ({}));\n\n  Object.values(graphData.nodes)\n    .filter((x) => !x.hidden)\n    .forEach((node) => {\n      g.setNode(node.id, getNodeDimensions(node.definition));\n    });\n  const foreignNodes = {};\n  Object.keys(graphData.downstream).forEach((upstreamId) => {\n    const downstreamIds = Object.keys(graphData.downstream[upstreamId]);\n    downstreamIds.forEach((downstreamId) => {\n      if (graphData.nodes[downstreamId].hidden && graphData.nodes[upstreamId].hidden) {\n        return;\n      }\n      g.setEdge({v: upstreamId, w: downstreamId}, {weight: 1});\n      if (graphData.nodes[downstreamId].hidden) {\n        foreignNodes[downstreamId] = true;\n      } else if (graphData.nodes[upstreamId].hidden) {\n        foreignNodes[upstreamId] = true;\n      }\n    });\n  });\n\n  Object.keys(foreignNodes).forEach((upstreamId) => {\n    g.setNode(upstreamId, getBlankDimensions(upstreamId));\n  });\n\n  dagre.layout(g);\n\n  const dagreNodesById: {[id: string]: dagre.Node} = {};\n  g.nodes().forEach((id) => {\n    const node = g.node(id);\n    if (!node) {\n      return;\n    }\n    dagreNodesById[id] = node;\n  });\n\n  let maxWidth = 0;\n  let maxHeight = 0;\n  const nodes: LayoutNode[] = [];\n  Object.keys(dagreNodesById).forEach((id) => {\n    const dagreNode = dagreNodesById[id];\n    nodes.push({\n      id,\n      x: dagreNode.x - dagreNode.width / 2,\n      y: dagreNode.y - dagreNode.height / 2,\n    });\n    maxWidth = Math.max(maxWidth, dagreNode.x + dagreNode.width);\n    maxHeight = Math.max(maxHeight, dagreNode.y + dagreNode.height);\n  });\n\n  const edges: IEdge[] = [];\n  g.edges().forEach((e) => {\n    const points = g.edge(e).points;\n    edges.push({\n      from: points[0],\n      to: points[points.length - 1],\n      dashed: false,\n    });\n  });\n\n  return {\n    nodes,\n    edges,\n    width: maxWidth,\n    height: maxHeight + marginBase,\n  };\n};\n\nconst buildSVGPath = pathVerticalDiagonal({\n  source: (s: any) => s.source,\n  target: (s: any) => s.target,\n  x: (s: any) => s.x,\n  y: (s: any) => s.y,\n});\n\nexport const AssetGraphRoot: React.FC<Props> = (props) => {\n  const {repoAddress, selected} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const queryResult = useQuery(ASSETS_GRAPH_QUERY, {\n    variables: {repositorySelector},\n    notifyOnNetworkStatusChange: true,\n    pollInterval: POLL_INTERVAL,\n  });\n  const [nodeSelection, setSelectedNode] = React.useState<Node | undefined>();\n  const history = useHistory();\n  const match = useRouteMatch<{repoPath: string}>();\n  React.useEffect(() => {\n    if (!selected || !queryResult.data || !queryResult.data.repositoryOrError) {\n      return;\n    }\n    if (queryResult.data.repositoryOrError.__typename !== 'Repository') {\n      return;\n    }\n    const repository = queryResult.data.repositoryOrError;\n    repository.assetNodes.forEach((definition: AssetNode) => {\n      if (definition.id === selected) {\n        setSelectedNode({\n          id: JSON.stringify(definition.assetKey.path),\n          assetKey: definition.assetKey,\n          definition,\n          hidden: false,\n        });\n      }\n    });\n  }, [selected, queryResult]);\n\n  const selectNode = (node: Node) => {\n    if (!node) {\n      return;\n    }\n    setSelectedNode(node);\n    history.push(\n      `/workspace/${match.params.repoPath}/assets/${node.assetKey.path\n        .map(encodeURIComponent)\n        .join('/')}`,\n    );\n  };\n\n  useDocumentTitle('Assets');\n\n  return (\n    <Loading allowStaleData queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (repositoryOrError.__typename !== 'Repository') {\n          return (\n            <NonIdealState\n              icon={IconNames.ERROR}\n              title=\"Query Error\"\n              description={repositoryOrError.message}\n            />\n          );\n        }\n        const graphData = buildGraphData(repositoryOrError, nodeSelection);\n        const hasCycles = graphHasCycles(graphData);\n\n        if (hasCycles) {\n          return (\n            <NonIdealState title=\"Cycle detected\" description=\"Assets dependencies form a cycle\" />\n          );\n        }\n\n        const layout = layoutGraph(graphData);\n        const computeStatuses = buildGraphComputeStatuses(graphData);\n\n        const nodeSelectionPipeline =\n          nodeSelection && runForDisplay(nodeSelection.definition)?.pipelineName;\n        const samePipelineNodes = nodeSelectionPipeline\n          ? Object.values(graphData.nodes).filter(\n              (n) => runForDisplay(n.definition)?.pipelineName === nodeSelectionPipeline,\n            )\n          : [];\n\n        if (!Object.keys(graphData.nodes).length) {\n          return (\n            <NonIdealState\n              title=\"No assets defined\"\n              description=\"No assets defined using the @asset definition\"\n            />\n          );\n        }\n\n        return (\n          <SplitPanelContainer\n            identifier=\"assets\"\n            firstInitialPercent={70}\n            firstMinSize={600}\n            first={\n              <SVGViewport\n                interactor={SVGViewport.Interactors.PanAndZoom}\n                graphWidth={layout.width}\n                graphHeight={layout.height}\n                onKeyDown={() => {}}\n                onDoubleClick={() => {}}\n                maxZoom={1.2}\n                maxAutocenterZoom={1.0}\n              >\n                {({scale: _scale}: any) => (\n                  <SVGContainer width={layout.width} height={layout.height}>\n                    <defs>\n                      <marker\n                        id=\"arrow\"\n                        viewBox=\"0 0 10 10\"\n                        refX=\"1\"\n                        refY=\"5\"\n                        markerUnits=\"strokeWidth\"\n                        markerWidth=\"2\"\n                        markerHeight=\"4\"\n                        orient=\"auto\"\n                      >\n                        <path d=\"M 0 0 L 10 5 L 0 10 z\" fill={Colors.LIGHT_GRAY1} />\n                      </marker>\n                    </defs>\n                    <g opacity={0.8}>\n                      {layout.edges.map((edge, idx) => (\n                        <StyledPath\n                          key={idx}\n                          d={buildSVGPath({source: edge.from, target: edge.to})}\n                          dashed={edge.dashed}\n                          markerEnd=\"url(#arrow)\"\n                        />\n                      ))}\n                    </g>\n                    {layout.nodes.map((layoutNode) => {\n                      const graphNode = graphData.nodes[layoutNode.id];\n                      const {width, height} = graphNode.hidden\n                        ? getBlankDimensions(layoutNode.id)\n                        : getNodeDimensions(graphNode.definition);\n                      return (\n                        <foreignObject\n                          key={layoutNode.id}\n                          x={layoutNode.x}\n                          y={layoutNode.y}\n                          width={width}\n                          height={height}\n                          onClick={() => selectNode(graphNode)}\n                        >\n                          {graphNode.hidden ? (\n                            <ForeignNode assetKeyPath={JSON.parse(layoutNode.id)} />\n                          ) : (\n                            <AssetNode\n                              definition={graphNode.definition}\n                              selected={nodeSelection?.id === graphNode.id}\n                              secondaryHighlight={samePipelineNodes.includes(graphNode)}\n                              computeStatus={computeStatuses[graphNode.id]}\n                              repoAddress={repoAddress}\n                            />\n                          )}\n                        </foreignObject>\n                      );\n                    })}\n                  </SVGContainer>\n                )}\n              </SVGViewport>\n            }\n            second={\n              nodeSelection ? (\n                <AssetPanel node={nodeSelection} repoAddress={repoAddress} />\n              ) : (\n                <NonIdealState\n                  title=\"No asset selected\"\n                  description=\"Select an asset to see its definition and ops.\"\n                />\n              )\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst AssetPanel = ({node, repoAddress}: {node: Node; repoAddress: RepoAddress}) => {\n  return (\n    <div style={{overflowY: 'auto'}}>\n      <Box margin={32} style={{fontWeight: 'bold', fontSize: 18}}>\n        {node.assetKey.path.join(' > ')}\n      </Box>\n      <SidebarSection title=\"Definition\">\n        <Box margin={12}>\n          <Description description={node.definition.description || null} />\n        </Box>\n      </SidebarSection>\n      <SidebarSection title=\"Job\">\n        {node.definition.jobName ? (\n          <Box margin={12}>\n            <Box margin={{bottom: 8}}>\n              <Link\n                to={workspacePath(\n                  repoAddress.name,\n                  repoAddress.location,\n                  `/jobs/${node.definition.jobName}`,\n                )}\n              >\n                {node.definition.jobName}\n              </Link>\n            </Box>\n            <JobMetadata\n              repoAddress={repoAddress}\n              pipelineMode=\"default\"\n              pipelineName={node.definition.jobName}\n            />\n          </Box>\n        ) : null}\n      </SidebarSection>\n      <SidebarSection title={'Latest Materialization'}>\n        <Box margin={12}>\n          {node.definition.assetMaterializations.length ? (\n            <AssetDetails assetKey={node.assetKey} asOf={null} asSidebarSection />\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </Box>\n      </SidebarSection>\n\n      {node.definition.assetMaterializations.length ? (\n        <SidebarSection title={'Plots'}>\n          <Box margin={12}>\n            <AssetMaterializations assetKey={node.assetKey} asOf={null} asSidebarSection />\n          </Box>\n        </SidebarSection>\n      ) : null}\n    </div>\n  );\n};\n\nfunction runForDisplay(d: AssetNode) {\n  const run = d.assetMaterializations[0]?.runOrError;\n  return run && run.__typename === 'PipelineRun' ? run : null;\n}\n\nconst ASSETS_GRAPH_QUERY = gql`\n  query AssetGraphQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        name\n        location {\n          id\n          name\n        }\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          opName\n          description\n          jobName\n          dependencies {\n            inputName\n            upstreamAsset {\n              id\n              assetKey {\n                path\n              }\n            }\n          }\n          assetMaterializations(limit: 1) {\n            materializationEvent {\n              materialization {\n                metadataEntries {\n                  ...MetadataEntryFragment\n                }\n              }\n              stepStats {\n                stepKey\n                startTime\n                endTime\n              }\n            }\n            runOrError {\n              ... on PipelineRun {\n                id\n                runId\n                status\n                pipelineName\n                mode\n              }\n            }\n          }\n        }\n        pipelines {\n          id\n          name\n          modes {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n`;\nconst StyledPath = styled('path')<{dashed: boolean}>`\n  stroke-width: 4;\n  stroke: ${Colors.LIGHT_GRAY1};\n  ${({dashed}) => (dashed ? `stroke-dasharray: 8 2;` : '')}\n  fill: none;\n`;\n\nconst ForeignNode: React.FC<{assetKeyPath: string[]}> = ({assetKeyPath}) => (\n  <div\n    style={{\n      border: '1px dashed #aaaaaa',\n      background: 'white',\n      inset: 0,\n    }}\n  >\n    <div\n      style={{\n        display: 'flex',\n        padding: '4px 8px 6px',\n        fontFamily: FontFamily.monospace,\n        fontWeight: 600,\n      }}\n    >\n      {assetKeyPath.join(' > ')}\n    </div>\n  </div>\n);\n\nconst AssetNode: React.FC<{\n  definition: AssetNode;\n  selected: boolean;\n  computeStatus: Status;\n  repoAddress: RepoAddress;\n  secondaryHighlight: boolean;\n}> = ({definition, selected, computeStatus, repoAddress, secondaryHighlight}) => {\n  const [launchPipelineExecution] = useMutation<LaunchPipelineExecution>(\n    LAUNCH_PIPELINE_EXECUTION_MUTATION,\n  );\n  const {basePath} = React.useContext(AppContext);\n  const {materializationEvent: event, runOrError} = definition.assetMaterializations[0] || {};\n\n  const onLaunch = async () => {\n    if (!definition.jobName) {\n      return;\n    }\n\n    try {\n      const result = await launchPipelineExecution({\n        variables: {\n          executionParams: {\n            selector: {\n              pipelineName: definition.jobName,\n              ...repoAddressToSelector(repoAddress),\n            },\n            mode: 'default',\n            stepKeys: [definition.opName],\n          },\n        },\n      });\n      handleLaunchResult(basePath, definition.jobName, result, true);\n    } catch (error) {\n      showLaunchError(error as Error);\n    }\n  };\n  return (\n    <ContextMenu\n      content={\n        <Menu>\n          <MenuItem\n            text={\n              <span>\n                Launch run to build{' '}\n                <span style={{fontFamily: 'monospace', fontWeight: 600}}>\n                  {definition.assetKey.path.join(' > ')}\n                </span>\n              </span>\n            }\n            icon=\"send-to\"\n            onClick={onLaunch}\n          />\n        </Menu>\n      }\n    >\n      <div\n        style={{\n          border: '1px solid #ececec',\n          outline: selected\n            ? `2px solid ${Colors.BLUE4}`\n            : secondaryHighlight\n            ? `2px solid ${Colors.BLUE4}55`\n            : 'none',\n          marginTop: 10,\n          marginRight: 4,\n          marginLeft: 4,\n          marginBottom: 2,\n          position: 'absolute',\n          background: 'white',\n          inset: 0,\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            padding: '4px 8px',\n            fontFamily: FontFamily.monospace,\n            fontWeight: 600,\n          }}\n        >\n          {definition.assetKey.path.join(' > ')}\n          <div style={{flex: 1}} />\n          <div\n            title=\"Green if this asset has been materialized since its upstream dependencies.\"\n            style={{\n              background: {\n                old: 'orange',\n                good: 'green',\n                none: '#ccc',\n              }[computeStatus],\n              borderRadius: 7.5,\n              width: 15,\n              height: 15,\n            }}\n          />\n        </div>\n        {definition.description && (\n          <div\n            style={{\n              background: '#EFF4F7',\n              padding: '4px 8px',\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              borderTop: '1px solid #ccc',\n              fontSize: 12,\n            }}\n          >\n            {definition.description}\n          </div>\n        )}\n        {event ? (\n          <div\n            style={{\n              background: '#E1EAF0',\n              padding: '4px 8px',\n              borderTop: '1px solid #ccc',\n              fontSize: 12,\n              lineHeight: '18px',\n            }}\n          >\n            {runOrError.__typename === 'PipelineRun' && (\n              <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                <Link\n                  data-tooltip={`${runOrError.pipelineName}${\n                    runOrError.mode !== 'default' ? `:${runOrError.mode}` : ''\n                  }`}\n                  data-tooltip-style={RunLinkTooltipStyle}\n                  style={{flex: 1, overflow: 'hidden', textOverflow: 'ellipsis', paddingRight: 8}}\n                  to={workspacePath(\n                    repoAddress.name,\n                    repoAddress.location,\n                    `jobs/${runOrError.pipelineName}:${runOrError.mode}`,\n                  )}\n                >\n                  {`${runOrError.pipelineName}${\n                    runOrError.mode !== 'default' ? `:${runOrError.mode}` : ''\n                  }`}\n                </Link>\n                <Link\n                  style={{fontFamily: FontFamily.monospace}}\n                  to={`/instance/runs/${runOrError.runId}?${qs.stringify({\n                    timestamp: event.stepStats.endTime,\n                    selection: event.stepStats.stepKey,\n                    logs: `step:${event.stepStats.stepKey}`,\n                  })}`}\n                  target=\"_blank\"\n                >\n                  {titleForRun({runId: runOrError.runId})}\n                </Link>\n              </div>\n            )}\n\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n              {event.stepStats.endTime ? (\n                <TimestampDisplay\n                  timestamp={event.stepStats.endTime}\n                  timeFormat={{showSeconds: false, showTimezone: false}}\n                />\n              ) : (\n                'Never'\n              )}\n              <TimeElapsed\n                startUnix={event.stepStats.startTime}\n                endUnix={event.stepStats.endTime}\n              />\n            </div>\n          </div>\n        ) : (\n          <span></span>\n        )}\n      </div>\n    </ContextMenu>\n  );\n};\n\nfunction buildGraphComputeStatuses(graphData: GraphData) {\n  const timestamps: {[key: string]: number} = {};\n  for (const node of Object.values(graphData.nodes)) {\n    timestamps[node.id] =\n      node.definition.assetMaterializations[0]?.materializationEvent.stepStats?.startTime || 0;\n  }\n  const upstream: {[key: string]: string[]} = {};\n  Object.keys(graphData.downstream).forEach((upstreamId) => {\n    const downstreamIds = Object.keys(graphData.downstream[upstreamId]);\n\n    downstreamIds.forEach((downstreamId) => {\n      upstream[downstreamId] = upstream[downstreamId] || [];\n      upstream[downstreamId].push(upstreamId);\n    });\n  });\n\n  const statuses: {[key: string]: Status} = {};\n\n  for (const asset of Object.values(graphData.nodes)) {\n    if (asset.definition.assetMaterializations.length === 0) {\n      statuses[asset.id] = 'none';\n    }\n  }\n  for (const asset of Object.values(graphData.nodes)) {\n    const id = JSON.stringify(asset.assetKey.path);\n    statuses[id] = findComputeStatusForId(timestamps, statuses, upstream, id);\n  }\n  return statuses;\n}\n\ntype Status = 'good' | 'old' | 'none';\n\nfunction findComputeStatusForId(\n  timestamps: {[key: string]: number},\n  statuses: {[key: string]: Status},\n  upstream: {[key: string]: string[]},\n  id: string,\n): Status {\n  const ts = timestamps[id];\n  const upstreamIds = upstream[id] || [];\n  if (id in statuses) {\n    return statuses[id];\n  }\n\n  statuses[id] = upstreamIds.some((uid) => timestamps[uid] > ts)\n    ? 'old'\n    : upstreamIds.some(\n        (uid) => findComputeStatusForId(timestamps, statuses, upstream, uid) !== 'good',\n      )\n    ? 'old'\n    : 'good';\n\n  return statuses[id];\n}\n\nconst RunLinkTooltipStyle = JSON.stringify({\n  background: '#E1EAF0',\n  padding: '4px 8px',\n  marginLeft: -10,\n  marginTop: -8,\n  fontSize: 13,\n  color: Colors.BLUE2,\n  border: 0,\n  borderRadius: 4,\n} as CSSProperties);\n","import React from 'react';\nimport {Link, RouteComponentProps} from 'react-router-dom';\n\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineExplorerRegexRoot} from '../pipelines/PipelineExplorerRoot';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {PageHeader} from '../ui/PageHeader';\nimport {Heading} from '../ui/Text';\n\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props extends RouteComponentProps {\n  repoAddress: RepoAddress;\n}\n\nexport const GraphRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const path = explorerPathFromString(props.match.params[0]);\n\n  // Show the name of the composite solid we are within (-1 is the selection, -2 is current parent)\n  // or the name of the pipeline tweaked to look a bit more like a graph name.\n  const title =\n    path.pathSolids.length > 1 ? path.pathSolids[path.pathSolids.length - 2] : path.pipelineName;\n\n  return (\n    <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      <div style={{padding: 20, borderBottom: '1px solid #ccc'}}>\n        <PageHeader\n          title={<Heading>{title}</Heading>}\n          description={\n            <>\n              <Link to={workspacePathFromAddress(repoAddress, '/graphs')}>Graph</Link> in{' '}\n              <RepositoryLink repoAddress={repoAddress} />\n            </>\n          }\n          icon=\"schema\"\n        />\n      </div>\n      <div style={{position: 'relative', minHeight: 0, flex: 1, display: 'flex'}}>\n        <PipelineExplorerRegexRoot {...props} repoAddress={repoAddress} />\n      </div>\n    </div>\n  );\n};\n","import {gql, useApolloClient, useMutation} from '@apollo/client';\nimport {Intent} from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {useInvalidateConfigsForRepo} from '../app/LocalStorage';\nimport {PYTHON_ERROR_FRAGMENT, UNAUTHORIZED_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\n\nimport {\n  ReloadWorkspaceMutation,\n  ReloadWorkspaceMutation_reloadWorkspace_Workspace_locationEntries_locationOrLoadError_RepositoryLocation_repositories as Repository,\n} from './types/ReloadWorkspaceMutation';\n\nexport const useReloadWorkspace = () => {\n  const apollo = useApolloClient();\n  const [reloading, setReloading] = React.useState(false);\n  const [reload] = useMutation<ReloadWorkspaceMutation>(RELOAD_WORKSPACE_MUTATION);\n  const invalidateConfigs = useInvalidateConfigsForRepo();\n\n  const onClick = async (e: React.MouseEvent | React.KeyboardEvent) => {\n    e.stopPropagation();\n\n    setReloading(true);\n    const {data} = await reload();\n    setReloading(false);\n\n    if (\n      !data ||\n      data?.reloadWorkspace.__typename === 'PythonError' ||\n      data?.reloadWorkspace.__typename === 'UnauthorizedError'\n    ) {\n      SharedToaster.show({\n        message: 'Could not reload workspace.',\n        timeout: 3000,\n        icon: 'refresh',\n        intent: Intent.DANGER,\n      });\n      return;\n    }\n\n    const {locationEntries} = data.reloadWorkspace;\n    SharedToaster.show({\n      message: 'Workspace reloaded',\n      timeout: 3000,\n      icon: 'refresh',\n      intent: Intent.SUCCESS,\n    });\n\n    const reposToInvalidate = locationEntries.reduce((accum, locationEntry) => {\n      if (locationEntry.locationOrLoadError?.__typename === 'RepositoryLocation') {\n        return [...accum, ...locationEntry.locationOrLoadError.repositories];\n      }\n      return accum;\n    }, [] as Repository[]);\n\n    invalidateConfigs(reposToInvalidate);\n    apollo.resetStore();\n  };\n\n  return {reloading, onClick};\n};\n\nconst RELOAD_WORKSPACE_MUTATION = gql`\n  mutation ReloadWorkspaceMutation {\n    reloadWorkspace {\n      ... on Workspace {\n        locationEntries {\n          __typename\n          name\n          id\n          loadStatus\n          locationOrLoadError {\n            __typename\n            ... on RepositoryLocation {\n              id\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                }\n              }\n            }\n            ... on PythonError {\n              message\n            }\n          }\n        }\n      }\n      ...UnauthorizedErrorFragment\n      ...PythonErrorFragment\n    }\n  }\n  ${UNAUTHORIZED_ERROR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Button} from '@blueprintjs/core';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport * as React from 'react';\n\nimport {DISABLED_MESSAGE, usePermissions} from '../app/Permissions';\nimport {IconWIP} from '../ui/Icon';\n\nimport {useReloadWorkspace} from './useReloadWorkspace';\n\nexport const ReloadAllButton = () => {\n  const {reloading, onClick} = useReloadWorkspace();\n  const {canReloadWorkspace} = usePermissions();\n\n  if (!canReloadWorkspace) {\n    return (\n      <Tooltip content={DISABLED_MESSAGE}>\n        <Button icon={<IconWIP name=\"refresh\" />} disabled text=\"Reload all\" small intent=\"none\" />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Button\n      onClick={onClick}\n      icon={<IconWIP name=\"refresh\" />}\n      loading={reloading}\n      text=\"Reload all\"\n      small\n      intent=\"none\"\n    />\n  );\n};\n","import {Button, Colors, NonIdealState, Tag} from '@blueprintjs/core';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport React from 'react';\n\nimport {DISABLED_MESSAGE, usePermissions} from '../app/Permissions';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {ReloadRepositoryLocationButton} from '../nav/ReloadRepositoryLocationButton';\nimport {useRepositoryLocationReload} from '../nav/useRepositoryLocationReload';\nimport {ButtonLink} from '../ui/ButtonLink';\nimport {Group} from '../ui/Group';\nimport {IconWIP} from '../ui/Icon';\nimport {Table} from '../ui/Table';\nimport {Caption} from '../ui/Text';\n\nimport {RepositoryLocationNonBlockingErrorDialog} from './RepositoryLocationErrorDialog';\nimport {WorkspaceContext} from './WorkspaceContext';\nimport {RootRepositoriesQuery_workspaceOrError_Workspace_locationEntries as LocationOrError} from './types/RootRepositoriesQuery';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: true};\n\nconst LocationStatus: React.FC<{location: string; locationOrError: LocationOrError}> = (props) => {\n  const {location, locationOrError} = props;\n  const [showDialog, setShowDialog] = React.useState(false);\n  const {reloading, tryReload} = useRepositoryLocationReload(location);\n\n  if (locationOrError.loadStatus === 'LOADING') {\n    if (locationOrError.locationOrLoadError) {\n      return (\n        <Tag minimal intent=\"primary\">\n          Updating...\n        </Tag>\n      );\n    } else {\n      return (\n        <Tag minimal intent=\"primary\">\n          Loading...\n        </Tag>\n      );\n    }\n  }\n\n  if (locationOrError.locationOrLoadError?.__typename === 'PythonError') {\n    return (\n      <>\n        <div style={{display: 'flex', alignItems: 'start'}}>\n          <Tag minimal intent=\"danger\">\n            Failed\n          </Tag>\n          <div style={{fontSize: '14px', marginLeft: '8px'}}>\n            <ButtonLink onClick={() => setShowDialog(true)}>View error</ButtonLink>\n          </div>\n        </div>\n        <RepositoryLocationNonBlockingErrorDialog\n          location={location}\n          isOpen={showDialog}\n          error={locationOrError.locationOrLoadError}\n          reloading={reloading}\n          onDismiss={() => setShowDialog(false)}\n          onTryReload={() => tryReload()}\n        />\n      </>\n    );\n  }\n\n  return (\n    <Tag minimal intent=\"success\">\n      Loaded\n    </Tag>\n  );\n};\n\nconst ReloadButton: React.FC<{\n  location: string;\n}> = (props) => {\n  const {location} = props;\n  const {canReloadRepositoryLocation} = usePermissions();\n\n  if (!canReloadRepositoryLocation) {\n    return (\n      <Tooltip content={DISABLED_MESSAGE}>\n        <ButtonLink color={Colors.GRAY3}>Reload</ButtonLink>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <ReloadRepositoryLocationButton location={location}>\n      {({reloading, tryReload}) => (\n        <Button\n          onClick={() => tryReload()}\n          loading={reloading}\n          icon={<IconWIP name=\"refresh\" />}\n          text=\"Reload\"\n          small\n          minimal\n          style={{marginTop: '-4px'}}\n        />\n      )}\n    </ReloadRepositoryLocationButton>\n  );\n};\n\nexport const RepositoryLocationsList = () => {\n  const {locationEntries, loading} = React.useContext(WorkspaceContext);\n\n  if (loading && !locationEntries.length) {\n    return <div style={{color: Colors.GRAY3}}>Loading…</div>;\n  }\n\n  if (!locationEntries.length) {\n    return <NonIdealState icon=\"cube\" title=\"No repository locations!\" />;\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Repository location</th>\n          <th>Status</th>\n          <th colSpan={2}>Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {locationEntries.map((location) => (\n          <tr key={location.name}>\n            <td style={{maxWidth: '50%'}}>\n              <Group direction=\"column\" spacing={4}>\n                <strong>{location.name}</strong>\n                <div>\n                  {location.displayMetadata.map((metadata, idx) => (\n                    <div key={idx}>\n                      <Caption style={{wordBreak: 'break-word'}}>\n                        {`${metadata.key}: `}\n                        <span style={{color: Colors.GRAY3}}>{metadata.value}</span>\n                      </Caption>\n                    </div>\n                  ))}\n                </div>\n              </Group>\n            </td>\n            <td>\n              <LocationStatus location={location.name} locationOrError={location} />\n            </td>\n            <td style={{whiteSpace: 'nowrap'}}>\n              <Timestamp timestamp={{unix: location.updatedTimestamp}} timeFormat={TIME_FORMAT} />\n            </td>\n            <td>\n              <ReloadButton location={location.name} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","import {NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {Group} from '../ui/Group';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {Page} from '../ui/Page';\nimport {PageHeader} from '../ui/PageHeader';\nimport {Table} from '../ui/Table';\nimport {Heading, Subheading} from '../ui/Text';\n\nimport {ReloadAllButton} from './ReloadAllButton';\nimport {RepositoryLocationsList} from './RepositoryLocationsList';\nimport {useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPath} from './buildRepoAddress';\nimport {workspacePath} from './workspacePath';\n\nexport const WorkspaceOverviewRoot = () => {\n  const {loading, error, options} = useRepositoryOptions();\n  const {flagPipelineModeTuples, flagAssetGraph} = useFeatureFlags();\n\n  const content = () => {\n    if (loading) {\n      return <LoadingSpinner purpose=\"page\" />;\n    }\n\n    if (error) {\n      return (\n        <NonIdealState\n          icon=\"cube\"\n          title=\"Error loading repositories\"\n          description=\"Could not load repositories in this workspace.\"\n        />\n      );\n    }\n\n    if (!options.length) {\n      return (\n        <NonIdealState\n          icon=\"cube\"\n          title=\"Empty workspace\"\n          description=\"There are no repositories in this workspace.\"\n        />\n      );\n    }\n\n    return (\n      <Table>\n        <thead>\n          <tr>\n            <th>Repository</th>\n            {flagPipelineModeTuples ? (\n              <>\n                <th>Jobs</th>\n                <th>Graphs</th>\n              </>\n            ) : (\n              <th>Pipelines</th>\n            )}\n            <th>{flagPipelineModeTuples ? 'Ops' : 'Solids'}</th>\n            {flagAssetGraph ? <th>Assets</th> : null}\n            <th>Schedules</th>\n            <th>Sensors</th>\n          </tr>\n        </thead>\n        <tbody>\n          {options.map((repository) => {\n            const {\n              repository: {name},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPath(name, location);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                {flagPipelineModeTuples ? (\n                  <>\n                    <td>\n                      <Link to={workspacePath(name, location, '/jobs')}>Jobs</Link>\n                    </td>\n                    <td>\n                      <Link to={workspacePath(name, location, '/graphs')}>Graphs</Link>\n                    </td>\n                  </>\n                ) : (\n                  <td>\n                    <Link to={workspacePath(name, location, '/pipelines')}>Pipelines</Link>\n                  </td>\n                )}\n                <td>\n                  <Link\n                    to={workspacePath(name, location, flagPipelineModeTuples ? '/ops' : '/solids')}\n                  >\n                    {flagPipelineModeTuples ? 'Ops' : 'Solids'}\n                  </Link>\n                </td>\n                {flagAssetGraph ? (\n                  <td>\n                    <Link to={workspacePath(name, location, '/assets')}>Assets</Link>\n                  </td>\n                ) : null}\n                <td>\n                  <Link to={workspacePath(name, location, '/schedules')}>Schedules</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/sensors')}>Sensors</Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  };\n\n  return (\n    <Page>\n      <Group direction=\"column\" spacing={16}>\n        <PageHeader title={<Heading>Workspace</Heading>} />\n        <Group direction=\"column\" spacing={16}>\n          <Group direction=\"row\" spacing={12} alignItems=\"center\">\n            <Subheading id=\"repository-locations\">Locations</Subheading>\n            <ReloadAllButton />\n          </Group>\n          <RepositoryLocationsList />\n        </Group>\n        <Subheading id=\"repository-locations\">Repositories</Subheading>\n        {content()}\n      </Group>\n    </Page>\n  );\n};\n","import {NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Link, Redirect, useLocation, useRouteMatch} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {Alert} from '../ui/Alert';\nimport {Box} from '../ui/Box';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {Page} from '../ui/Page';\nimport {PageHeader} from '../ui/PageHeader';\nimport {Table} from '../ui/Table';\nimport {Heading} from '../ui/Text';\n\nimport {optionToRepoAddress, useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPath} from './buildRepoAddress';\nimport {findRepoContainingPipeline} from './findRepoContainingPipeline';\nimport {workspacePath, workspacePathFromAddress} from './workspacePath';\n\ninterface Props {\n  pipelinePath: string;\n}\n\nexport const WorkspacePipelineRoot: React.FC<Props> = (props) => {\n  const {pipelinePath} = props;\n  const entireMatch = useRouteMatch(['/workspace/pipelines/(/?.*)', '/workspace/jobs/(/?.*)']);\n  const location = useLocation();\n\n  const toAppend = entireMatch!.params[0];\n  const {search} = location;\n\n  const {pipelineName} = explorerPathFromString(pipelinePath);\n  const {loading, options} = useRepositoryOptions();\n  const {flagPipelineModeTuples} = useFeatureFlags();\n\n  if (loading) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  const reposWithMatch = findRepoContainingPipeline(options, pipelineName);\n  if (reposWithMatch.length === 0) {\n    return (\n      <NonIdealState\n        icon=\"cube\"\n        title={flagPipelineModeTuples ? 'No matching jobs' : 'No matching pipelines'}\n        description={\n          <div>\n            <div>\n              <strong>{pipelineName}</strong>\n            </div>\n            was not found in any repositories in this workspace.\n          </div>\n        }\n      />\n    );\n  }\n\n  if (reposWithMatch.length === 1) {\n    const repoAddress = optionToRepoAddress(reposWithMatch[0]);\n    const to = workspacePathFromAddress(repoAddress, `/pipelines/${toAppend}${search}`);\n    return <Redirect to={to} />;\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        icon={flagPipelineModeTuples ? 'workspaces' : 'schema'}\n        description={\n          flagPipelineModeTuples\n            ? 'Job in multiple repositories'\n            : 'Pipeline in multiple repositories'\n        }\n      />\n      <Box margin={{vertical: 20}}>\n        <Alert\n          intent=\"info\"\n          title={\n            <div>\n              {flagPipelineModeTuples ? (\n                <>\n                  Jobs named <strong>{pipelineName}</strong> were found in multiple repositories.\n                </>\n              ) : (\n                <>\n                  Pipelines named <strong>{pipelineName}</strong> were found in multiple\n                  repositories.\n                </>\n              )}\n            </div>\n          }\n        />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th>Repository name and location</th>\n            <th>{flagPipelineModeTuples ? 'Job' : 'Pipeline'}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reposWithMatch.map((repository) => {\n            const {\n              repository: {name},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPath(name, location);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link to={workspacePath(name, location, `/pipelines/${pipelineName}`)}>\n                    {pipelineName}\n                  </Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n","import {useQuery} from '@apollo/client';\nimport {Colors, NonIdealState} from '@blueprintjs/core';\nimport {IconNames} from '@blueprintjs/icons';\nimport * as React from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Box} from '../ui/Box';\nimport {Group} from '../ui/Group';\nimport {Loading} from '../ui/Loading';\nimport {Page} from '../ui/Page';\nimport {Subheading} from '../ui/Text';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SCHEDULES_ROOT_QUERY, SchedulerTimezoneNote} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {SchedulesNextTicks} from './SchedulesNextTicks';\nimport {SchedulesTable} from './SchedulesTable';\nimport {SchedulesRootQuery} from './types/SchedulesRootQuery';\n\nexport const SchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useDocumentTitle('Schedules');\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SchedulesRootQuery>(SCHEDULES_ROOT_QUERY, {\n    variables: {\n      repositorySelector: repositorySelector,\n      instigationType: InstigationType.SCHEDULE,\n    },\n    fetchPolicy: 'cache-and-network',\n    pollInterval: 50 * 1000,\n    partialRefetch: true,\n  });\n\n  return (\n    <Page>\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {(result) => {\n          const {\n            repositoryOrError,\n            scheduler,\n            unloadableInstigationStatesOrError,\n            instance,\n          } = result;\n          let schedulesSection = null;\n\n          if (repositoryOrError.__typename === 'PythonError') {\n            schedulesSection = <PythonErrorInfo error={repositoryOrError} />;\n          } else if (repositoryOrError.__typename === 'RepositoryNotFoundError') {\n            schedulesSection = (\n              <NonIdealState\n                icon={IconNames.ERROR}\n                title=\"Repository not found\"\n                description=\"Could not load this repository.\"\n              />\n            );\n          } else if (!repositoryOrError.schedules.length) {\n            schedulesSection = (\n              <NonIdealState\n                icon={IconNames.TIME}\n                title=\"No schedules found\"\n                description={\n                  <p>\n                    This repository does not have any schedules defined. Visit the{' '}\n                    <a href=\"https://docs.dagster.io/overview/schedules-sensors/schedules\">\n                      scheduler documentation\n                    </a>{' '}\n                    for more information about scheduling runs in Dagster.\n                  </p>\n                }\n              />\n            );\n          } else {\n            schedulesSection = repositoryOrError.schedules.length > 0 && (\n              <Group direction=\"column\" spacing={16}>\n                <SchedulerTimezoneNote schedulerOrError={scheduler} />\n                <SchedulesTable schedules={repositoryOrError.schedules} repoAddress={repoAddress} />\n                <Box\n                  margin={{vertical: 16}}\n                  padding={{bottom: 8}}\n                  border={{side: 'bottom', width: 1, color: Colors.LIGHT_GRAY3}}\n                >\n                  <Subheading>Scheduled ticks</Subheading>\n                </Box>\n                <SchedulesNextTicks repos={[repositoryOrError]} />\n              </Group>\n            );\n          }\n\n          return (\n            <Group direction=\"column\" spacing={20}>\n              <SchedulerInfo schedulerOrError={scheduler} daemonHealth={instance.daemonHealth} />\n              {schedulesSection}\n              {unloadableInstigationStatesOrError.__typename === 'PythonError' ? (\n                <PythonErrorInfo error={unloadableInstigationStatesOrError} />\n              ) : (\n                <UnloadableSchedules scheduleStates={unloadableInstigationStatesOrError.results} />\n              )}\n            </Group>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n","import {useQuery, gql} from '@apollo/client';\nimport {NonIdealState} from '@blueprintjs/core';\nimport {IconNames} from '@blueprintjs/icons';\nimport React from 'react';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Group} from '../ui/Group';\nimport {Loading} from '../ui/Loading';\nimport {Page} from '../ui/Page';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorsTable} from './SensorsTable';\nimport {SensorsRootQuery} from './types/SensorsRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const SensorsRoot = (props: Props) => {\n  const {repoAddress} = props;\n  useDocumentTitle('Sensors');\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SensorsRootQuery>(SENSORS_ROOT_QUERY, {\n    variables: {\n      repositorySelector: repositorySelector,\n      instigationType: InstigationType.SENSOR,\n    },\n    fetchPolicy: 'cache-and-network',\n    pollInterval: 50 * 1000,\n    partialRefetch: true,\n  });\n\n  return (\n    <Page>\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {(result) => {\n          const {sensorsOrError, unloadableInstigationStatesOrError, instance} = result;\n          const content = () => {\n            if (sensorsOrError.__typename === 'PythonError') {\n              return <PythonErrorInfo error={sensorsOrError} />;\n            } else if (unloadableInstigationStatesOrError.__typename === 'PythonError') {\n              return <PythonErrorInfo error={unloadableInstigationStatesOrError} />;\n            } else if (sensorsOrError.__typename === 'RepositoryNotFoundError') {\n              return (\n                <NonIdealState\n                  icon={IconNames.ERROR}\n                  title=\"Repository not found\"\n                  description=\"Could not load this repository.\"\n                />\n              );\n            } else if (!sensorsOrError.results.length) {\n              return (\n                <NonIdealState\n                  icon={IconNames.AUTOMATIC_UPDATES}\n                  title=\"No Sensors Found\"\n                  description={\n                    <p>\n                      This repository does not have any sensors defined. Visit the{' '}\n                      <a\n                        href=\"https://docs.dagster.io/overview/schedules-sensors/sensors\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        sensors documentation\n                      </a>{' '}\n                      for more information about creating sensors in Dagster.\n                    </p>\n                  }\n                />\n              );\n            } else {\n              return (\n                <Group direction=\"column\" spacing={20}>\n                  {sensorsOrError.results.length > 0 && (\n                    <SensorInfo daemonHealth={instance.daemonHealth} />\n                  )}\n                  <SensorsTable repoAddress={repoAddress} sensors={sensorsOrError.results} />\n                  <UnloadableSensors sensorStates={unloadableInstigationStatesOrError.results} />\n                </Group>\n              );\n            }\n          };\n\n          return <div>{content()}</div>;\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst SENSORS_ROOT_QUERY = gql`\n  query SensorsRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    sensorsOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ...PythonErrorFragment\n      ... on Sensors {\n        results {\n          id\n          ...SensorFragment\n        }\n      }\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {SolidNode, SOLID_NODE_DEFINITION_FRAGMENT} from '../graph/SolidNode';\nimport {layoutSolid} from '../graph/getFullSolidLayout';\n\nimport {SolidCardSolidDefinitionFragment} from './types/SolidCardSolidDefinitionFragment';\n\ninterface SolidCardProps {\n  definition: SolidCardSolidDefinitionFragment;\n}\n\nexport const SolidCard: React.FC<SolidCardProps> = (props) => {\n  const {name, inputDefinitions, outputDefinitions} = props.definition;\n  const layout = layoutSolid(\n    {\n      name: name,\n      inputs: inputDefinitions.map((d) => ({\n        definition: d,\n        dependsOn: [],\n      })),\n      outputs: outputDefinitions.map((d) => ({\n        definition: d,\n        dependedBy: [],\n      })),\n    },\n    {x: 0, y: 0},\n  );\n\n  return (\n    <SolidCardContainer>\n      <SVGContainer width={layout.boundingBox.width} height={layout.boundingBox.height}>\n        <SolidNode\n          invocation={undefined}\n          definition={props.definition}\n          minified={false}\n          onClick={() => {}}\n          onDoubleClick={() => {}}\n          onEnterComposite={() => {}}\n          onHighlightEdges={() => {}}\n          layout={layout}\n          selected={false}\n          focused={false}\n          highlightedEdges={[]}\n          dim={false}\n        />\n      </SVGContainer>\n    </SolidCardContainer>\n  );\n};\n\nexport const SOLID_CARD_SOLID_DEFINITION_FRAGMENT = gql`\n  fragment SolidCardSolidDefinitionFragment on ISolidDefinition {\n    ...SolidNodeDefinitionFragment\n    __typename\n    name\n    description\n    metadata {\n      key\n      value\n    }\n    inputDefinitions {\n      name\n    }\n    outputDefinitions {\n      name\n    }\n  }\n\n  ${SOLID_NODE_DEFINITION_FRAGMENT}\n`;\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n  display: block;\n`;\n\nconst SolidCardContainer = styled.div`\n  flex: 1;\n  padding: 20px;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  max-width: 450px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {\n  SidebarSolidDefinition,\n  SIDEBAR_SOLID_DEFINITION_FRAGMENT,\n} from '../pipelines/SidebarSolidDefinition';\nimport {SidebarSolidInvocationInfo} from '../pipelines/SidebarSolidHelpers';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SolidCard, SOLID_CARD_SOLID_DEFINITION_FRAGMENT} from './SolidCard';\nimport {UsedSolidDetailsQuery} from './types/UsedSolidDetailsQuery';\n\ninterface UsedSolidDetailsProps {\n  name: string;\n  onClickInvocation: (arg: SidebarSolidInvocationInfo) => void;\n  repoAddress: RepoAddress;\n}\n\nexport const UsedSolidDetails: React.FC<UsedSolidDetailsProps> = (props) => {\n  const {name, onClickInvocation, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<UsedSolidDetailsQuery>(USED_SOLID_DETAILS_QUERY, {\n    variables: {\n      name,\n      repositorySelector,\n    },\n  });\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (!(repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolid)) {\n          return null;\n        }\n        const usedSolid = repositoryOrError.usedSolid;\n        return (\n          <>\n            <SolidCard definition={usedSolid.definition} />\n            <SidebarSolidDefinition\n              definition={usedSolid.definition}\n              showingSubsolids={false}\n              onClickInvocation={onClickInvocation}\n              getInvocations={() => {\n                return usedSolid.invocations.map((i) => ({\n                  handleID: i.solidHandle.handleID,\n                  pipelineName: i.pipeline.name,\n                }));\n              }}\n            />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst USED_SOLID_DETAILS_QUERY = gql`\n  query UsedSolidDetailsQuery($name: String!, $repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolid(name: $name) {\n          __typename\n          definition {\n            ...SolidCardSolidDefinitionFragment\n            ...SidebarSolidDefinitionFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${SOLID_CARD_SOLID_DEFINITION_FRAGMENT}\n  ${SIDEBAR_SOLID_DEFINITION_FRAGMENT}\n`;\n\nexport const SolidDetailScrollContainer = styled.div`\n  overflow: scroll;\n  flex: 1;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, NonIdealState} from '@blueprintjs/core';\nimport * as querystring from 'query-string';\nimport * as React from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {AutoSizer, CellMeasurer, CellMeasurerCache, List} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {Loading} from '../ui/Loading';\nimport {SplitPanelContainer} from '../ui/SplitPanelContainer';\nimport {\n  SuggestionProvider,\n  TokenizingField,\n  TokenizingFieldValue,\n  stringFromValue,\n  tokenizedValuesFromString,\n} from '../ui/TokenizingField';\nimport {FontFamily} from '../ui/styles';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {SolidDetailScrollContainer, UsedSolidDetails} from './SolidDetailsRoot';\nimport {SolidTypeSignature, SOLID_TYPE_SIGNATURE_FRAGMENT} from './SolidTypeSignature';\nimport {\n  SolidsRootQuery,\n  SolidsRootQuery_repositoryOrError_Repository_usedSolids,\n} from './types/SolidsRootQuery';\n\nfunction flatUniq(arrs: string[][]) {\n  const results: {[key: string]: boolean} = {};\n  for (const arr of arrs) {\n    for (const item of arr) {\n      results[item] = true;\n    }\n  }\n  return Object.keys(results).sort((a, b) => a.localeCompare(b));\n}\n\ntype Solid = SolidsRootQuery_repositoryOrError_Repository_usedSolids;\n\nfunction searchSuggestionsForSolids(solids: Solid[], crag: boolean): SuggestionProvider[] {\n  return [\n    {\n      token: 'name',\n      values: () => solids.map((s) => s.definition.name),\n    },\n    {\n      token: crag ? 'job' : 'pipeline',\n      values: () => flatUniq(solids.map((s) => s.invocations.map((i) => i.pipeline.name))),\n    },\n    {\n      token: 'input',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.inputDefinitions.map((d) => d.type.displayName))),\n    },\n    {\n      token: 'output',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.outputDefinitions.map((d) => d.type.displayName))),\n    },\n  ];\n}\n\nfunction filterSolidsWithSearch(solids: Solid[], search: TokenizingFieldValue[]) {\n  return solids.filter((s) => {\n    for (const item of search) {\n      if (\n        (item.token === 'name' || item.token === undefined) &&\n        !s.definition.name.startsWith(item.value)\n      ) {\n        return false;\n      }\n      if (\n        (item.token === 'pipeline' || item.token === 'job') &&\n        !s.invocations.some((i) => i.pipeline.name === item.value)\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'input' &&\n        !s.definition.inputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'output' &&\n        !s.definition.outputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ninterface Props {\n  name?: string;\n  repoAddress: RepoAddress;\n}\n\nexport const SolidsRoot: React.FC<Props> = (props) => {\n  const {name, repoAddress} = props;\n  const {flagPipelineModeTuples} = useFeatureFlags();\n\n  useDocumentTitle(flagPipelineModeTuples ? 'Ops' : 'Solids');\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SolidsRootQuery>(SOLIDS_ROOT_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolids) {\n          return (\n            <SolidsRootWithData\n              {...props}\n              name={name}\n              repoAddress={repoAddress}\n              usedSolids={repositoryOrError.usedSolids}\n            />\n          );\n        }\n        return null;\n      }}\n    </Loading>\n  );\n};\n\nconst SolidsRootWithData: React.FC<Props & {usedSolids: Solid[]}> = (props) => {\n  const {name, repoAddress, usedSolids} = props;\n  const history = useHistory();\n  const location = useLocation();\n  const {flagPipelineModeTuples} = useFeatureFlags();\n\n  const {q, typeExplorer} = querystring.parse(location.search);\n  const suggestions = searchSuggestionsForSolids(usedSolids, flagPipelineModeTuples);\n  const search = tokenizedValuesFromString((q as string) || '', suggestions);\n  const filtered = filterSolidsWithSearch(usedSolids, search);\n\n  const selected = usedSolids.find((s) => s.definition.name === name);\n\n  const onSearch = (search: TokenizingFieldValue[]) => {\n    history.replace({\n      search: `?${querystring.stringify({q: stringFromValue(search)})}`,\n    });\n  };\n\n  const onClickSolid = (defName: string) => {\n    history.replace(\n      workspacePathFromAddress(repoAddress, `/solids/${defName}?${querystring.stringify({q})}`),\n    );\n  };\n\n  React.useEffect(() => {\n    // If the user has typed in a search that brings us to a single result, autoselect it\n    if (filtered.length === 1 && (!selected || filtered[0] !== selected)) {\n      onClickSolid(filtered[0].definition.name);\n    }\n\n    // If the user has clicked a type, translate it into a search\n    if (typeof typeExplorer === 'string') {\n      onSearch([...search, {token: 'input', value: typeExplorer}]);\n    }\n  });\n\n  const onClickInvocation = React.useCallback(\n    ({pipelineName, handleID}) => {\n      history.push(\n        workspacePathFromAddress(\n          repoAddress,\n          `/pipelines/${pipelineName}/${handleID.split('.').join('/')}`,\n        ),\n      );\n    },\n    [history, repoAddress],\n  );\n\n  return (\n    <div style={{height: '100%', display: 'flex'}}>\n      <SplitPanelContainer\n        identifier={flagPipelineModeTuples ? 'ops' : 'solids'}\n        firstInitialPercent={40}\n        firstMinSize={420}\n        first={\n          <SolidListColumnContainer>\n            <div\n              style={{\n                padding: '15px 10px',\n                borderBottom: `1px solid ${Colors.LIGHT_GRAY2}`,\n              }}\n            >\n              <TokenizingField\n                values={search}\n                onChange={(search) => onSearch(search)}\n                suggestionProviders={suggestions}\n                placeholder={'Filter by name or input/output type...'}\n              />\n            </div>\n            <div style={{flex: 1}}>\n              <AutoSizer nonce={window.__webpack_nonce__}>\n                {({height, width}) => (\n                  <SolidList\n                    height={height}\n                    width={width}\n                    selected={selected}\n                    onClickSolid={onClickSolid}\n                    items={filtered.sort((a, b) =>\n                      a.definition.name.localeCompare(b.definition.name),\n                    )}\n                  />\n                )}\n              </AutoSizer>\n            </div>\n          </SolidListColumnContainer>\n        }\n        second={\n          selected ? (\n            <SolidDetailScrollContainer>\n              <UsedSolidDetails\n                name={selected.definition.name}\n                onClickInvocation={onClickInvocation}\n                repoAddress={repoAddress}\n              />\n            </SolidDetailScrollContainer>\n          ) : (\n            <NonIdealState\n              title={flagPipelineModeTuples ? 'No op selected' : 'No solid selected'}\n              description={\n                flagPipelineModeTuples\n                  ? 'Select an op to see its definition and invocations'\n                  : 'Select a solid to see its definition and invocations.'\n              }\n            />\n          )\n        }\n      />\n    </div>\n  );\n};\n\ninterface SolidListProps {\n  items: Solid[];\n  width: number;\n  height: number;\n  selected: Solid | undefined;\n  onClickSolid: (name: string) => void;\n}\n\nconst SolidList: React.FunctionComponent<SolidListProps> = (props) => {\n  const {items, selected} = props;\n  const cache = React.useRef(new CellMeasurerCache({defaultHeight: 60, fixedWidth: true}));\n\n  // Reset our cell sizes when the panel's width is changed. This is similar to a useEffect\n  // but we need it to run /before/ the render not just after it completes.\n  const lastWidth = React.useRef(props.width);\n  if (props.width !== lastWidth.current) {\n    cache.current.clearAll();\n    lastWidth.current = props.width;\n  }\n\n  const selectedIndex = selected ? items.findIndex((item) => item === selected) : undefined;\n\n  return (\n    <List\n      width={props.width}\n      height={props.height}\n      rowCount={props.items.length}\n      rowHeight={cache.current.rowHeight}\n      scrollToIndex={selectedIndex}\n      rowRenderer={({parent, index, key, style}) => {\n        const solid = props.items[index];\n        return (\n          <CellMeasurer cache={cache.current} index={index} parent={parent} key={key}>\n            <SolidListItem\n              style={style}\n              selected={solid === props.selected}\n              onClick={() => props.onClickSolid(solid.definition.name)}\n            >\n              <SolidName>{solid.definition.name}</SolidName>\n              <SolidTypeSignature definition={solid.definition} />\n            </SolidListItem>\n          </CellMeasurer>\n        );\n      }}\n      overscanRowCount={10}\n    />\n  );\n};\n\nconst SOLIDS_ROOT_QUERY = gql`\n  query SolidsRootQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolids {\n          __typename\n          definition {\n            name\n            ...SolidTypeSignatureFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  ${SOLID_TYPE_SIGNATURE_FRAGMENT}\n`;\n\nconst SolidListItem = styled.div<{selected: boolean}>`\n  background: ${({selected}) => (selected ? Colors.BLUE3 : Colors.WHITE)};\n  color: ${({selected}) => (selected ? Colors.WHITE : Colors.DARK_GRAY3)};\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px 15px;\n  user-select: none;\n  border-bottom: 1px solid ${Colors.LIGHT_GRAY2};\n  & > code.bp3-code {\n    color: ${({selected}) => (selected ? Colors.WHITE : Colors.DARK_GRAY3)};\n    background: transparent;\n    font-family: ${FontFamily.monospace};\n    padding: 5px 0 0 0;\n  }\n`;\n\nconst SolidName = styled.div`\n  flex: 1;\n  font-weight: 600;\n`;\n\nconst SolidListColumnContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Group} from '../ui/Group';\nimport {Page} from '../ui/Page';\nimport {Table} from '../ui/Table';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {RepositoryAssetsListQuery} from './types/RepositoryAssetsListQuery';\nimport {workspacePath} from './workspacePath';\n\nconst REPOSITORY_ASSETS_LIST_QUERY = gql`\n  query RepositoryAssetsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          opName\n          description\n          jobName\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryAssetsList: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<RepositoryAssetsListQuery>(REPOSITORY_ASSETS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  console.log(repo);\n  const assetsForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    const items = repo.assetNodes.map((asset) => ({\n      name: asset.assetKey.path.join(' > '),\n      path: `/assets/${asset.assetKey.path.map(encodeURIComponent).join('/')}`,\n      description: asset.description,\n      repoAddress,\n    }));\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !assetsForTable) {\n    return (\n      <NonIdealState\n        title=\"Unable to load graphs\"\n        description={`Could not load graphs for ${repoAddressAsString(repoAddress)}`}\n      />\n    );\n  }\n\n  if (!assetsForTable.length) {\n    return (\n      <NonIdealState\n        title=\"No assets found\"\n        description={`No @asset definitions for ${repoAddressAsString(repoAddress)}`}\n      />\n    );\n  }\n\n  return (\n    <Page>\n      <Table>\n        <tbody>\n          {assetsForTable.map(({name, description, path, repoAddress}) => (\n            <tr key={`${name}-${repoAddressAsString(repoAddress)}`}>\n              <td>\n                <Group direction=\"column\" spacing={4}>\n                  <Link to={workspacePath(repoAddress.name, repoAddress.location, path)}>\n                    {name}\n                  </Link>\n                  <Description>{description}</Description>\n                </Group>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.GRAY3};\n  font-size: 12px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Group} from '../ui/Group';\nimport {Page} from '../ui/Page';\nimport {Table} from '../ui/Table';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {RepositoryGraphsListQuery} from './types/RepositoryGraphsListQuery';\nimport {workspacePath} from './workspacePath';\n\nconst REPOSITORY_GRAPHS_LIST_QUERY = gql`\n  query RepositoryGraphsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          description\n          name\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryGraphsList: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<RepositoryGraphsListQuery>(REPOSITORY_GRAPHS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const graphsForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    const items = repo.pipelines.map((pipeline) => ({\n      name: pipeline.name,\n      path: `/graphs/${pipeline.name}`,\n      description: pipeline.description,\n      repoAddress,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n          repoAddress,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !graphsForTable) {\n    return (\n      <NonIdealState\n        title=\"Unable to load graphs\"\n        description={`Could not load graphs for ${repoAddressAsString(repoAddress)}`}\n      />\n    );\n  }\n\n  return (\n    <Page>\n      <Table>\n        <thead>\n          <tr>\n            <th>Graph</th>\n          </tr>\n        </thead>\n        <tbody>\n          {graphsForTable.map(({name, description, path, repoAddress}) => (\n            <tr key={`${name}-${repoAddressAsString(repoAddress)}`}>\n              <td>\n                <Group direction=\"column\" spacing={4}>\n                  <Link to={workspacePath(repoAddress.name, repoAddress.location, path)}>\n                    {name}\n                  </Link>\n                  <Description>{description}</Description>\n                </Group>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.GRAY3};\n  font-size: 12px;\n`;\n","import {gql} from '@apollo/client';\nimport {Colors} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {Group} from '../ui/Group';\nimport {Table} from '../ui/Table';\nimport {Caption} from '../ui/Text';\nimport {repoAddressAsString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineReference} from './PipelineReference';\nimport {PipelineTableFragment} from './types/PipelineTableFragment';\n\ntype PipelineForTable = {pipeline: PipelineTableFragment; repoAddress: RepoAddress; mode?: string};\n\ninterface Props {\n  pipelines: PipelineForTable[];\n  showRepo: boolean;\n}\n\nexport const PipelineTable: React.FC<Props> = (props) => {\n  const {pipelines, showRepo} = props;\n  const {flagPipelineModeTuples} = useFeatureFlags();\n\n  let items = pipelines;\n  if (flagPipelineModeTuples) {\n    items = [];\n    for (const item of pipelines) {\n      items.push(...item.pipeline.modes.map((mode) => ({...item, mode: mode.name})));\n    }\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '50%', minWidth: '400px'}}>\n            {flagPipelineModeTuples ? 'Job' : 'Pipeline'}\n          </th>\n          <th>Schedules</th>\n          <th>Sensors</th>\n          <th style={{whiteSpace: 'nowrap'}}>Recent runs</th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map(({pipeline, repoAddress, mode}) => (\n          <tr key={`${pipeline.name}-${repoAddressAsString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <PipelineReference\n                  pipelineName={pipeline.name}\n                  mode={mode || pipeline.modes[0].name}\n                  pipelineHrefContext={repoAddress}\n                />\n                {showRepo ? <Caption>{repoAddressAsString(repoAddress)}</Caption> : null}\n                <Description>{pipeline.description}</Description>\n              </Group>\n            </td>\n            <td>\n              {pipeline.schedules?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipeline.schedules\n                    .filter((s) => !mode || s.mode === mode)\n                    .map((schedule) => (\n                      <Link\n                        key={schedule.name}\n                        to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n                      >\n                        {schedule.name}\n                      </Link>\n                    ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.GRAY5}}>None</div>\n              )}\n            </td>\n            <td>\n              {pipeline.sensors?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipeline.sensors\n                    .filter(\n                      (s) =>\n                        !mode ||\n                        s.targets?.some(\n                          (target) =>\n                            target.mode === mode && target?.pipelineName === pipeline.name,\n                        ),\n                    )\n                    .map((sensor) => (\n                      <Link\n                        key={sensor.name}\n                        to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n                      >\n                        {sensor.name}\n                      </Link>\n                    ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.GRAY5}}>None</div>\n              )}\n            </td>\n            <td>\n              <Group direction=\"row\" spacing={4} alignItems=\"center\">\n                {pipeline.runs.map((run) => (\n                  <RunStatusWithStats\n                    key={run.id}\n                    runId={run.runId}\n                    status={run.status}\n                    size={12}\n                  />\n                ))}\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.GRAY3};\n  font-size: 12px;\n`;\n\nexport const PIPELINE_TABLE_FRAGMENT = gql`\n  fragment PipelineTableFragment on Pipeline {\n    id\n    description\n    name\n    modes {\n      id\n      name\n    }\n    runs(limit: 5) {\n      id\n      mode\n      runId\n      status\n    }\n    schedules {\n      id\n      name\n      mode\n    }\n    sensors {\n      id\n      name\n      targets {\n        mode\n        pipelineName\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\n\nimport {PipelineTable, PIPELINE_TABLE_FRAGMENT} from '../pipelines/PipelineTable';\nimport {Page} from '../ui/Page';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {RepositoryPipelinesListQuery} from './types/RepositoryPipelinesListQuery';\n\nconst REPOSITORY_PIPELINES_LIST_QUERY = gql`\n  query RepositoryPipelinesListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        pipelines {\n          id\n          ...PipelineTableFragment\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n  ${PIPELINE_TABLE_FRAGMENT}\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryPipelinesList: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<RepositoryPipelinesListQuery>(\n    REPOSITORY_PIPELINES_LIST_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {repositorySelector},\n    },\n  );\n\n  const repo = data?.repositoryOrError;\n  const pipelinesForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    return repo.pipelines.map((pipeline) => ({\n      pipeline,\n      repoAddress,\n    }));\n  }, [repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !pipelinesForTable) {\n    return (\n      <NonIdealState\n        title=\"Unable to load pipelines\"\n        description={`Could not load pipelines for ${repoAddressAsString(repoAddress)}`}\n      />\n    );\n  }\n\n  return (\n    <Page>\n      <PipelineTable pipelines={pipelinesForTable} showRepo={false} />\n    </Page>\n  );\n};\n","import {Colors, Tab, Tabs} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Link, Redirect, Route, Switch} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {SchedulesRoot} from '../schedules/SchedulesRoot';\nimport {SensorsRoot} from '../sensors/SensorsRoot';\nimport {SolidsRoot} from '../solids/SolidsRoot';\nimport {Box} from '../ui/Box';\nimport {Group} from '../ui/Group';\nimport {PageHeader} from '../ui/PageHeader';\nimport {Heading} from '../ui/Text';\n\nimport {RepositoryAssetsList} from './RepositoryAssetsList';\nimport {RepositoryGraphsList} from './RepositoryGraphsList';\nimport {RepositoryPipelinesList} from './RepositoryPipelinesList';\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props {\n  tab?: string;\n  repoAddress: RepoAddress;\n}\n\nexport const WorkspaceRepoRoot: React.FC<Props> = (props) => {\n  const {repoAddress, tab} = props;\n  const path = repoAddressAsString(repoAddress);\n  const {flagPipelineModeTuples, flagAssetGraph} = useFeatureFlags();\n\n  const tabs = [\n    {text: 'Pipelines', href: workspacePathFromAddress(repoAddress, '/pipelines')},\n    {\n      text: flagPipelineModeTuples ? 'Ops' : 'Solids',\n      href: workspacePathFromAddress(repoAddress, flagPipelineModeTuples ? '/ops' : '/solids'),\n    },\n    {text: 'Schedules', href: workspacePathFromAddress(repoAddress, '/schedules')},\n    {text: 'Sensors', href: workspacePathFromAddress(repoAddress, '/sensors')},\n  ];\n\n  if (flagPipelineModeTuples) {\n    tabs.splice(0, 1, {text: 'Jobs', href: workspacePathFromAddress(repoAddress, '/jobs')});\n    tabs.splice(1, 0, {text: 'Graphs', href: workspacePathFromAddress(repoAddress, '/graphs')});\n  }\n\n  if (flagAssetGraph) {\n    tabs.push({\n      text: 'Assets',\n      href: workspacePathFromAddress(repoAddress, '/assets'),\n    });\n  }\n\n  const activeTab = () => {\n    switch (tab) {\n      case 'schedules':\n        return 'Schedules';\n      case 'sensors':\n        return 'Sensors';\n      case 'solids':\n        return 'Solids';\n      case 'ops':\n        return 'Ops';\n      case 'graphs':\n        return 'Graphs';\n      case 'jobs':\n        return 'Jobs';\n      case 'pipelines':\n        return 'Pipelines';\n      case 'assets':\n        return 'Assets';\n      default:\n        return flagPipelineModeTuples ? 'Pipelines' : 'Jobs';\n    }\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%'}}>\n      <Group direction=\"column\" spacing={16} padding={{top: 20, horizontal: 20}}>\n        <PageHeader\n          title={<Heading>{path}</Heading>}\n          icon=\"source\"\n          description={<Link to=\"/workspace\">Repository</Link>}\n        />\n        <Box border={{side: 'bottom', width: 1, color: Colors.LIGHT_GRAY3}}>\n          <Tabs large={false} selectedTabId={activeTab()}>\n            {tabs.map((tab) => {\n              const {href, text} = tab;\n              return <Tab key={text} id={text} title={<Link to={href}>{text}</Link>} />;\n            })}\n          </Tabs>\n        </Box>\n      </Group>\n      <div style={{flex: 1, flexGrow: 1}}>\n        <Switch>\n          <Route\n            path=\"/workspace/:repoPath/schedules\"\n            render={() => <SchedulesRoot repoAddress={repoAddress} />}\n          />\n          <Route\n            path=\"/workspace/:repoPath/sensors\"\n            render={() => <SensorsRoot repoAddress={repoAddress} />}\n          />\n          <Route\n            path=\"/workspace/:repoPath/assets(/?.*)\"\n            render={() => <RepositoryAssetsList repoAddress={repoAddress} />}\n          />\n          <Route\n            path=\"/workspace/:repoPath/ops/:name?\"\n            render={(props) => (\n              <SolidsRoot name={props.match.params.name} repoAddress={repoAddress} />\n            )}\n          />\n          <Route\n            path=\"/workspace/:repoPath/solids/:name?\"\n            render={(props) => {\n              if (flagPipelineModeTuples) {\n                return <Redirect to={props.match.url.replace(/\\/solids\\/?/, '/ops/')} />;\n              }\n              return <SolidsRoot name={props.match.params.name} repoAddress={repoAddress} />;\n            }}\n          />\n          {flagPipelineModeTuples && (\n            <Redirect from={'/workspace/:repoPath/pipelines'} to={'/workspace/:repoPath/jobs'} />\n          )}\n          <Route\n            path={['/workspace/:repoPath/pipelines', '/workspace/:repoPath/jobs']}\n            render={() => <RepositoryPipelinesList repoAddress={repoAddress} />}\n          />\n          <Route\n            path=\"/workspace/:repoPath/graphs\"\n            exact\n            render={() => <RepositoryGraphsList repoAddress={repoAddress} />}\n          />\n          <Route\n            path=\"/workspace/:repoPath/(.*)?\"\n            render={() => <Redirect to={workspacePathFromAddress(repoAddress, `/pipelines`)} />}\n          />\n        </Switch>\n      </div>\n    </Box>\n  );\n};\n","import {NonIdealState} from '@blueprintjs/core';\nimport * as React from 'react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {PipelineRoot} from '../pipelines/PipelineRoot';\nimport {ScheduleRoot} from '../schedules/ScheduleRoot';\nimport {SensorRoot} from '../sensors/SensorRoot';\nimport {MainContent} from '../ui/MainContent';\n\nimport {AssetGraphRoot} from './AssetGraphRoot';\nimport {GraphRoot} from './GraphRoot';\nimport {WorkspaceContext} from './WorkspaceContext';\nimport {WorkspaceOverviewRoot} from './WorkspaceOverviewRoot';\nimport {WorkspacePipelineRoot} from './WorkspacePipelineRoot';\nimport {WorkspaceRepoRoot} from './WorkspaceRepoRoot';\nimport {repoAddressFromPath} from './repoAddressFromPath';\n\nconst RepoRouteContainer: React.FC<{repoPath: string}> = (props) => {\n  const {repoPath} = props;\n  const workspaceState = React.useContext(WorkspaceContext);\n  const addressForPath = repoAddressFromPath(repoPath);\n  const {flagPipelineModeTuples, flagAssetGraph} = useFeatureFlags();\n\n  // A RepoAddress could not be created for this path, which means it's invalid.\n  if (!addressForPath) {\n    return (\n      <NonIdealState\n        icon=\"cube\"\n        title=\"Invalid repository\"\n        description={\n          <div>\n            <div>\n              <strong>{repoPath}</strong>\n            </div>\n            {'  is not a valid repository path.'}\n          </div>\n        }\n      />\n    );\n  }\n\n  const {loading} = workspaceState;\n\n  if (loading) {\n    return <div />;\n  }\n\n  const matchingRepo = workspaceState.allRepos.find(\n    (repo) =>\n      repo.repository.name === addressForPath.name &&\n      repo.repositoryLocation.name === addressForPath.location,\n  );\n\n  // If we don't have any active repositories, or if our active repo does not match\n  // the repo path in the URL, it means we aren't able to load this repo.\n  if (!matchingRepo) {\n    return (\n      <NonIdealState\n        icon=\"cube\"\n        title=\"Unknown repository\"\n        description={\n          <div>\n            <div>\n              <strong>{repoPath}</strong>\n            </div>\n            {'  is not loaded in the current workspace.'}\n          </div>\n        }\n      />\n    );\n  }\n\n  return (\n    <Switch>\n      <Route\n        path=\"/workspace/:repoPath/jobs/(/?.*)\"\n        render={() => <PipelineRoot repoAddress={addressForPath} />}\n      />\n      <Route\n        path=\"/workspace/:repoPath/graphs/(/?.*)\"\n        render={(props) => <GraphRoot {...props} repoAddress={addressForPath} />}\n      />\n      <Route\n        path=\"/workspace/:repoPath/pipelines/(/?.*)\"\n        render={(props: RouteComponentProps) => {\n          if (flagPipelineModeTuples) {\n            return <Redirect to={props.match.url.replace('/pipelines/', '/jobs/')} />;\n          }\n          return <PipelineRoot repoAddress={addressForPath} />;\n        }}\n      />\n      <Route\n        path=\"/workspace/:repoPath/schedules/:scheduleName/:runTab?\"\n        render={(props: RouteComponentProps<{runTab?: string; scheduleName: string}>) => (\n          <ScheduleRoot\n            scheduleName={props.match.params.scheduleName}\n            repoAddress={addressForPath}\n            runTab={props.match.params.runTab}\n          />\n        )}\n      />\n      <Route\n        path=\"/workspace/:repoPath/sensors/:sensorName\"\n        render={(props: RouteComponentProps<{sensorName: string}>) => (\n          <SensorRoot sensorName={props.match.params.sensorName} repoAddress={addressForPath} />\n        )}\n      />\n      {flagAssetGraph ? (\n        <Route\n          path=\"/workspace/:repoPath/assets/(.+)\"\n          render={(props) => {\n            return (\n              <AssetGraphRoot\n                {...props}\n                repoAddress={addressForPath}\n                selected={\n                  props.match.params[0]\n                    ? JSON.stringify(props.match.params[0].split('/').map(decodeURIComponent))\n                    : undefined\n                }\n              />\n            );\n          }}\n        />\n      ) : null}\n      <Route\n        path=\"/workspace/:repoPath/:tab?\"\n        render={(props: RouteComponentProps<{tab?: string}>) => (\n          <WorkspaceRepoRoot tab={props.match.params.tab} repoAddress={addressForPath} />\n        )}\n      />\n    </Switch>\n  );\n};\n\nexport const WorkspaceRoot = () => {\n  const {flagPipelineModeTuples} = useFeatureFlags();\n  return (\n    <MainContent>\n      <Switch>\n        <Route path=\"/workspace\" exact component={WorkspaceOverviewRoot} />\n        <Route\n          path=\"/workspace/jobs/:pipelinePath\"\n          render={(props: RouteComponentProps<{pipelinePath: string}>) => (\n            <WorkspacePipelineRoot pipelinePath={props.match.params.pipelinePath} />\n          )}\n        />\n        <Route\n          path=\"/workspace/pipelines/:pipelinePath\"\n          render={(props: RouteComponentProps<{pipelinePath: string}>) => {\n            if (flagPipelineModeTuples) {\n              return <Redirect to={props.match.url.replace('/pipelines/', '/jobs/')} />;\n            }\n            return <WorkspacePipelineRoot pipelinePath={props.match.params.pipelinePath} />;\n          }}\n        />\n        <Route\n          path=\"/workspace/:repoPath\"\n          render={(props: RouteComponentProps<{repoPath: string}>) => (\n            <RepoRouteContainer repoPath={props.match.params.repoPath} />\n          )}\n        />\n      </Switch>\n    </MainContent>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default WorkspaceRoot;\n","import {Colors} from '@blueprintjs/core';\nimport styled from 'styled-components/macro';\n\nexport const SessionSettingsBar = styled.div`\n  color: white;\n  display: flex;\n  position: relative;\n  border-bottom: 1px solid ${Colors.LIGHT_GRAY1};\n  background: ${Colors.WHITE};\n  align-items: center;\n  height: 47px;\n  padding: 8px 10px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Button, HTMLInputProps, IInputGroupProps, Intent, Menu, MenuItem} from '@blueprintjs/core';\nimport {Select, Suggest} from '@blueprintjs/select';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useFeatureFlags} from '../app/Flags';\nimport {IExecutionSession} from '../app/LocalStorage';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment';\nimport {RepositorySelector} from '../types/globalTypes';\nimport {ColorsWIP} from '../ui/Colors';\nimport {IconWIP} from '../ui/Icon';\nimport {Spinner} from '../ui/Spinner';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ConfigEditorGeneratorPartitionSetsFragment_results} from './types/ConfigEditorGeneratorPartitionSetsFragment';\nimport {\n  ConfigEditorGeneratorPipelineFragment,\n  ConfigEditorGeneratorPipelineFragment_presets,\n} from './types/ConfigEditorGeneratorPipelineFragment';\nimport {\n  ConfigPartitionsQuery,\n  ConfigPartitionsQuery_partitionSetOrError_PartitionSet_partitionsOrError_Partitions_results,\n} from './types/ConfigPartitionsQuery';\n\ntype Pipeline = ConfigEditorGeneratorPipelineFragment;\ntype Preset = ConfigEditorGeneratorPipelineFragment_presets;\ntype PartitionSet = ConfigEditorGeneratorPartitionSetsFragment_results;\ntype Partition = ConfigPartitionsQuery_partitionSetOrError_PartitionSet_partitionsOrError_Partitions_results;\ntype ConfigGenerator = Preset | PartitionSet;\n\ninterface ConfigEditorConfigPickerProps {\n  base: IExecutionSession['base'];\n  pipeline: Pipeline;\n  pipelineMode?: string;\n  partitionSets: PartitionSet[];\n  onSaveSession: (updates: Partial<IExecutionSession>) => void;\n  onSelectPreset: (preset: Preset) => Promise<void>;\n  onSelectPartition: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => Promise<void>;\n  repoAddress: RepoAddress;\n}\n\nexport const ConfigEditorConfigPicker: React.FC<ConfigEditorConfigPickerProps> = (props) => {\n  const {\n    pipeline,\n    pipelineMode,\n    base,\n    onSaveSession,\n    onSelectPreset,\n    onSelectPartition,\n    partitionSets,\n    repoAddress,\n  } = props;\n\n  const {presets} = pipeline;\n\n  const configGenerators: ConfigGenerator[] = React.useMemo(() => {\n    const byName = (a: {name: string}, b: {name: string}) => a.name.localeCompare(b.name);\n    return [...presets, ...partitionSets]\n      .filter(({mode}) => !pipelineMode || mode === pipelineMode)\n      .sort(byName);\n  }, [presets, partitionSets, pipelineMode]);\n\n  const label = () => {\n    if (!base) {\n      if (presets.length && !partitionSets.length) {\n        return 'Preset';\n      }\n      if (!presets.length && partitionSets.length) {\n        return 'Partition Set';\n      }\n      return 'Preset / Partition Set';\n    }\n\n    if ('presetName' in base) {\n      return `Preset: ${base.presetName}`;\n    }\n\n    return `Partition Set: ${base.partitionsSetName}`;\n  };\n\n  const onSelect = (item: ConfigGenerator) => {\n    if (item.__typename === 'PartitionSet') {\n      onSaveSession({\n        mode: item.mode,\n        base: {\n          partitionsSetName: item.name,\n          partitionName: null,\n        },\n      });\n    } else {\n      onSelectPreset(item);\n    }\n  };\n\n  return (\n    <PickerContainer>\n      {pipelineMode && configGenerators.length <= 1 ? null : (\n        <ConfigEditorConfigGeneratorPicker\n          label={label()}\n          configGenerators={configGenerators}\n          onSelect={onSelect}\n        />\n      )}\n      {base && 'partitionsSetName' in base ? (\n        <ConfigEditorPartitionPicker\n          pipeline={pipeline}\n          partitionSetName={base.partitionsSetName}\n          value={base.partitionName}\n          onSelect={onSelectPartition}\n          repoAddress={repoAddress}\n        />\n      ) : null}\n    </PickerContainer>\n  );\n};\n\ninterface ConfigEditorPartitionPickerProps {\n  pipeline: Pipeline;\n  partitionSetName: string;\n  value: string | null;\n  onSelect: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => void;\n  repoAddress: RepoAddress;\n}\n\nconst ConfigEditorPartitionPicker: React.FC<ConfigEditorPartitionPickerProps> = React.memo(\n  (props) => {\n    const {partitionSetName, value, onSelect, repoAddress} = props;\n    const repositorySelector = repoAddressToSelector(repoAddress);\n    const {data, loading} = useQuery<ConfigPartitionsQuery>(CONFIG_PARTITIONS_QUERY, {\n      variables: {repositorySelector, partitionSetName},\n      fetchPolicy: 'network-only',\n    });\n\n    const [sortOrder, setSortOrder] = React.useState('asc');\n\n    const partitions: Partition[] = React.useMemo(() => {\n      const retrieved =\n        data?.partitionSetOrError.__typename === 'PartitionSet' &&\n        data?.partitionSetOrError.partitionsOrError.__typename === 'Partitions'\n          ? data.partitionSetOrError.partitionsOrError.results\n          : [];\n      return sortOrder === 'asc' ? retrieved : [...retrieved].reverse();\n    }, [data, sortOrder]);\n\n    const error: PythonErrorFragment | null =\n      data?.partitionSetOrError.__typename === 'PartitionSet' &&\n      data?.partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ? data.partitionSetOrError.partitionsOrError\n        : null;\n\n    const selected = partitions.find((p) => p.name === value);\n\n    const onClickSort = React.useCallback((event) => {\n      event.preventDefault();\n      setSortOrder((order) => (order === 'asc' ? 'desc' : 'asc'));\n    }, []);\n\n    const rightElement = partitions.length ? (\n      <Button\n        icon={<IconWIP name=\"sort_by_alpha\" color={ColorsWIP.Gray400} />}\n        minimal\n        onMouseDown={onClickSort}\n      ></Button>\n    ) : undefined;\n\n    const inputProps: IInputGroupProps & HTMLInputProps = {\n      placeholder: 'Partition',\n      style: {width: 180},\n      intent: (loading ? !!value : !!selected) ? Intent.NONE : Intent.DANGER,\n      rightElement,\n    };\n\n    // If we are loading the partitions and do NOT have any cached data to display,\n    // show the component in a loading state with a spinner and fill it with the\n    // current partition's name so it doesn't flicker (if one is set already.)\n    if (loading && partitions.length === 0) {\n      return (\n        <Suggest<string>\n          key=\"loading\"\n          inputProps={{\n            ...inputProps,\n            rightElement: !value ? <Spinner purpose=\"body-text\" /> : undefined,\n          }}\n          items={[]}\n          itemRenderer={() => null}\n          noResults={<Menu.Item disabled={true} text=\"Loading...\" />}\n          inputValueRenderer={(str) => str}\n          selectedItem={value}\n        />\n      );\n    }\n\n    if (error) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={error} />,\n      });\n    }\n\n    // Note: We don't want this Suggest to be a fully \"controlled\" React component.\n    // Keeping it's state is annoyign and we only want to update our data model on\n    // selection change. However, we need to set an initial value (defaultSelectedItem)\n    // and ensure it is re-applied to the internal state when it changes (via `key` below).\n    return (\n      <Suggest<Partition>\n        key={selected ? selected.name : 'none'}\n        defaultSelectedItem={selected}\n        items={partitions}\n        inputProps={inputProps}\n        inputValueRenderer={(partition) => partition.name}\n        itemPredicate={(query, partition) => query.length === 0 || partition.name.includes(query)}\n        itemRenderer={(partition, props) => (\n          <Menu.Item\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={partition.name}\n            text={partition.name}\n          />\n        )}\n        noResults={<Menu.Item disabled={true} text=\"No presets.\" />}\n        onItemSelect={(item) => {\n          onSelect(repositorySelector, partitionSetName, item.name);\n        }}\n      />\n    );\n  },\n);\n\ninterface ConfigEditorConfigGeneratorPickerProps {\n  label: string;\n  configGenerators: ConfigGenerator[];\n  onSelect: (configGenerator: ConfigGenerator) => void;\n}\n\nconst ConfigEditorConfigGeneratorPicker: React.FC<ConfigEditorConfigGeneratorPickerProps> = React.memo(\n  (props) => {\n    const {configGenerators, label, onSelect} = props;\n    const {flagPipelineModeTuples} = useFeatureFlags();\n    const select = React.useRef<Select<ConfigGenerator>>(null);\n    const itemLabel = flagPipelineModeTuples ? 'Ops' : 'Solids';\n\n    return (\n      <div>\n        <ShortcutHandler\n          shortcutLabel={'⌥E'}\n          shortcutFilter={(e) => e.keyCode === 69 && e.altKey}\n          onShortcut={() => activateSelect(select.current)}\n        >\n          <Select<ConfigGenerator>\n            ref={select}\n            items={configGenerators}\n            itemPredicate={(query, configGenerator) =>\n              query.length === 0 || configGenerator.name.includes(query)\n            }\n            itemListRenderer={({itemsParentRef, renderItem, filteredItems}) => {\n              const renderedPresetItems = filteredItems\n                .filter((item) => item.__typename === 'PipelinePreset')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const renderedPartitionSetItems = filteredItems\n                .filter((item) => item.__typename === 'PartitionSet')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const bothTypesPresent =\n                renderedPresetItems.length > 0 && renderedPartitionSetItems.length > 0;\n\n              return (\n                <Menu ulRef={itemsParentRef}>\n                  {bothTypesPresent && <MenuItem disabled={true} text={`Presets`} />}\n                  {renderedPresetItems}\n                  {bothTypesPresent && <Menu.Divider />}\n                  {bothTypesPresent && <MenuItem disabled={true} text={`Partition Sets`} />}\n                  {renderedPartitionSetItems}\n                </Menu>\n              );\n            }}\n            itemRenderer={(item, props) => (\n              <Menu.Item\n                active={props.modifiers.active}\n                onClick={props.handleClick}\n                key={item.name}\n                text={\n                  <div>\n                    {item.name}\n                    <div style={{opacity: 0.4, fontSize: '0.75rem'}}>\n                      {[\n                        item.solidSelection\n                          ? item.solidSelection.length === 1\n                            ? `${itemLabel}: ${item.solidSelection[0]}`\n                            : `${itemLabel}: ${item.solidSelection.length}`\n                          : `${itemLabel}: All`,\n                        `Mode: ${item.mode}`,\n                      ].join(' - ')}\n                    </div>\n                  </div>\n                }\n              />\n            )}\n            noResults={<Menu.Item disabled={true} text=\"No presets.\" />}\n            onItemSelect={onSelect}\n          >\n            <Button text={label} data-test-id=\"preset-selector-button\" rightIcon=\"caret-down\" />\n          </Select>\n        </ShortcutHandler>\n      </div>\n    );\n  },\n);\n\nfunction activateSelect(select: Select<any> | null) {\n  if (!select) {\n    return;\n  }\n  // eslint-disable-next-line react/no-find-dom-node\n  const selectEl = ReactDOM.findDOMNode(select) as HTMLElement;\n  const btnEl = selectEl.querySelector('button');\n  if (btnEl) {\n    btnEl.click();\n  }\n}\n\nconst PickerContainer = styled.div`\n  display: flex;\n  justify: space-between;\n  align-items: center;\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPipelineFragment on Pipeline {\n    id\n    name\n    presets {\n      __typename\n      name\n      mode\n      solidSelection\n      runConfigYaml\n      tags {\n        key\n        value\n      }\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPartitionSetsFragment on PartitionSets {\n    results {\n      id\n      name\n      mode\n      solidSelection\n    }\n  }\n`;\n\nconst CONFIG_PARTITIONS_QUERY = gql`\n  query ConfigPartitionsQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n          ... on PythonError {\n            ...PythonErrorFragment\n          }\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const CONFIG_PARTITION_SELECTION_QUERY = gql`\n  query ConfigPartitionSelectionQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n    $partitionName: String!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partition(partitionName: $partitionName) {\n          name\n          solidSelection\n          runConfigOrError {\n            ... on PartitionRunConfig {\n              yaml\n            }\n            ... on PythonError {\n              ...PythonErrorFragment\n            }\n          }\n          mode\n          tagsOrError {\n            ... on PartitionTags {\n              results {\n                key\n                value\n              }\n            }\n            ... on PythonError {\n              ...PythonErrorFragment\n            }\n          }\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Group} from '../ui/Group';\nimport {Spinner} from '../ui/Spinner';\n\nexport const LoadingOverlay: React.FC<{\n  isLoading: boolean;\n  message: string;\n}> = ({isLoading, message}) => (\n  <LoadingOverlayContainer isLoading={isLoading}>\n    <Group direction=\"row\" spacing={8} alignItems=\"center\">\n      <Spinner purpose=\"body-text\" />\n      <div>{message}</div>\n    </Group>\n  </LoadingOverlayContainer>\n);\n\nconst LoadingOverlayContainer = styled.div<{isLoading: boolean}>`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background-color: #fff;\n  z-index: 20;\n  display: ${({isLoading}) => (!isLoading ? 'none' : 'flex')};\n  align-items: center;\n  justify-content: center;\n  opacity: ${({isLoading}) => (isLoading ? '0.7' : '0')};\n  transition: opacity 150ms linear;\n  transition-delay: 300ms;\n`;\n","import {Button, Classes, Dialog} from '@blueprintjs/core';\nimport {Tooltip2 as Tooltip} from '@blueprintjs/popover2';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {PipelineRunTag} from '../app/LocalStorage';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {RunTag} from '../runs/RunTag';\nimport {Box} from '../ui/Box';\nimport {ButtonLink} from '../ui/ButtonLink';\nimport {ColorsWIP} from '../ui/Colors';\nimport {Group} from '../ui/Group';\nimport {IconWIP} from '../ui/Icon';\n\ninterface ITagEditorProps {\n  tagsFromDefinition?: PipelineRunTag[];\n  tagsFromSession: PipelineRunTag[];\n  open: boolean;\n  onChange: (tags: PipelineRunTag[]) => void;\n  onRequestClose: () => void;\n}\n\ninterface ITagContainerProps {\n  tags: {\n    fromDefinition?: PipelineRunTag[];\n    fromSession?: PipelineRunTag[];\n  };\n  onRequestEdit: () => void;\n}\n\nexport const TagEditor: React.FC<ITagEditorProps> = ({\n  tagsFromDefinition = [],\n  tagsFromSession = [],\n  open,\n  onChange,\n  onRequestClose,\n}) => {\n  const [editState, setEditState] = React.useState(() =>\n    tagsFromSession.length ? tagsFromSession : [{key: '', value: ''}],\n  );\n\n  const toSave: PipelineRunTag[] = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => tag.key && tag.value);\n  const toError = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => !tag.key !== !tag.value);\n\n  const onSave = () => {\n    if (!toError.length) {\n      onChange(toSave);\n      onRequestClose();\n    }\n  };\n\n  const disabled = editState === tagsFromSession || !!toError.length;\n\n  const onTagEdit = (key: string, value: string, idx: number) => {\n    setEditState((current) => [...current.slice(0, idx), {key, value}, ...current.slice(idx + 1)]);\n  };\n\n  const onRemove = (idx: number) => {\n    setEditState((current) => [...current.slice(0, idx), ...current.slice(idx + 1)]);\n  };\n\n  const addTagEntry = () => {\n    setEditState((current) => [...current, {key: '', value: ''}]);\n  };\n\n  return (\n    <Dialog\n      icon=\"info-sign\"\n      onClose={onRequestClose}\n      style={{minWidth: 500}}\n      title=\"Add tags to run\"\n      usePortal={true}\n      isOpen={open}\n    >\n      <div\n        className={Classes.DIALOG_BODY}\n        style={{\n          margin: 0,\n          marginBottom: 17,\n          height: `calc(100% - 85px)`,\n          position: 'relative',\n        }}\n      >\n        <Group padding={16} spacing={16} direction=\"column\">\n          {tagsFromDefinition.length ? (\n            <Group direction=\"column\" spacing={8}>\n              <Box margin={{left: 2}} style={{fontSize: '13px', fontWeight: 500}}>\n                Tags from definition:\n              </Box>\n              <TagList>\n                {tagsFromDefinition.map((tag, idx) => {\n                  const {key} = tag;\n                  const anyOverride = editState.some((editable) => editable.key === key);\n                  if (anyOverride) {\n                    return (\n                      <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                        <span style={{opacity: 0.2}}>\n                          <RunTag tag={tag} key={idx} />\n                        </span>\n                      </Tooltip>\n                    );\n                  }\n                  return <RunTag tag={tag} key={key} />;\n                })}\n              </TagList>\n            </Group>\n          ) : null}\n          <Group direction=\"column\" spacing={8}>\n            <Box margin={{left: 2}} style={{fontSize: '13px', fontWeight: 500}}>\n              Custom tags:\n            </Box>\n            <div>\n              {editState.map((tag, idx) => {\n                const {key, value} = tag;\n                return (\n                  <div\n                    key={idx}\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      marginBottom: 8,\n                    }}\n                  >\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Tag Key\"\n                      value={key}\n                      onChange={(e) => onTagEdit(e.target.value, value, idx)}\n                    />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Tag Value\"\n                      value={value}\n                      onChange={(e) => onTagEdit(key, e.target.value, idx)}\n                    />\n                    <RemoveButton onClick={() => onRemove(idx)}>\n                      <IconWIP name=\"close\" />\n                    </RemoveButton>\n                  </div>\n                );\n              })}\n              <Box margin={{left: 2}}>\n                <ButtonLink onClick={addTagEntry}>+ Add custom tag</ButtonLink>\n              </Box>\n            </div>\n          </Group>\n        </Group>\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n          <Button onClick={onRequestClose}>Cancel</Button>\n          <ShortcutHandler\n            shortcutLabel=\"⌥Enter\"\n            shortcutFilter={(e) => e.keyCode === 13 && e.altKey}\n            onShortcut={onSave}\n          >\n            <Button intent=\"primary\" onClick={onSave} disabled={disabled}>\n              Apply\n            </Button>\n          </ShortcutHandler>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nexport const TagContainer = ({tags, onRequestEdit}: ITagContainerProps) => {\n  const {fromDefinition = [], fromSession = []} = tags;\n  return (\n    <Container>\n      <TagList>\n        {fromDefinition.map((tag, idx) => {\n          const {key} = tag;\n          const anyOverride = fromSession.some((sessionTag) => sessionTag.key === key);\n          if (anyOverride) {\n            return (\n              <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                <span style={{opacity: 0.2}}>\n                  <RunTag tag={tag} key={idx} />\n                </span>\n              </Tooltip>\n            );\n          }\n          return <RunTag tag={tag} key={idx} />;\n        })}\n        {fromSession.map((tag, idx) => (\n          <RunTag tag={tag} key={idx} />\n        ))}\n      </TagList>\n      <TagEditorLink onRequestOpen={onRequestEdit}>\n        <Group direction=\"row\" spacing={4} alignItems=\"center\">\n          <IconWIP name=\"edit\" color={ColorsWIP.Gray500} /> Edit Tags\n        </Group>\n      </TagEditorLink>\n    </Container>\n  );\n};\n\ninterface ITagEditorLinkProps {\n  onRequestOpen: () => void;\n  children: React.ReactNode;\n}\n\nconst TagEditorLink = ({onRequestOpen, children}: ITagEditorLinkProps) => (\n  <ShortcutHandler\n    shortcutLabel={'⌥T'}\n    shortcutFilter={(e) => e.keyCode === 84 && e.altKey}\n    onShortcut={onRequestOpen}\n  >\n    <Link onClick={onRequestOpen}>{children}</Link>\n  </ShortcutHandler>\n);\n\nconst RemoveButton = styled.button`\n  background: none;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 0 3px;\n\n  :hover {\n    background-color: ${ColorsWIP.Gray200};\n  }\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  margin-right: 10px;\n  border-radius: 3px;\n  font-size: 14px;\n  padding: 3px 7px;\n  border: 1px solid #cccccc;\n`;\nconst Container = styled.div`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: row;\n  border-bottom: 1px solid #ececec;\n  padding: 4px 8px;\n`;\nconst TagList = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n`;\nconst Link = styled.div`\n  color: #666;\n  cursor: pointer;\n  margin: 4px 12px;\n  font-size: 12px;\n  &:hover {\n    color: #aaa;\n  }\n`;\n"],"sourceRoot":""}